# strategies/strategy_manager.py

from datetime import datetime, timedelta, timezone
from typing import Any

from strategies.base_strategy import BaseStrategy
from strategies.grid_strategy import GridStrategy
from strategies.scalping_v1 import ScalpingV1
from strategies.tp_optimizer import TPOptimizer


class MarketRegimeDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""

    def __init__(self, config, logger):
        self.config = config
        self.logger = logger
        self.volatility_threshold = 0.02  # 2% –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        self.trend_threshold = 0.01  # 1% –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞

    async def detect_regime(self, symbol: str, market_data: dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞: trending, ranging, volatile"""
        try:
            # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            atr_percent = market_data.get("atr_percent", 0)
            price_change = abs(market_data.get("price_change_percent", 0))

            # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
            volume_ratio = market_data.get("volume_ratio", 1.0)

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
            if atr_percent > self.volatility_threshold * 2:
                return "volatile"
            elif price_change > self.trend_threshold and volume_ratio > 1.2:
                return "trending"
            else:
                return "ranging"

        except Exception as e:
            self.logger.log_event(
                "MARKET_REGIME", "ERROR", f"Failed to detect regime for {symbol}: {e}"
            )
            return "ranging"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é


class StrategyManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
    """

    def __init__(self, config, exchange_client, symbol_manager, logger):
        self.config = config
        self.exchange = exchange_client
        self.symbol_manager = symbol_manager
        self.logger = logger

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.strategies = {
            "scalping": ScalpingV1(config, exchange_client, symbol_manager, logger),
            "tp_optimizer": TPOptimizer(config, exchange_client, symbol_manager, logger),
            "grid": GridStrategy(config, exchange_client, symbol_manager, logger),
        }

        # –î–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
        self.regime_detector = MarketRegimeDetector(config, logger)

        # –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        self.active_strategies: dict[str, str] = {}

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.strategy_performance: dict[str, dict[str, float]] = {
            "scalping": {"win_rate": 0.5, "avg_pnl": 0.0, "trades_count": 0},
            "tp_optimizer": {"win_rate": 0.5, "avg_pnl": 0.0, "trades_count": 0},
            "grid": {"win_rate": 0.5, "avg_pnl": 0.0, "trades_count": 0},
        }

        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.performance_window = timedelta(hours=24)
        self.last_performance_update = datetime.now(timezone.utc)

    async def get_optimal_strategy(self, symbol: str, market_data: dict[str, Any]) -> BaseStrategy:
        """–í—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞
            regime = await self.regime_detector.detect_regime(symbol, market_data)

            # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            strategy_name = await self._select_strategy_by_regime(regime, symbol)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            self.active_strategies[symbol] = strategy_name

            self.logger.log_event(
                "STRATEGY_MANAGER",
                "INFO",
                f"Selected {strategy_name} for {symbol} (regime: {regime})",
            )

            return self.strategies[strategy_name]

        except Exception as e:
            self.logger.log_event(
                "STRATEGY_MANAGER", "ERROR", f"Strategy selection failed for {symbol}: {e}"
            )
            return self.strategies["scalping"]  # Fallback

    async def _select_strategy_by_regime(self, regime: str, symbol: str) -> str:
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞"""

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        scalping_perf = self.strategy_performance["scalping"]
        tp_perf = self.strategy_performance["tp_optimizer"]
        grid_perf = self.strategy_performance["grid"]

        if regime == "trending":
            # –í —Ç—Ä–µ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º scalping
            if scalping_perf["win_rate"] > tp_perf["win_rate"]:
                return "scalping"
            else:
                return "tp_optimizer"

        elif regime == "ranging":
            # –í –±–æ–∫–æ–≤–æ–º —Ä—ã–Ω–∫–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º grid strategy
            if grid_perf["win_rate"] > tp_perf["win_rate"]:
                return "grid"
            elif tp_perf["win_rate"] > scalping_perf["win_rate"]:
                return "tp_optimizer"
            else:
                return "scalping"

        else:  # volatile
            # –í –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ–º —Ä—ã–Ω–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à—É—é –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if scalping_perf["avg_pnl"] > tp_perf["avg_pnl"]:
                return "scalping"
            else:
                return "tp_optimizer"

    async def update_strategy_performance(self, strategy_name: str, trade_result: dict[str, Any]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        try:
            if strategy_name not in self.strategy_performance:
                return

            perf = self.strategy_performance[strategy_name]

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–µ
            pnl = trade_result.get("pnl", 0)
            is_win = trade_result.get("win", pnl > 0)
            trade_duration = trade_result.get("duration", 0)
            entry_price = trade_result.get("entry_price", 0)
            exit_price = trade_result.get("exit_price", 0)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            trades_count = perf["trades_count"] + 1

            # –û–±–Ω–æ–≤–ª—è–µ–º win rate
            if is_win:
                win_rate = (perf["win_rate"] * perf["trades_count"] + 1) / trades_count
            else:
                win_rate = (perf["win_rate"] * perf["trades_count"]) / trades_count

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π PnL
            avg_pnl = (perf["avg_pnl"] * perf["trades_count"] + pnl) / trades_count

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if "total_pnl" not in perf:
                perf["total_pnl"] = 0.0
                perf["max_drawdown"] = 0.0
                perf["avg_trade_duration"] = 0.0
                perf["best_trade"] = 0.0
                perf["worst_trade"] = 0.0

            perf["total_pnl"] += pnl
            perf["avg_trade_duration"] = (
                perf["avg_trade_duration"] * perf["trades_count"] + trade_duration
            ) / trades_count

            # –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à—É—é/—Ö—É–¥—à—É—é —Å–¥–µ–ª–∫—É
            if pnl > perf["best_trade"]:
                perf["best_trade"] = pnl
            if pnl < perf["worst_trade"]:
                perf["worst_trade"] = pnl

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            perf["trades_count"] = trades_count
            perf["win_rate"] = win_rate
            perf["avg_pnl"] = avg_pnl

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ROI
            if perf["trades_count"] > 0:
                perf["roi"] = (perf["total_pnl"] / perf["trades_count"]) * 100

            self.logger.log_event(
                "STRATEGY_MANAGER",
                "DEBUG",
                f"Updated {strategy_name} performance: WR={win_rate:.2f}, AvgPnL={avg_pnl:.4f}, ROI={perf.get('roi', 0):.2f}%",
            )

        except Exception as e:
            self.logger.log_event("STRATEGY_MANAGER", "ERROR", f"Failed to update performance: {e}")

    async def get_strategy_status(self) -> dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        status = {
            "active_strategies": self.active_strategies,
            "performance": self.strategy_performance,
            "total_strategies": len(self.strategies),
            "regime_distribution": {},
            "recommendations": [],
        }

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ —Ä—ã–Ω–∫–∞
        regime_counts = {}
        for symbol, strategy in self.active_strategies.items():
            regime_counts[strategy] = regime_counts.get(strategy, 0) + 1

        status["regime_distribution"] = regime_counts

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        for strategy_name, perf in self.strategy_performance.items():
            if perf["trades_count"] >= 10:  # –ú–∏–Ω–∏–º—É–º —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                if perf["win_rate"] < 0.4:
                    status["recommendations"].append(
                        f"‚ö†Ô∏è {strategy_name}: –ù–∏–∑–∫–∏–π win rate ({perf['win_rate']:.1%})"
                    )
                elif perf["avg_pnl"] < -0.001:
                    status["recommendations"].append(
                        f"üìâ {strategy_name}: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π PnL ({perf['avg_pnl']:.4f})"
                    )
                elif perf["win_rate"] > 0.7 and perf["avg_pnl"] > 0.002:
                    status["recommendations"].append(
                        f"‚úÖ {strategy_name}: –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (WR: {perf['win_rate']:.1%}, PnL: {perf['avg_pnl']:.4f})"
                    )

        return status

    async def force_strategy_switch(self, symbol: str, strategy_name: str) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        if strategy_name not in self.strategies:
            self.logger.log_event("STRATEGY_MANAGER", "ERROR", f"Unknown strategy: {strategy_name}")
            return False

        self.active_strategies[symbol] = strategy_name
        self.logger.log_event(
            "STRATEGY_MANAGER", "INFO", f"Force switched {symbol} to {strategy_name}"
        )
        return True

    async def get_hybrid_signal(
        self, symbol: str, market_data: dict[str, Any]
    ) -> dict[str, Any] | None:
        """–ü–æ–ª—É—á–∞–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            signals = []
            weights = []

            for strategy_name, strategy in self.strategies.items():
                signal = await strategy.analyze_market(symbol)
                if signal:
                    signals.append(signal)
                    # –í–µ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    perf = self.strategy_performance[strategy_name]
                    weight = perf["win_rate"] * 0.7 + (perf["avg_pnl"] + 1) * 0.3
                    weights.append(max(weight, 0.1))  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å 0.1

            if not signals:
                return None

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
            total_weight = sum(weights)
            weights = [w / total_weight for w in weights]

            # –í—ã—á–∏—Å–ª—è–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            weighted_signal = {
                "side": signals[0]
                .get("direction", "buy")
                .upper(),  # –ë–µ—Ä–µ–º direction –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ side
                "entry_price": sum(
                    s.get("entry_price", 0) * w for s, w in zip(signals, weights, strict=False)
                ),
                "confidence": sum(
                    s.get("strength", 0) * w for s, w in zip(signals, weights, strict=False)
                ),
            }

            self.logger.log_event(
                "STRATEGY_MANAGER", "DEBUG", f"Hybrid signal for {symbol}: {weighted_signal}"
            )

            return weighted_signal

        except Exception as e:
            self.logger.log_event(
                "STRATEGY_MANAGER", "ERROR", f"Hybrid signal failed for {symbol}: {e}"
            )
            return None

    async def cleanup_old_performance_data(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        current_time = datetime.utcnow()
        if current_time - self.last_performance_update > timedelta(hours=1):
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            for strategy_name in self.strategy_performance:
                self.strategy_performance[strategy_name] = {
                    "win_rate": 0.5,
                    "avg_pnl": 0.0,
                    "trades_count": 0,
                }
            self.last_performance_update = current_time

    def get_position_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            return 0
        except Exception as e:
            self.logger.log_event("STRATEGY_MANAGER", "ERROR", f"Error getting position count: {e}")
            return 0
