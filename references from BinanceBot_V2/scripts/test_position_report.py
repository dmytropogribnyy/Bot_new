#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Position History Reporter
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ–∑–∏—Ü–∏–π –∏–∑ Binance API
"""

import asyncio
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.config import TradingConfig
from core.position_history_reporter import PositionHistoryReporter
from core.unified_logger import UnifiedLogger


async def test_position_report(hours: int = 24):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ–∑–∏—Ü–∏–π"""
    try:
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Position History Reporter –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {hours} —á–∞—Å–æ–≤...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = TradingConfig.load_optimized_for_profit_target(0.7)
        logger = UnifiedLogger(config)

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ—Ä—Ç–µ—Ä
        reporter = PositionHistoryReporter(config, logger)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        if not await reporter.initialize():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç–µ—Ä")
            return

        print("‚úÖ –†–µ–ø–æ—Ä—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ–∑–∏—Ü–∏–π
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ–∑–∏—Ü–∏–π...")
        summary, positions = await reporter.generate_position_report(hours)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = reporter.format_position_report(summary, positions)

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n" + "="*80)
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*80)
        print(report)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print("\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        print(f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {hours} —á–∞—Å–æ–≤")
        print(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
        print(f"‚Ä¢ –û–±—â–∏–π PnL: ${summary.total_pnl:.2f}")
        print(f"‚Ä¢ –ß–∏—Å—Ç—ã–π PnL (—Å funding fees): ${summary.net_pnl:.2f}")
        print(f"‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {summary.win_rate:.1%}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_path = f"data/position_reports/position_report_test_{timestamp}.txt"

        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("–¢–µ—Å—Ç Position History Reporter\n")
            f.write(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–î–∏–∞–ø–∞–∑–æ–Ω: {hours} —á–∞—Å–æ–≤\n\n")
            f.write(report)

        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")

        # –û—á–∏—Å—Ç–∫–∞
        await reporter.cleanup()
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


async def test_individual_apis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã"""
    try:
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤...")

        config = TradingConfig.load_optimized_for_profit_target(0.7)
        logger = UnifiedLogger(config)
        reporter = PositionHistoryReporter(config, logger)

        await reporter.initialize()

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
        print("üìà –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫...")
        trades = await reporter.get_user_trades(limit=10)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫")

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
        print("üìä –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π...")
        positions = await reporter.get_position_risk()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π")

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤
        print("üí∞ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤...")
        income = await reporter.get_income_history(limit=10)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(income)} –∑–∞–ø–∏—Å–µ–π –¥–æ—Ö–æ–¥–æ–≤")

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        print("üè¶ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ...")
        account = await reporter.get_account_info()
        if account:
            print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞")
        else:
            print("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")

        await reporter.cleanup()
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
        import traceback
        traceback.print_exc()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Position History Reporter")
    parser.add_argument("--hours", type=int, default=24, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    parser.add_argument("--api-only", action="store_true", help="–¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API")

    args = parser.parse_args()

    if args.api_only:
        asyncio.run(test_individual_apis())
    else:
        asyncio.run(test_position_report(args.hours))


if __name__ == "__main__":
    main()
