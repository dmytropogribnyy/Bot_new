#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ —Å—Ä–µ–¥—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: local, vps, cloud, production
"""

import json
import os
import sys
from pathlib import Path
from typing import Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


class LoggingSetup:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥"""

    def __init__(self):
        self.config_path = Path("data/logging_config.json")
        self.logging_config = self._load_logging_config()

    def _load_logging_config(self) -> dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.config_path.exists():
            print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config_path}")
            return {}

        try:
            with open(self.config_path, encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}

    def setup_environment(self, environment: str):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ä–µ–¥—ã"""
        if environment not in self.logging_config.get("environments", {}):
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ä–µ–¥–∞: {environment}")
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—ã: {list(self.logging_config.get('environments', {}).keys())}")
            return False

        env_config = self.logging_config["environments"][environment]
        print(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ä–µ–¥—ã: {environment}")
        print(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {env_config.get('description', 'N/A')}")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self._setup_environment_variables(environment, env_config)

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        self._create_directories(env_config)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self._setup_config_files(environment, env_config)

        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è —Å—Ä–µ–¥—ã: {environment}")
        return True

    def _setup_environment_variables(self, environment: str, config: dict[str, Any]):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        os.environ["LOGGING_ENVIRONMENT"] = environment
        os.environ["LOG_LEVEL"] = config.get("file_logging", {}).get("log_level", "INFO")

        # –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        external_services = config.get("external_services", {})
        if external_services.get("enabled", False):
            # AWS CloudWatch
            if external_services.get("aws_cloudwatch", {}).get("enabled", False):
                os.environ["AWS_CLOUDWATCH_ENABLED"] = "true"
                os.environ["AWS_CLOUDWATCH_LOG_GROUP"] = external_services["aws_cloudwatch"].get(
                    "log_group", "binance-bot"
                )
                os.environ["AWS_DEFAULT_REGION"] = external_services["aws_cloudwatch"].get(
                    "region", "us-east-1"
                )

            # GCP StackDriver
            if external_services.get("gcp_stackdriver", {}).get("enabled", False):
                os.environ["GCP_STACKDRIVER_ENABLED"] = "true"
                os.environ["GCP_STACKDRIVER_LOG_NAME"] = "binance-bot"
                os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "/path/to/service-account.json"

            # Azure Monitor
            if external_services.get("azure_monitor", {}).get("enabled", False):
                os.environ["AZURE_MONITOR_ENABLED"] = "true"
                os.environ["AZURE_MONITOR_CONNECTION_STRING"] = external_services[
                    "azure_monitor"
                ].get("connection_string", "")

        print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    def _create_directories(self, config: dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")

        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {log_dir}")

        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        data_dir = Path("data")
        data_dir.mkdir(exist_ok=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {data_dir}")

        # –î–ª—è VPS/Cloud/Production - —Å–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if config.get("database", {}).get("path", "").startswith("/var/log"):
            try:
                system_log_dir = Path("/var/log/binance-bot")
                system_log_dir.mkdir(parents=True, exist_ok=True)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {system_log_dir}")
            except PermissionError:
                print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")

        print("‚úÖ –í—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")

    def _setup_config_files(self, environment: str, config: dict[str, Any]):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

        # –û–±–Ω–æ–≤–ª—è–µ–º runtime_config.json
        runtime_config_path = Path("data/runtime_config.json")
        if runtime_config_path.exists():
            try:
                with open(runtime_config_path, encoding="utf-8") as f:
                    runtime_config = json.load(f)

                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                runtime_config.update(
                    {
                        "max_log_size_mb": config.get("file_logging", {}).get("max_size_mb", 100),
                        "log_retention_days": config.get("file_logging", {}).get(
                            "retention_days", 30
                        ),
                        "db_path": config.get("database", {}).get("path", "data/trading_log.db"),
                        "telegram_enabled": config.get("telegram", {}).get("enabled", True),
                    }
                )

                with open(runtime_config_path, "w", encoding="utf-8") as f:
                    json.dump(runtime_config, f, indent=2, ensure_ascii=False)

                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {runtime_config_path}")

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

        # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_file = Path(".env")
        env_content = f"""# Logging Environment Configuration
LOGGING_ENVIRONMENT={environment}
LOG_LEVEL={config.get("file_logging", {}).get("log_level", "INFO")}

# Database Configuration
DB_PATH={config.get("database", {}).get("path", "data/trading_log.db")}

# Telegram Configuration
TELEGRAM_ENABLED={str(config.get("telegram", {}).get("enabled", True)).lower()}

# External Services
AWS_CLOUDWATCH_ENABLED={str(config.get("external_services", {}).get("enabled", False)).lower()}
GCP_STACKDRIVER_ENABLED={str(config.get("external_services", {}).get("enabled", False)).lower()}
AZURE_MONITOR_ENABLED={str(config.get("external_services", {}).get("enabled", False)).lower()}
"""

        with open(env_file, "w", encoding="utf-8") as f:
            f.write(env_content)

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {env_file}")

    def show_environment_info(self, environment: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å—Ä–µ–¥—ã"""
        if environment not in self.logging_config.get("environments", {}):
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ä–µ–¥–∞: {environment}")
            return

        env_config = self.logging_config["environments"][environment]
        print(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–µ–¥–µ: {environment}")
        print(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {env_config.get('description', 'N/A')}")

        # –§–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        file_logging = env_config.get("file_logging", {})
        print("\nüìÅ –§–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:")
        print(f"   ‚Ä¢ –í–∫–ª—é—á–µ–Ω–æ: {file_logging.get('enabled', True)}")
        print(f"   ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {file_logging.get('log_level', 'INFO')}")
        print(f"   ‚Ä¢ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: {file_logging.get('max_size_mb', 100)} MB")
        print(f"   ‚Ä¢ –•—Ä–∞–Ω–µ–Ω–∏–µ: {file_logging.get('retention_days', 30)} –¥–Ω–µ–π")

        # –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        console_logging = env_config.get("console_logging", {})
        print("\nüñ•Ô∏è –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:")
        print(f"   ‚Ä¢ –í–∫–ª—é—á–µ–Ω–æ: {console_logging.get('enabled', True)}")
        print(f"   ‚Ä¢ –¶–≤–µ—Ç–∞: {console_logging.get('colors', True)}")
        print(f"   ‚Ä¢ –≠–º–æ–¥–∑–∏: {console_logging.get('emojis', True)}")

        # Telegram
        telegram = env_config.get("telegram", {})
        print("\nüì± Telegram:")
        print(f"   ‚Ä¢ –í–∫–ª—é—á–µ–Ω–æ: {telegram.get('enabled', True)}")
        print(f"   ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {telegram.get('notifications', [])}")

        # –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        external_services = env_config.get("external_services", {})
        print("\n‚òÅÔ∏è –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã:")
        print(f"   ‚Ä¢ –í–∫–ª—é—á–µ–Ω–æ: {external_services.get('enabled', False)}")
        if external_services.get("enabled", False):
            if external_services.get("aws_cloudwatch", {}).get("enabled", False):
                print("   ‚Ä¢ AWS CloudWatch: ‚úÖ")
            if external_services.get("gcp_stackdriver", {}).get("enabled", False):
                print("   ‚Ä¢ GCP StackDriver: ‚úÖ")
            if external_services.get("azure_monitor", {}).get("enabled", False):
                print("   ‚Ä¢ Azure Monitor: ‚úÖ")

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        database = env_config.get("database", {})
        print("\nüóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   ‚Ä¢ –ü—É—Ç—å: {database.get('path', 'data/trading_log.db')}")
        print(f"   ‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {database.get('backup_enabled', True)}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("üöÄ –°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("=" * 50)
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python scripts/setup_logging.py <environment>")
        print("  python scripts/setup_logging.py info <environment>")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—ã:")
        print("  local      - –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤ VS Code")
        print("  vps        - VPS —Å–µ—Ä–≤–µ—Ä")
        print("  cloud      - –û–±–ª–∞—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (AWS/GCP/Azure)")
        print("  production - –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Å—Ä–µ–¥–∞")
        print("\n–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python scripts/setup_logging.py local")
        print("  python scripts/setup_logging.py info cloud")
        return

    setup = LoggingSetup()

    if sys.argv[1] == "info":
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            return
        setup.show_environment_info(sys.argv[2])
    else:
        setup.setup_environment(sys.argv[1])


if __name__ == "__main__":
    main()
