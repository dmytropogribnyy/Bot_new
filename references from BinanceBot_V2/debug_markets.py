#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ –Ω–∞ Binance
"""

import ccxt
import os
from dotenv import load_dotenv

load_dotenv()

def debug_markets():
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—ã–Ω–∫–∏ –Ω–∞ Binance"""

    exchange = ccxt.binance({
        'apiKey': os.getenv('BINANCE_API_KEY'),
        'secret': os.getenv('BINANCE_API_SECRET'),
        'sandbox': False,
        'options': {
            'defaultType': 'future',
        }
    })

    print("üîç –û—Ç–ª–∞–¥–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ –Ω–∞ Binance...")
    print("=" * 60)

    try:
        markets = exchange.load_markets()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        futures = {symbol: market for symbol, market in markets.items() if market['future']}
        usdt_futures = {symbol: market for symbol, market in futures.items() if market['quote'] == 'USDT'}
        usdc_futures = {symbol: market for symbol, market in futures.items() if market['quote'] == 'USDC'}
        btc_futures = {symbol: market for symbol, market in futures.items() if market['quote'] == 'BTC'}

        print(f"üìä –í—Å–µ–≥–æ —Ñ—å—é—á–µ—Ä—Å–æ–≤: {len(futures)}")
        print(f"üìä USDT —Ñ—å—é—á–µ—Ä—Å–æ–≤: {len(usdt_futures)}")
        print(f"üìä USDC —Ñ—å—é—á–µ—Ä—Å–æ–≤: {len(usdc_futures)}")
        print(f"üìä BTC —Ñ—å—é—á–µ—Ä—Å–æ–≤: {len(btc_futures)}")

        print(f"\nüìã USDC —Ñ—å—é—á–µ—Ä—Å—ã:")
        for symbol in list(usdc_futures.keys())[:20]:
            print(f"   ‚Ä¢ {symbol}")
        if len(usdc_futures) > 20:
            print(f"   ... –∏ –µ—â–µ {len(usdc_futures) - 20} —Å–∏–º–≤–æ–ª–æ–≤")

        print(f"\nüìã USDT —Ñ—å—é—á–µ—Ä—Å—ã (–ø–µ—Ä–≤—ã–µ 10):")
        for symbol in list(usdt_futures.keys())[:10]:
            print(f"   ‚Ä¢ {symbol}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ —Å–∏–º–≤–æ–ª—ã
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ —Å–∏–º–≤–æ–ª—ã:")
        with open('data/valid_usdc_symbols.json', 'r') as f:
            our_symbols = json.load(f)

        found_symbols = []
        not_found_symbols = []

        for symbol in our_symbols:
            if symbol in markets:
                found_symbols.append(symbol)
            else:
                not_found_symbols.append(symbol)

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞ –±–∏—Ä–∂–µ: {len(found_symbols)}")
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {len(not_found_symbols)}")

        if found_symbols:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:")
            for symbol in found_symbols[:10]:
                print(f"   ‚Ä¢ {symbol}")
            if len(found_symbols) > 10:
                print(f"   ... –∏ –µ—â–µ {len(found_symbols) - 10} —Å–∏–º–≤–æ–ª–æ–≤")

        if not_found_symbols:
            print(f"\n‚ùå –ù–µ–Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:")
            for symbol in not_found_symbols[:10]:
                print(f"   ‚Ä¢ {symbol}")
            if len(not_found_symbols) > 10:
                print(f"   ... –∏ –µ—â–µ {len(not_found_symbols) - 10} —Å–∏–º–≤–æ–ª–æ–≤")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ: {e}")

if __name__ == "__main__":
    import json
    debug_markets()
