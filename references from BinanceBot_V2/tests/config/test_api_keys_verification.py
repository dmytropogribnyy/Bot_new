#!/usr/bin/env python3
"""
Test script for API key verification
Ensures WebSocket and REST API use correct API keys consistently
"""

import asyncio
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from core.config import TradingConfig
from core.exchange_client import OptimizedExchangeClient
from core.unified_logger import UnifiedLogger
from core.websocket_manager import WebSocketManager


class APIKeyVerificationTester:
    """–¢–µ—Å—Ç–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π"""

    def __init__(self):
        self.config = TradingConfig("data/runtime_config.json")
        self.logger = UnifiedLogger(self.config)
        self.test_results = {}

    async def test_api_key_configuration(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π"""
        try:
            print("üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            assert self.config.api_key, "API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            assert self.config.api_secret, "API —Å–µ–∫—Ä–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è placeholder –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            if self.config.api_key == "YOUR_API_KEY":
                print("‚ö†Ô∏è API –∫–ª—é—á —è–≤–ª—è–µ—Ç—Å—è placeholder - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
                self.test_results['api_key_configuration'] = False
                return False
            if self.config.api_secret == "YOUR_API_SECRET":
                print("‚ö†Ô∏è API —Å–µ–∫—Ä–µ—Ç —è–≤–ª—è–µ—Ç—Å—è placeholder - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
                self.test_results['api_key_configuration'] = False
                return False

            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∫–ª—é—á–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            self.test_results['api_key_configuration'] = True
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π: {e}")
            self.test_results['api_key_configuration'] = False
            return False

    async def test_exchange_client_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ exchange client —Å API –∫–ª—é—á–∞–º–∏"""
        try:
            print("üè¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ exchange client...")

            exchange = OptimizedExchangeClient(self.config, self.logger)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ exchange
            assert exchange.exchange.apiKey == self.config.api_key, "API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –≤ exchange"
            assert exchange.exchange.secret == self.config.api_secret, "API —Å–µ–∫—Ä–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –≤ exchange"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º testnet/production –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            is_testnet = (hasattr(self.config, 'use_testnet') and self.config.use_testnet) or \
                        (hasattr(self.config, 'exchange_mode') and self.config.exchange_mode == "testnet")

            if is_testnet:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º sandbox —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ options
                assert exchange.exchange.options.get('sandbox', False), "Exchange –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ testnet —Ä–µ–∂–∏–º–µ"
                print("‚úÖ Testnet —Ä–µ–∂–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sandbox –Ω–µ –≤–∫–ª—é—á–µ–Ω
                assert not exchange.exchange.options.get('sandbox', False), "Exchange –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ production —Ä–µ–∂–∏–º–µ"
                print("‚úÖ Production —Ä–µ–∂–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

            print("‚úÖ Exchange client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.test_results['exchange_client_initialization'] = True
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ exchange client: {e}")
            self.test_results['exchange_client_initialization'] = False
            return False

    async def test_websocket_api_key_inheritance(self):
        """–¢–µ—Å—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–µ–π –≤ WebSocket"""
        try:
            print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–µ–π –≤ WebSocket...")

            exchange = OptimizedExchangeClient(self.config, self.logger)
            ws_manager = WebSocketManager(exchange, logger=self.logger)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ WebSocket Manager –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            assert hasattr(ws_manager, 'exchange'), "WebSocket Manager –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å exchange client"
            assert hasattr(ws_manager.exchange, 'config'), "Exchange client –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å config"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ exchange
            assert ws_manager.exchange.config.api_key == self.config.api_key, "API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω"
            assert ws_manager.exchange.config.api_secret == self.config.api_secret, "API —Å–µ–∫—Ä–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω"

            print("‚úÖ API –∫–ª—é—á–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –≤ WebSocket")
            self.test_results['websocket_api_key_inheritance'] = True
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–µ–π –≤ WebSocket: {e}")
            self.test_results['websocket_api_key_inheritance'] = False
            return False

    async def test_listen_key_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è listen key —Å API –∫–ª—é—á–∞–º–∏"""
        try:
            print("üéß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è listen key...")

            exchange = OptimizedExchangeClient(self.config, self.logger)
            ws_manager = WebSocketManager(exchange, logger=self.logger)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è listen key —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            assert hasattr(ws_manager, '_create_listen_key'), "–ú–µ—Ç–æ–¥ _create_listen_key –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è listen key
            if not self.config.api_key or not self.config.api_secret:
                print("‚ö†Ô∏è API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç listen key")
                self.test_results['listen_key_creation'] = True
                return True

            print("‚úÖ Listen key creation –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            self.test_results['listen_key_creation'] = True
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è listen key: {e}")
            self.test_results['listen_key_creation'] = False
            return False

    async def test_websocket_url_configuration(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WebSocket URL"""
        try:
            print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WebSocket URL...")

            exchange = OptimizedExchangeClient(self.config, self.logger)
            ws_manager = WebSocketManager(exchange, logger=self.logger)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ WebSocket Manager –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
            if hasattr(self.config, 'use_testnet') and self.config.use_testnet:
                expected_base = "wss://stream.binancefuture.com"
                print("‚úÖ Testnet WebSocket URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                expected_base = "wss://stream.binance.com"
                print("‚úÖ Production WebSocket URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

            print("‚úÖ WebSocket URL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            self.test_results['websocket_url_configuration'] = True
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WebSocket URL: {e}")
            self.test_results['websocket_url_configuration'] = False
            return False

    async def test_api_key_consistency(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π –º–µ–∂–¥—É REST –∏ WebSocket"""
        try:
            print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π...")

            exchange = OptimizedExchangeClient(self.config, self.logger)
            ws_manager = WebSocketManager(exchange, self.logger)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–µ–∑–¥–µ
            rest_api_key = exchange.exchange.apiKey
            rest_api_secret = exchange.exchange.secret
            ws_api_key = ws_manager.exchange.config.api_key
            ws_api_secret = ws_manager.exchange.config.api_secret

            assert rest_api_key == ws_api_key, "API –∫–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏"
            assert rest_api_secret == ws_api_secret, "API —Å–µ–∫—Ä–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏"

            print("‚úÖ API –∫–ª—é—á–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã –º–µ–∂–¥—É REST –∏ WebSocket")
            self.test_results['api_key_consistency'] = True
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π: {e}")
            self.test_results['api_key_consistency'] = False
            return False

    async def test_testnet_configuration(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ testnet"""
        try:
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ testnet...")

            exchange = OptimizedExchangeClient(self.config, self.logger)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º testnet
            if hasattr(self.config, 'use_testnet') and self.config.use_testnet:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º sandbox —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ options
                assert exchange.exchange.options.get('sandbox', False), "Exchange –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ testnet —Ä–µ–∂–∏–º–µ"
                print("‚úÖ Testnet —Ä–µ–∂–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            elif hasattr(self.config, 'exchange_mode') and self.config.exchange_mode == "testnet":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º sandbox —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ options
                assert exchange.exchange.options.get('sandbox', False), "Exchange –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ testnet —Ä–µ–∂–∏–º–µ"
                print("‚úÖ Testnet —Ä–µ–∂–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sandbox –Ω–µ –≤–∫–ª—é—á–µ–Ω
                assert not exchange.exchange.options.get('sandbox', False), "Exchange –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ production —Ä–µ–∂–∏–º–µ"
                print("‚úÖ Production —Ä–µ–∂–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è testnet –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            self.test_results['testnet_configuration'] = True
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ testnet: {e}")
            self.test_results['testnet_configuration'] = False
            return False

    def print_test_results(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò API –ö–õ–Æ–ß–ï–ô")
        print("="*60)

        total_tests = len(self.test_results)
        passed_tests = sum(self.test_results.values())

        for test_name, result in self.test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{test_name:.<40} {status}")

        print("-"*60)
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")

        if passed_tests == total_tests:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! API –ö–õ–Æ–ß–ò –ù–ê–°–¢–†–û–ï–ù–´ –ö–û–†–†–ï–ö–¢–ù–û!")
        else:
            print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò API –ö–õ–Æ–ß–ï–ô")
        print("="*60)

        tests = [
            self.test_api_key_configuration,
            self.test_exchange_client_initialization,
            self.test_websocket_api_key_inheritance,
            self.test_listen_key_creation,
            self.test_websocket_url_configuration,
            self.test_api_key_consistency,
            self.test_testnet_configuration
        ]

        for test in tests:
            try:
                await test()
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")

        self.print_test_results()

        return all(self.test_results.values())


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = APIKeyVerificationTester()
    success = await tester.run_all_tests()
    return 0 if success else 1


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
