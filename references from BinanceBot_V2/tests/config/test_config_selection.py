#!/usr/bin/env python3
"""
Test script for configuration selection based on profit targets
Ensures the bot automatically selects the correct runtime configuration
"""

import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from core.config import TradingConfig


class ConfigSelectionTester:
    """–¢–µ—Å—Ç–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    def __init__(self):
        self.test_results = {}

    def test_config_selection_for_2_dollar_target(self):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ü–µ–ª–∏ $2/—á–∞—Å"""
        try:
            print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ü–µ–ª–∏ $2/—á–∞—Å...")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = TradingConfig.load_optimized_for_profit_target(2.0)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            assert config.profit_target_hourly == 0.7, f"–¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 0.7, –ø–æ–ª—É—á–µ–Ω–æ {config.profit_target_hourly}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ
            assert config.max_concurrent_positions >= 3, f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è $2/—á–∞—Å, –ø–æ–ª—É—á–µ–Ω–æ {config.max_concurrent_positions}"
            assert config.base_risk_pct >= 0.06, f"–†–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6% –¥–ª—è $2/—á–∞—Å, –ø–æ–ª—É—á–µ–Ω–æ {config.base_risk_pct*100:.2f}%"

            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è $2/—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.test_results['config_selection_2_dollar'] = True
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è $2/—á–∞—Å: {e}")
            self.test_results['config_selection_2_dollar'] = False
            return False

    def test_config_selection_for_1_dollar_target(self):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ü–µ–ª–∏ $1/—á–∞—Å"""
        try:
            print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ü–µ–ª–∏ $1/—á–∞—Å...")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = TradingConfig.load_optimized_for_profit_target(1.0)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            assert config.profit_target_hourly == 1.0, f"–¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1.0, –ø–æ–ª—É—á–µ–Ω–æ {config.profit_target_hourly}"

            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è $1/—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.test_results['config_selection_1_dollar'] = True
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è $1/—á–∞—Å: {e}")
            self.test_results['config_selection_1_dollar'] = False
            return False

    def test_config_selection_for_0_5_dollar_target(self):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ü–µ–ª–∏ $0.5/—á–∞—Å"""
        try:
            print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ü–µ–ª–∏ $0.5/—á–∞—Å...")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = TradingConfig.load_optimized_for_profit_target(0.5)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            assert config.profit_target_hourly == 0.5, f"–¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 0.5, –ø–æ–ª—É—á–µ–Ω–æ {config.profit_target_hourly}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ
            assert config.max_concurrent_positions <= 2, f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 2 –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è $0.5/—á–∞—Å, –ø–æ–ª—É—á–µ–Ω–æ {config.max_concurrent_positions}"
            assert config.base_risk_pct <= 0.01, f"–†–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 1% –¥–ª—è $0.5/—á–∞—Å, –ø–æ–ª—É—á–µ–Ω–æ {config.base_risk_pct*100:.2f}%"

            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è $0.5/—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.test_results['config_selection_0_5_dollar'] = True
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è $0.5/—á–∞—Å: {e}")
            self.test_results['config_selection_0_5_dollar'] = False
            return False

    def test_config_mapping_logic(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        try:
            print("üó∫Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π
            config_paths = {
                0.7: "data/runtime_config.json",
                1.0: "data/runtime_config_test.json",
                0.5: "data/runtime_config_safe.json"
            }

            for target_profit, expected_path in config_paths.items():
                selected_path = TradingConfig.select_config_for_profit_target(target_profit)
                print(f"   –¶–µ–ª—å ${target_profit}/—á–∞—Å ‚Üí {selected_path}")

            print("‚úÖ –õ–æ–≥–∏–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.test_results['config_mapping_logic'] = True
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
            self.test_results['config_mapping_logic'] = False
            return False

    def test_profit_target_info(self):
        """–¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª—è—Ö –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª—è—Ö –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏...")

            config = TradingConfig.load_optimized_for_profit_target(2.0)
            profit_info = config.get_profit_target_info()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['profit_target_hourly', 'profit_target_daily', 'risk_level', 'expected_hourly_profit']
            for field in required_fields:
                assert field in profit_info, f"–ü–æ–ª–µ {field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ profit_info"

            print(f"   –¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –≤ —á–∞—Å: ${profit_info['profit_target_hourly']}")
            print(f"   –¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –≤ –¥–µ–Ω—å: ${profit_info['profit_target_daily']}")
            print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {profit_info['risk_level']}")
            print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: ${profit_info['expected_hourly_profit']:.2f}/—á–∞—Å")

            print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª—è—Ö –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            self.test_results['profit_target_info'] = True
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª—è—Ö –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏: {e}")
            self.test_results['profit_target_info'] = False
            return False

    def test_fallback_config_selection(self):
        """–¢–µ—Å—Ç fallback –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ü–µ–ª–∏
            config = TradingConfig.load_optimized_for_profit_target(5.0)  # –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ü–µ–ª—å

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (fallback –Ω–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é)
            assert config is not None, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
            assert config.profit_target_hourly == 5.0, "–¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

            print("‚úÖ Fallback –≤—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.test_results['fallback_config_selection'] = True
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ fallback –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.test_results['fallback_config_selection'] = False
            return False

    def print_test_results(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –í–´–ë–û–†–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("="*60)

        total_tests = len(self.test_results)
        passed_tests = sum(self.test_results.values())

        for test_name, result in self.test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{test_name:.<40} {status}")

        print("-"*60)
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")

        if passed_tests == total_tests:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –í–´–ë–û–† –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        else:
            print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –í–´–ë–û–†–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("="*60)

        tests = [
            self.test_config_selection_for_2_dollar_target,
            self.test_config_selection_for_1_dollar_target,
            self.test_config_selection_for_0_5_dollar_target,
            self.test_config_mapping_logic,
            self.test_profit_target_info,
            self.test_fallback_config_selection
        ]

        for test in tests:
            try:
                test()
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")

        self.print_test_results()

        return all(self.test_results.values())


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ConfigSelectionTester()
    success = tester.run_all_tests()
    return 0 if success else 1


if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
