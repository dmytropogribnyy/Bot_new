#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–∏–º–≤–æ–ª–æ–≤ USDC —Ñ—å—é—á–µ—Ä—Å–æ–≤
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.config import TradingConfig
from core.exchange_client import OptimizedExchangeClient
from core.unified_logger import UnifiedLogger


async def test_symbols_detailed():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤"""

    print("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ USDC —Ñ—å—é—á–µ—Ä—Å–æ–≤...")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        config = TradingConfig()
        logger = UnifiedLogger(config)
        exchange = OptimizedExchangeClient(config, logger)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º exchange
        await exchange.initialize()

        # –û—á–∏—â–∞–µ–º –∫–µ—à
        exchange._cache.pop('usdc_symbols', None)
        exchange._cache.pop('markets', None)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏ –∑–∞–Ω–æ–≤–æ
        await exchange._load_markets_with_retry()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä—ã–Ω–∫–∏
        markets = exchange._cache.get('markets', {})
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ä—ã–Ω–∫–æ–≤: {len(markets)}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ä—ã–Ω–∫–æ–≤
        market_types = {}
        quote_currencies = {}

        for symbol, market_info in markets.items():
            market_type = market_info.get('type', 'unknown')
            quote = market_info.get('quote', 'unknown')

            market_types[market_type] = market_types.get(market_type, 0) + 1
            quote_currencies[quote] = quote_currencies.get(quote, 0) + 1

        print(f"\nüìà –¢–∏–ø—ã —Ä—ã–Ω–∫–æ–≤:")
        for market_type, count in sorted(market_types.items()):
            print(f"  {market_type}: {count}")

        print(f"\nüí∞ –í–∞–ª—é—Ç—ã –∫–æ—Ç–∏—Ä–æ–≤–æ–∫:")
        for quote, count in sorted(quote_currencies.items()):
            print(f"  {quote}: {count}")

        # –ò—â–µ–º USDC —Ñ—å—é—á–µ—Ä—Å—ã
        usdc_swap_symbols = []
        usdc_spot_symbols = []
        all_usdc_symbols = []

        for symbol, market_info in markets.items():
            if market_info.get('quote') == 'USDC':
                all_usdc_symbols.append(symbol)

            if (symbol.endswith(':USDC') and
                market_info.get('type') == 'swap' and
                market_info.get('quote') == 'USDC' and
                market_info.get('active', True)):
                usdc_swap_symbols.append(symbol)
            elif (symbol.endswith('/USDC') and
                  market_info.get('type') == 'spot' and
                  market_info.get('quote') == 'USDC' and
                  market_info.get('active', True)):
                usdc_spot_symbols.append(symbol)

        print(f"\nüéØ –í—Å–µ USDC —Ä—ã–Ω–∫–∏: {len(all_usdc_symbols)}")
        print(f"üéØ USDC —Ñ—å—é—á–µ—Ä—Å—ã (swap): {len(usdc_swap_symbols)}")
        print(f"üéØ USDC —Å–ø–æ—Ç—ã: {len(usdc_spot_symbols)}")

        if all_usdc_symbols:
            print(f"\nüìã –í—Å–µ USDC —Ä—ã–Ω–∫–∏ (–ø–µ—Ä–≤—ã–µ 20):")
            for i, symbol in enumerate(all_usdc_symbols[:20], 1):
                market_info = markets.get(symbol, {})
                market_type = market_info.get('type', 'unknown')
                active = market_info.get('active', False)
                print(f"  {i:2d}. {symbol} (—Ç–∏–ø: {market_type}, –∞–∫—Ç–∏–≤–µ–Ω: {active})")

        if usdc_swap_symbols:
            print(f"\nüìã USDC —Ñ—å—é—á–µ—Ä—Å—ã (swap):")
            for i, symbol in enumerate(usdc_swap_symbols, 1):
                print(f"  {i:2d}. {symbol}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç get_usdc_symbols
        symbols = await exchange.get_usdc_symbols()
        print(f"\nüîç get_usdc_symbols() –≤–µ—Ä–Ω—É–ª: {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")

        if symbols:
            print(f"üìã –ü–µ—Ä–≤—ã–µ 10 –∏–∑ get_usdc_symbols():")
            for i, symbol in enumerate(symbols[:10], 1):
                print(f"  {i:2d}. {symbol}")

        await exchange.cleanup()
        print("\n‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

    return True


if __name__ == "__main__":
    try:
        success = asyncio.run(test_symbols_detailed())
        if success:
            print("üéâ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("üí• –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\nüõë –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
