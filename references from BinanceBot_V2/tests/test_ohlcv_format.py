#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ OHLCV –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import pandas as pd
from core.config import TradingConfig
from core.exchange_client import OptimizedExchangeClient
from core.symbol_manager import SymbolManager
from core.unified_logger import UnifiedLogger

async def test_ohlcv_format():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç OHLCV –¥–∞–Ω–Ω—ã—Ö"""

    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç OHLCV –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 50)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = TradingConfig.load_optimized_for_profit_target(0.7)
        logger = UnifiedLogger(config)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º exchange client
        exchange = OptimizedExchangeClient(config, logger)
        await exchange.initialize()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º symbol manager
        symbol_manager = SymbolManager(exchange, None)
        await symbol_manager.update_available_symbols()

        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã
        symbols = await symbol_manager.get_active_symbols()
        if not symbols:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
            return

        test_symbol = symbols[0]
        print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª: {test_symbol}")

        # –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
        ohlcv_data = await symbol_manager.get_recent_ohlcv(test_symbol, '15m', 20)

        print(f"üìà –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(ohlcv_data)}")

        if ohlcv_data:
            print(f"üìã –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å:")
            print(f"   {ohlcv_data[0]}")

            print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å:")
            print(f"   {ohlcv_data[-1]}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
            keys = list(ohlcv_data[0].keys())
            print(f"   –ö–ª—é—á–∏: {keys}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            print(f"\nüìä –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
            for key in keys:
                value = ohlcv_data[0][key]
                print(f"   {key}: {type(value)} = {value}")

            # –ü—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ DataFrame
            print(f"\nüîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ DataFrame:")
            try:
                df = pd.DataFrame(ohlcv_data)
                print(f"   ‚úÖ DataFrame —Å–æ–∑–¥–∞–Ω: {df.shape}")
                print(f"   üìã –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
                print(f"   üìä –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏:")
                print(df.head(3))

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º
                if 'close' in df.columns:
                    print(f"   üí∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {df['close'].iloc[-1]}")
                if 'high' in df.columns:
                    print(f"   üìà –ú–∞–∫—Å–∏–º—É–º: {df['high'].iloc[-1]}")
                if 'low' in df.columns:
                    print(f"   üìâ –ú–∏–Ω–∏–º—É–º: {df['low'].iloc[-1]}")

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")

        await exchange.cleanup()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_ohlcv_format())
