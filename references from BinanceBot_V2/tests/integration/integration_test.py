#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç BinanceBot v2 —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –≤—ã–∑–æ–≤–∞–º–∏
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))


async def test_exchange_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ"""
    print("üè¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance...")
    try:
        from core.config import TradingConfig
        from core.exchange_client import ExchangeClient
        from core.unified_logger import UnifiedLogger

        config = TradingConfig.from_file()
        logger = UnifiedLogger(config)
        exchange = ExchangeClient(config, logger=logger)

        # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await exchange.initialize()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
        server_time = await exchange.get_server_time()
        print(f"‚úÖ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {server_time}")

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        balance = await exchange.get_balance()
        print(f"‚úÖ –ë–∞–ª–∞–Ω—Å USDC: {balance}")

        await exchange.close()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ: {e}")
        return False


async def test_symbol_manager_integration():
    """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤...")
    try:
        from core.config import TradingConfig
        from core.exchange_client import ExchangeClient
        from core.symbol_manager import SymbolManager
        from core.unified_logger import UnifiedLogger

        config = TradingConfig.from_file()
        logger = UnifiedLogger(config)
        exchange = ExchangeClient(config, logger=logger)
        symbol_manager = SymbolManager(exchange, logger=logger)

        await exchange.initialize()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
        symbols = await symbol_manager.update_available_symbols()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(symbols)}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤
        sample_symbols = list(symbols)[:10]
        print(f"   –ü—Ä–∏–º–µ—Ä—ã: {sample_symbols}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        active_symbols = symbol_manager.get_active_symbols()
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(active_symbols)}")

        await exchange.close()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
        return False


async def test_rate_limiter():
    """–¢–µ—Å—Ç rate limiter"""
    print("\n‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiter...")
    try:
        from core.config import TradingConfig
        from core.rate_limiter import RateLimiter

        config = TradingConfig.from_file()
        rate_limiter = RateLimiter(
            weight_limit_per_minute=config.weight_limit_per_minute,
            request_limit_per_second=config.order_rate_limit_per_second,
            buffer_pct=config.rate_limit_buffer_pct,
        )

        # –¢–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        for i in range(5):
            await rate_limiter.acquire(1)
            print(f"   –ó–∞–ø—Ä–æ—Å {i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

        print("‚úÖ Rate limiter —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ rate limiter: {e}")
        return False


async def test_risk_manager():
    """–¢–µ—Å—Ç risk manager"""
    print("\nüõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ risk manager...")
    try:
        from core.config import TradingConfig
        from core.risk_manager import RiskManager
        from core.unified_logger import UnifiedLogger

        config = TradingConfig.from_file()
        logger = UnifiedLogger(config)
        risk_manager = RiskManager(config, logger)

        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        balance = 1000.0  # –¢–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        price = 50000.0  # –¶–µ–Ω–∞ BTC
        leverage = 5  # –ü–ª–µ—á–æ

        position_size = risk_manager.calculate_position_size("BTCUSDC", price, balance, leverage)
        print(f"‚úÖ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: {position_size:.6f}")

        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞
        can_enter = await risk_manager.check_entry_allowed("BTCUSDC", "BUY", position_size)
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞: {'–†–∞–∑—Ä–µ—à–µ–Ω–æ' if can_enter else '–ó–∞–ø—Ä–µ—â–µ–Ω–æ'}")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ risk manager: {e}")
        return False


async def test_strategies_integration():
    """–¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
    try:
        from core.config import TradingConfig
        from core.exchange_client import ExchangeClient
        from core.symbol_manager import SymbolManager
        from core.unified_logger import UnifiedLogger
        from strategies.scalping_v1 import ScalpingV1
        from strategies.symbol_selector import SymbolSelector

        config = TradingConfig.from_file()
        logger = UnifiedLogger(config)
        exchange = ExchangeClient(config, logger=logger)
        symbol_manager = SymbolManager(exchange, logger=logger)

        await exchange.initialize()
        await symbol_manager.update_available_symbols()

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        scalping = ScalpingV1(config, exchange, symbol_manager, logger)
        symbol_selector = SymbolSelector(config, symbol_manager, exchange, logger)

        print("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")

        # –¢–µ—Å—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤
        selected_symbols = await symbol_selector.get_symbols_for_trading()
        print(f"‚úÖ –û—Ç–æ–±—Ä–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {len(selected_symbols)}")

        if selected_symbols:
            print(f"   –ü—Ä–∏–º–µ—Ä—ã: {selected_symbols[:5]}")

        await exchange.close()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
        return False


async def test_telegram_integration():
    """–¢–µ—Å—Ç Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    try:
        from core.config import TradingConfig
        from telegram.telegram_bot import TelegramBot

        config = TradingConfig.from_file()

        if not config.telegram_token:
            print("‚ö†Ô∏è Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            return True

        # –°–æ–∑–¥–∞–µ–º Telegram –±–æ—Ç
        telegram_bot = TelegramBot(config.telegram_token)
        print("‚úÖ Telegram –±–æ—Ç —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        test_message = "ü§ñ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ BinanceBot v2"
        # await telegram_bot.send_notification(test_message, config.telegram_chat_id)  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        print("‚úÖ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ BinanceBot v2")
    print("=" * 60)

    tests = [
        test_exchange_connection,
        test_symbol_manager_integration,
        test_rate_limiter,
        test_risk_manager,
        test_strategies_integration,
        test_telegram_integration,
    ]

    results = []
    for test in tests:
        try:
            result = await test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            results.append(False)

    print("\n" + "=" * 60)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:")

    passed = sum(results)
    total = len(results)

    for i, result in enumerate(results):
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   –¢–µ—Å—Ç {i+1}: {status}")

    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("üéâ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –∑–∞–ø—É—Å–∫—É!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return False


if __name__ == "__main__":
    asyncio.run(main())
