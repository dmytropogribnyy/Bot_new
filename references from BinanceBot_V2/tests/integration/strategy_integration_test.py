# strategy_integration_test.py

import asyncio
from unittest.mock import Mock

from core.config import TradingConfig
from core.exchange_client import ExchangeClient
from core.symbol_manager import SymbolManager
from core.unified_logger import UnifiedLogger
from strategies.strategy_manager import MarketRegimeDetector, StrategyManager


async def test_market_regime_detection():
    """–¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞"""
    print("üß™ Testing Market Regime Detection...")

    # –ú–æ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    config = TradingConfig.from_file()
    logger = UnifiedLogger(config)

    detector = MarketRegimeDetector(config, logger)

    # –¢–µ—Å—Ç —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞
    trending_data = {"atr_percent": 0.015, "price_change_percent": 2.5, "volume_ratio": 1.5}
    regime = await detector.detect_regime("BTCUSDC", trending_data)
    assert regime == "trending", f"Expected trending, got {regime}"

    # –¢–µ—Å—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞
    volatile_data = {"atr_percent": 0.05, "price_change_percent": 1.0, "volume_ratio": 1.0}
    regime = await detector.detect_regime("BTCUSDC", volatile_data)
    assert regime == "volatile", f"Expected volatile, got {regime}"

    # –¢–µ—Å—Ç –±–æ–∫–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞
    ranging_data = {"atr_percent": 0.01, "price_change_percent": 0.5, "volume_ratio": 1.0}
    regime = await detector.detect_regime("BTCUSDC", ranging_data)
    assert regime == "ranging", f"Expected ranging, got {regime}"

    print("‚úÖ Market regime detection test passed")


async def test_strategy_selection():
    """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    print("üß™ Testing Strategy Selection...")

    # –ú–æ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    config = TradingConfig.from_file()
    logger = UnifiedLogger(config)

    # –ú–æ–∫–∞–µ–º exchange –∏ symbol_manager
    exchange = Mock()
    symbol_manager = Mock()

    strategy_manager = StrategyManager(config, exchange, symbol_manager, logger)

    # –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞
    trending_data = {"atr_percent": 0.015, "price_change_percent": 2.5, "volume_ratio": 1.5}

    strategy = await strategy_manager.get_optimal_strategy("BTCUSDC", trending_data)
    assert strategy is not None, "Strategy should not be None"

    print("‚úÖ Strategy selection test passed")


async def test_hybrid_signal_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–∏–±—Ä–∏–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("üß™ Testing Hybrid Signal Generation...")

    # –ú–æ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    config = TradingConfig.from_file()
    logger = UnifiedLogger(config)

    exchange = Mock()
    symbol_manager = Mock()

    strategy_manager = StrategyManager(config, exchange, symbol_manager, logger)

    # –ú–æ–∫–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    market_data = {
        "atr_percent": 0.02,
        "price_change_percent": 1.0,
        "volume_ratio": 1.2,
        "last_price": 50000.0,
    }

    # –¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    signal = await strategy_manager.get_hybrid_signal("BTCUSDC", market_data)
    # –°–∏–≥–Ω–∞–ª –º–æ–∂–µ—Ç –±—ã—Ç—å None –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    print(f"Hybrid signal: {signal}")

    print("‚úÖ Hybrid signal generation test passed")


async def test_strategy_performance_tracking():
    """–¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    print("üß™ Testing Strategy Performance Tracking...")

    # –ú–æ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    config = TradingConfig.from_file()
    logger = UnifiedLogger(config)

    exchange = Mock()
    symbol_manager = Mock()

    strategy_manager = StrategyManager(config, exchange, symbol_manager, logger)

    # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Å–¥–µ–ª–∫—É
    trade_result = {"win": True, "pnl": 0.02}

    await strategy_manager.update_strategy_performance("scalping", trade_result)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    status = await strategy_manager.get_strategy_status()
    assert "scalping" in status["performance"], "Scalping performance should be tracked"

    print("‚úÖ Strategy performance tracking test passed")


async def test_force_strategy_switch():
    """–¢–µ—Å—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    print("üß™ Testing Force Strategy Switch...")

    # –ú–æ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    config = TradingConfig.from_file()
    logger = UnifiedLogger(config)

    exchange = Mock()
    symbol_manager = Mock()

    strategy_manager = StrategyManager(config, exchange, symbol_manager, logger)

    # –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    result = await strategy_manager.force_strategy_switch("BTCUSDC", "scalping")
    assert result, "Strategy switch should succeed"

    # –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    result = await strategy_manager.force_strategy_switch("BTCUSDC", "nonexistent")
    assert not result, "Strategy switch should fail for nonexistent strategy"

    print("‚úÖ Force strategy switch test passed")


async def test_strategy_manager_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç StrategyManager"""
    print("üß™ Testing Strategy Manager Integration...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = TradingConfig.from_file()
    logger = UnifiedLogger(config)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º exchange client
    exchange = ExchangeClient(config, logger=logger)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º symbol manager
    symbol_manager = SymbolManager(exchange, logger=logger)

    # –°–æ–∑–¥–∞–µ–º StrategyManager
    strategy_manager = StrategyManager(config, exchange, symbol_manager, logger)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    assert len(strategy_manager.strategies) == 2, "Should have 2 strategies"
    assert "scalping" in strategy_manager.strategies, "Should have scalping strategy"
    assert "tp_optimizer" in strategy_manager.strategies, "Should have tp_optimizer strategy"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    status = await strategy_manager.get_strategy_status()
    assert status["total_strategies"] == 2, "Should report 2 total strategies"

    print("‚úÖ Strategy Manager integration test passed")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ Starting Strategy Integration Tests...\n")

    try:
        await test_market_regime_detection()
        await test_strategy_selection()
        await test_hybrid_signal_generation()
        await test_strategy_performance_tracking()
        await test_force_strategy_switch()
        await test_strategy_manager_integration()

        print("\nüéâ All strategy integration tests passed!")

    except Exception as e:
        print(f"\n‚ùå Test failed: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
