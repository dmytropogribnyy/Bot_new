#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Position History Reporter —Å –ø—Ä—è–º—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ccxt
"""

import asyncio
import os
import sys
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.config import TradingConfig
from core.unified_logger import UnifiedLogger


async def test_position_history_simple():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Position History Reporter —Å –ø—Ä—è–º—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ccxt"""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Position History Reporter (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = TradingConfig.load_optimized_for_profit_target(0.7)

        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
        logger = UnifiedLogger(config)

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∏—Ä–∂–∏ –Ω–∞–ø—Ä—è–º—É—é
        import ccxt

        exchange = ccxt.binance({
            'apiKey': config.api_key,
            'secret': config.api_secret,
            'sandbox': getattr(config, 'use_testnet', False),
            'enableRateLimit': True,
            'options': {
                'defaultType': 'future',
            }
        })

        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        end_time = datetime.now()
        start_time = end_time - timedelta(hours=24)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
        print("\nüìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        try:
            params = {
                'limit': 50,
                'startTime': int(start_time.timestamp() * 1000),
                'endTime': int(end_time.timestamp() * 1000)
            }

            trades = exchange.fapiPrivateGetUserTrades(params)
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫")

            if trades:
                print("üìã –ü—Ä–∏–º–µ—Ä—ã —Å–¥–µ–ª–æ–∫:")
                for i, trade in enumerate(trades[:5], 1):
                    print(f"   {i}. {trade['symbol']} {trade['side']} {trade['qty']} @ {trade['price']}")
                    print(f"      –í—Ä–µ–º—è: {datetime.fromtimestamp(trade['time']/1000)}")
                    print(f"      –ö–æ–º–∏—Å—Å–∏—è: {trade['commission']}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫: {e}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
        print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π...")
        try:
            positions = exchange.fetch_positions()
            open_positions = [pos for pos in positions if float(pos.get('contracts', 0)) != 0]
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π, –æ—Ç–∫—Ä—ã—Ç—ã—Ö: {len(open_positions)}")

            if open_positions:
                print("üìã –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
                for pos in open_positions:
                    print(f"   ‚Ä¢ {pos['symbol']}: {pos['contracts']} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (PnL: {pos.get('unrealizedPnl', 'N/A')})")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤
        print("\nüí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤...")
        try:
            income = exchange.fapiPrivateGetIncome({
                'limit': 50,
                'startTime': int(start_time.timestamp() * 1000),
                'endTime': int(end_time.timestamp() * 1000)
            })
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(income)} –∑–∞–ø–∏—Å–µ–π –¥–æ—Ö–æ–¥–æ–≤")

            if income:
                print("üìã –ü—Ä–∏–º–µ—Ä—ã –¥–æ—Ö–æ–¥–æ–≤:")
                for i, inc in enumerate(income[:5], 1):
                    print(f"   {i}. {inc['symbol']} {inc['incomeType']}: {inc['income']}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–æ–≤: {e}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        print("\nüè¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ...")
        try:
            balance = exchange.fetch_balance()
            print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞")
            print(f"   ‚Ä¢ USDT Balance: {balance.get('total', {}).get('USDT', 0)}")
            print(f"   ‚Ä¢ BTC Balance: {balance.get('total', {}).get('BTC', 0)}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")

        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_position_history_simple())
