#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è Position History Reporter
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –∫–ª—é—á–µ–π
"""

import asyncio
import os
import sys
from datetime import datetime, timedelta
from unittest.mock import patch

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.config import TradingConfig
from core.position_history_reporter import PositionHistoryReporter, PositionSummary, TradePosition
from core.unified_logger import UnifiedLogger


def create_mock_trades():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return [
        {
            'symbol': 'BTCUSDT',
            'orderId': '12345',
            'side': 'BUY',
            'price': '45000.00',
            'qty': '0.001',
            'commission': '0.045',
            'time': int((datetime.now() - timedelta(hours=2)).timestamp() * 1000)
        },
        {
            'symbol': 'BTCUSDT',
            'orderId': '12345',
            'side': 'SELL',
            'price': '45100.00',
            'qty': '0.001',
            'commission': '0.045',
            'time': int((datetime.now() - timedelta(hours=1)).timestamp() * 1000)
        },
        {
            'symbol': 'ETHUSDT',
            'orderId': '67890',
            'side': 'BUY',
            'price': '3000.00',
            'qty': '0.01',
            'commission': '0.03',
            'time': int((datetime.now() - timedelta(hours=3)).timestamp() * 1000)
        },
        {
            'symbol': 'ETHUSDT',
            'orderId': '67890',
            'side': 'SELL',
            'price': '2990.00',
            'qty': '0.01',
            'commission': '0.03',
            'time': int((datetime.now() - timedelta(hours=2.5)).timestamp() * 1000)
        }
    ]


def create_mock_income():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è income history"""
    return [
        {
            'symbol': 'BTCUSDT',
            'incomeType': 'FUNDING_FEE',
            'income': '0.05',
            'time': int((datetime.now() - timedelta(hours=1)).timestamp() * 1000)
        },
        {
            'symbol': 'ETHUSDT',
            'incomeType': 'FUNDING_FEE',
            'income': '-0.02',
            'time': int((datetime.now() - timedelta(hours=1)).timestamp() * 1000)
        }
    ]


async def test_position_history_mock():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Position History Reporter —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏"""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Position History Reporter —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = TradingConfig.load_optimized_for_profit_target(0.7)
        logger = UnifiedLogger(config)

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ—Ä—Ç–µ—Ä
        reporter = PositionHistoryReporter(config, logger)

        # –ú–æ–∫–∞–µ–º API –≤—ã–∑–æ–≤—ã
        with patch.object(reporter, 'get_user_trades', return_value=create_mock_trades()), \
             patch.object(reporter, 'get_income_history', return_value=create_mock_income()), \
             patch.object(reporter, 'get_position_risk', return_value=[]), \
             patch.object(reporter, 'get_account_info', return_value={}), \
             patch.object(reporter.exchange_client, 'initialize', return_value=True):

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
            if not await reporter.initialize():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç–µ—Ä")
                return

            print("‚úÖ –†–µ–ø–æ—Ä—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ API
            print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≤—ã–∑–æ–≤–æ–≤...")

            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
            trades = await reporter.get_user_trades(limit=5)
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫")

            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
            positions = await reporter.get_position_risk()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π")

            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤
            income = await reporter.get_income_history(limit=5)
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(income)} –∑–∞–ø–∏—Å–µ–π –¥–æ—Ö–æ–¥–æ–≤")

            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            account = await reporter.get_account_info()
            if account:
                print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞")
            else:
                print("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
            print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
            summary, positions = await reporter.generate_position_report(hours=24)

            print("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
            print(f"   ‚Ä¢ –°–¥–µ–ª–æ–∫: {summary.total_trades}")
            print(f"   ‚Ä¢ PnL: ${summary.total_pnl:.2f}")
            print(f"   ‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {summary.win_rate:.1%}")
            print(f"   ‚Ä¢ –ß–∏—Å—Ç—ã–π PnL: ${summary.net_pnl:.2f}")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = reporter.format_position_report(summary, positions)
            print("\nüìã –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–´–ô –û–¢–ß–ï–¢:")
            print(report)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Å–¥–µ–ª–æ–∫
            print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–¥–µ–ª–æ–∫...")
            mock_trades = create_mock_trades()
            positions = reporter._group_trades_into_positions(mock_trades)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π –∏–∑ {len(mock_trades)} —Å–¥–µ–ª–æ–∫")

            for i, pos in enumerate(positions, 1):
                print(f"   {i}. {pos.symbol} {pos.side.upper()}: ${pos.realized_pnl:.2f}")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Å–≤–æ–¥–∫–∏
            print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å–≤–æ–¥–∫–∏...")
            summary = reporter._calculate_position_summary(positions, funding_fees=0.03)
            print("‚úÖ –°–≤–æ–¥–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞:")
            print(f"   ‚Ä¢ –û–±—â–∏–π PnL: ${summary.total_pnl:.2f}")
            print(f"   ‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {summary.win_rate:.1%}")
            print(f"   ‚Ä¢ –ß–∏—Å—Ç—ã–π PnL: ${summary.net_pnl:.2f}")

            # –û—á–∏—Å—Ç–∫–∞
            await reporter.cleanup()
            print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


async def test_dataclasses():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç dataclasses"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ dataclasses...")

    # –¢–µ—Å—Ç TradePosition
    position = TradePosition(
        symbol='BTCUSDT',
        side='buy',
        entry_price=45000.0,
        exit_price=45100.0,
        quantity=0.001,
        entry_time=datetime.now() - timedelta(hours=2),
        exit_time=datetime.now() - timedelta(hours=1),
        entry_order_id='12345',
        exit_order_id='12345',
        entry_fee=0.045,
        exit_fee=0.045,
        realized_pnl=0.055,
        hold_duration_minutes=60.0
    )

    print(f"‚úÖ TradePosition —Å–æ–∑–¥–∞–Ω: {position.symbol} {position.side}")
    print(f"   PnL: ${position.realized_pnl:.3f}")
    print(f"   –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {position.hold_duration_minutes:.1f} –º–∏–Ω")

    # –¢–µ—Å—Ç PositionSummary
    summary = PositionSummary(
        total_trades=2,
        winning_trades=1,
        losing_trades=1,
        total_pnl=0.055,
        total_fees=0.09,
        win_rate=0.5,
        avg_profit_per_trade=0.055,
        avg_loss_per_trade=-0.01,
        max_profit=0.055,
        max_loss=-0.01,
        avg_hold_duration_minutes=60.0,
        best_symbol='BTCUSDT',
        worst_symbol='ETHUSDT',
        symbol_performance={'BTCUSDT': {'trades': 1, 'pnl': 0.055, 'fees': 0.09, 'win_rate': 1.0}},
        funding_fees=0.03,
        net_pnl=0.085
    )

    print("‚úÖ PositionSummary —Å–æ–∑–¥–∞–Ω:")
    print(f"   –°–¥–µ–ª–æ–∫: {summary.total_trades}")
    print(f"   –í–∏–Ω—Ä–µ–π—Ç: {summary.win_rate:.1%}")
    print(f"   –ß–∏—Å—Ç—ã–π PnL: ${summary.net_pnl:.3f}")


if __name__ == "__main__":
    asyncio.run(test_dataclasses())
    asyncio.run(test_position_history_mock())
