#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏ –¥–ª—è Position History Reporter
"""

import asyncio
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.config import TradingConfig
from core.position_history_reporter import PositionHistoryReporter
from core.unified_logger import UnifiedLogger


async def test_position_history_real():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Position History Reporter —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏"""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Position History Reporter —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
        config = TradingConfig.load_optimized_for_profit_target(0.7)

        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º API –∫–ª—é—á–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ
        config.api_key = "w2LwaYZq0x1t50ARb3IP69y9XQLssukr78dSnFcQF9XfbngkELA8hprvtTPAhX5S"
        config.api_secret = "hmG7FVUeyQ8wK09596iDJE8ipQqWvpdlRZ8obwAnCwOa8qlZyHyO9fTvr6oQvMFD"
        config.exchange_mode = "production"
        config.use_testnet = False

        logger = UnifiedLogger(config)

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ—Ä—Ç–µ—Ä
        reporter = PositionHistoryReporter(config, logger)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        if not await reporter.initialize():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç–µ—Ä")
            return

        print("‚úÖ –†–µ–ø–æ—Ä—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ API
        print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≤—ã–∑–æ–≤–æ–≤...")

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
        print("üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫...")
        trades = await reporter.get_user_trades(limit=10)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫")

        if trades:
            print("üìã –ü—Ä–∏–º–µ—Ä—ã —Å–¥–µ–ª–æ–∫:")
            for i, trade in enumerate(trades[:3], 1):
                print(f"   {i}. {trade['symbol']} {trade['side']} {trade['qty']} @ {trade['price']}")

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
        print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π...")
        positions = await reporter.get_position_risk()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π")

        if positions:
            print("üìã –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:")
            for pos in positions:
                print(f"   ‚Ä¢ {pos['symbol']}: {pos['positionAmt']} (PnL: {pos.get('unRealizedProfit', 'N/A')})")

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤
        print("\nüí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤...")
        income = await reporter.get_income_history(limit=10)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(income)} –∑–∞–ø–∏—Å–µ–π –¥–æ—Ö–æ–¥–æ–≤")

        if income:
            print("üìã –ü—Ä–∏–º–µ—Ä—ã –¥–æ—Ö–æ–¥–æ–≤:")
            for i, inc in enumerate(income[:3], 1):
                print(f"   {i}. {inc['symbol']} {inc['incomeType']}: {inc['income']}")

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        print("\nüè¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ...")
        account = await reporter.get_account_info()
        if account:
            print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞")
            print(f"   ‚Ä¢ Total Wallet Balance: {account.get('totalWalletBalance', 'N/A')}")
            print(f"   ‚Ä¢ Total Unrealized Profit: {account.get('totalUnrealizedProfit', 'N/A')}")
            print(f"   ‚Ä¢ Available Balance: {account.get('availableBalance', 'N/A')}")
        else:
            print("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        summary, positions = await reporter.generate_position_report(hours=24)

        print("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
        print(f"   ‚Ä¢ –°–¥–µ–ª–æ–∫: {summary.total_trades}")
        print(f"   ‚Ä¢ PnL: ${summary.total_pnl:.2f}")
        print(f"   ‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {summary.win_rate:.1%}")
        print(f"   ‚Ä¢ –ß–∏—Å—Ç—ã–π PnL: ${summary.net_pnl:.2f}")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = reporter.format_position_report(summary, positions)
        print("\nüìã –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–´–ô –û–¢–ß–ï–¢:")
        print(report)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_path = f"data/position_reports/position_report_real_{timestamp}.txt"

        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("Real Position History Report\n")
            f.write(f"Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write("Range: 24 hours\n\n")
            f.write(report)

        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")

        # –û—á–∏—Å—Ç–∫–∞
        await reporter.cleanup()
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_position_history_real())
