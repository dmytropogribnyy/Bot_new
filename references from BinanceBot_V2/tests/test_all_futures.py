#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤ –Ω–∞ Binance
"""

import ccxt
import os
from dotenv import load_dotenv

load_dotenv()

def check_all_futures():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å—ã"""
    
    exchange = ccxt.binance({
        'apiKey': os.getenv('BINANCE_API_KEY'),
        'secret': os.getenv('BINANCE_API_SECRET'),
        'sandbox': False,
        'options': {
            'defaultType': 'future',
        }
    })
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤ –Ω–∞ Binance...")
    print("=" * 60)
    
    try:
        markets = exchange.load_markets()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        futures = {symbol: market for symbol, market in markets.items() if market['future']}
        usdt_futures = {symbol: market for symbol, market in futures.items() if market['quote'] == 'USDT'}
        usdc_futures = {symbol: market for symbol, market in futures.items() if market['quote'] == 'USDC'}
        btc_futures = {symbol: market for symbol, market in futures.items() if market['quote'] == 'BTC'}
        
        print(f"üìä –í—Å–µ–≥–æ —Ñ—å—é—á–µ—Ä—Å–æ–≤: {len(futures)}")
        print(f"üìä USDT —Ñ—å—é—á–µ—Ä—Å–æ–≤: {len(usdt_futures)}")
        print(f"üìä USDC —Ñ—å—é—á–µ—Ä—Å–æ–≤: {len(usdc_futures)}")
        print(f"üìä BTC —Ñ—å—é—á–µ—Ä—Å–æ–≤: {len(btc_futures)}")
        
        if usdt_futures:
            print(f"\nüìà –ü—Ä–∏–º–µ—Ä—ã USDT —Ñ—å—é—á–µ—Ä—Å–æ–≤:")
            for i, symbol in enumerate(list(usdt_futures.keys())[:10]):
                print(f"   ‚Ä¢ {symbol}")
        
        if usdc_futures:
            print(f"\nüìà –ü—Ä–∏–º–µ—Ä—ã USDC —Ñ—å—é—á–µ—Ä—Å–æ–≤:")
            for symbol in usdc_futures.keys():
                print(f"   ‚Ä¢ {symbol}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º—ã –¥–ª—è USDT —Ñ—å—é—á–µ—Ä—Å–æ–≤
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤ USDT —Ñ—å—é—á–µ—Ä—Å–æ–≤:")
        volumes = []
        
        for symbol in list(usdt_futures.keys())[:20]:  # –ü–µ—Ä–≤—ã–µ 20
            try:
                ticker = exchange.fetch_ticker(symbol)
                volume = ticker['quoteVolume']
                volumes.append(volume)
                print(f"   ‚Ä¢ {symbol}: ${volume:,.0f}")
            except Exception as e:
                print(f"   ‚Ä¢ {symbol}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        
        if volumes:
            avg_volume = sum(volumes) / len(volumes)
            print(f"\nüìà –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º USDT —Ñ—å—é—á–µ—Ä—Å–æ–≤: ${avg_volume:,.0f}")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö:")
            print(f"   ‚Ä¢ min_volume_24h_usdc: ${avg_volume/10:,.0f} (10% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ)")
            print(f"   ‚Ä¢ max_symbols_to_trade: 5-10")
            print(f"   ‚Ä¢ min_position_size_usdc: $20")
            print(f"   ‚Ä¢ max_position_size_usdc: $100")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

if __name__ == "__main__":
    check_all_futures() 