#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API
"""

import hashlib
import hmac
import time
from urllib.parse import urlencode

import requests


def test_binance_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance API"""

    # API –∫–ª—é—á–∏
    API_KEY = "w2LwaYZq0x1t50ARb3IP69y9XQLssukr78dSnFcQF9XfbngkELA8hprvtTPAhX5S"
    API_SECRET = "hmG7FVUeyQ8wK09596iDJE8ipQqWvpdlRZ8obwAnCwOa8qlZyHyO9fTvr6oQvMFD"

    # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Futures
    BASE_URL = "https://fapi.binance.com"

    print("üß™ –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö BINANCE FUTURES")
    print("=" * 40)

    # 1. –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ API (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)
    print("1. –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ API...")
    try:
        response = requests.get(f"{BASE_URL}/fapi/v1/ping")
        if response.status_code == 200:
            print("‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå –ü—É–±–ª–∏—á–Ω—ã–π API –æ—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API: {e}")

    # 2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
    print("\n2. –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        response = requests.get(f"{BASE_URL}/fapi/v1/time")
        if response.status_code == 200:
            server_time = response.json()["serverTime"]
            print(f"‚úÖ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {server_time}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

    # 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    print("\n3. –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ...")
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            "timestamp": int(time.time() * 1000)
        }

        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
        query_string = urlencode(params)
        signature = hmac.new(
            API_SECRET.encode('utf-8'),
            query_string.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        params["signature"] = signature

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = {
            "X-MBX-APIKEY": API_KEY
        }

        # –ó–∞–ø—Ä–æ—Å –∫ API
        response = requests.get(
            f"{BASE_URL}/fapi/v2/account",
            params=params,
            headers=headers
        )

        if response.status_code == 200:
            account_info = response.json()
            print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞")
            print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {account_info.get('accountStatus', 'N/A')}")
            print(f"   ‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏: {account_info.get('commissionRates', 'N/A')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}...")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")

    # 4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    print("\n4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...")
    try:
        response = requests.get(
            f"{BASE_URL}/fapi/v2/account",
            params=params,
            headers=headers
        )

        if response.status_code == 200:
            account_info = response.json()
            assets = account_info.get("assets", [])

            print("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω:")
            for asset in assets:
                if asset["asset"] == "USDC":
                    balance = float(asset["walletBalance"])
                    available = float(asset["availableBalance"])
                    print(f"   ‚Ä¢ USDC –ë–∞–ª–∞–Ω—Å: {balance}")
                    print(f"   ‚Ä¢ USDC –î–æ—Å—Ç—É–ø–Ω–æ: {available}")
                    break
            else:
                print("   ‚Ä¢ USDC –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫–∫–∞—É–Ω—Ç–µ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {response.status_code}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")

    # 5. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
    print("\n5. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π...")
    try:
        response = requests.get(
            f"{BASE_URL}/fapi/v2/positionRisk",
            params=params,
            headers=headers
        )

        if response.status_code == 200:
            positions = response.json()
            print("‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:")
            for pos in positions:
                if float(pos["positionAmt"]) != 0:
                    print(f"   ‚Ä¢ {pos['symbol']}: {pos['positionAmt']} @ {pos['entryPrice']}")
            else:
                print("   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {response.status_code}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")

    print("\n" + "=" * 40)
    print("üéâ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    test_binance_connection()
