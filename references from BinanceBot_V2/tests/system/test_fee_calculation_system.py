#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π Binance USDC-M Futures.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π —Å —É—á–µ—Ç–æ–º BNB —Å–∫–∏–¥–æ–∫ –∏ VIP —É—Ä–æ–≤–Ω–µ–π.
"""

import asyncio

from utils.helpers import (
    calculate_dynamic_fee,
    calculate_gross_pnl,
    calculate_liquidation_price,
    calculate_net_pnl_with_fees,
    calculate_notional_value,
)


class MockExchangeClient:
    """Mock –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ExchangeClient"""

    def __init__(self):
        self.fee_info = {
            "maker_fee": 0.0002,
            "taker_fee": 0.0004,
            "has_bnb_discount": False,
            "vip_level": 0,
            "commission_rate": 0.0004,
        }

    async def get_fee_info(self):
        return self.fee_info

    def set_fee_info(self, fee_info):
        self.fee_info = fee_info


class MockLogger:
    """Mock –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞"""

    def __init__(self):
        self.logs = []

    def log_trade(self, symbol, side, entry_price, exit_price, qty, pnl, win, fees):
        self.logs.append({
            'symbol': symbol,
            'side': side,
            'entry_price': entry_price,
            'exit_price': exit_price,
            'qty': qty,
            'pnl': pnl,
            'win': win,
            'fees': fees,
        })


async def test_basic_fee_calculation():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π"""
    print("üîç –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π...")

    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –±–µ–∑ BNB
    quantity = 1.0
    price = 50000.0

    # Taker fee (MARKET order)
    taker_fee = calculate_dynamic_fee(quantity, price, "MARKET", False, 0)
    expected_taker = quantity * price * 0.0004  # 0.04%
    assert abs(taker_fee - expected_taker) < 0.01, f"Taker fee: {taker_fee} != {expected_taker}"

    # Maker fee (LIMIT order)
    maker_fee = calculate_dynamic_fee(quantity, price, "LIMIT", False, 0)
    expected_maker = quantity * price * 0.0002  # 0.02%
    assert abs(maker_fee - expected_maker) < 0.01, f"Maker fee: {maker_fee} != {expected_maker}"

    print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


async def test_bnb_discount_fees():
    """–¢–µ—Å—Ç –∫–æ–º–∏—Å—Å–∏–π —Å–æ —Å–∫–∏–¥–∫–æ–π BNB"""
    print("üîç –¢–µ—Å—Ç –∫–æ–º–∏—Å—Å–∏–π —Å–æ —Å–∫–∏–¥–∫–æ–π BNB...")

    quantity = 1.0
    price = 50000.0

    # Taker fee —Å BNB
    taker_fee_bnb = calculate_dynamic_fee(quantity, price, "MARKET", True, 0)
    expected_taker_bnb = quantity * price * 0.0003  # 0.03% —Å BNB
    assert abs(taker_fee_bnb - expected_taker_bnb) < 0.01, f"Taker fee BNB: {taker_fee_bnb} != {expected_taker_bnb}"

    # Maker fee —Å BNB
    maker_fee_bnb = calculate_dynamic_fee(quantity, price, "LIMIT", True, 0)
    expected_maker_bnb = quantity * price * 0.0001  # 0.01% —Å BNB
    assert abs(maker_fee_bnb - expected_maker_bnb) < 0.01, f"Maker fee BNB: {maker_fee_bnb} != {expected_maker_bnb}"

    print("‚úÖ –ö–æ–º–∏—Å—Å–∏–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π BNB —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


async def test_vip_level_fees():
    """–¢–µ—Å—Ç –∫–æ–º–∏—Å—Å–∏–π —Å VIP —É—Ä–æ–≤–Ω—è–º–∏"""
    print("üîç –¢–µ—Å—Ç –∫–æ–º–∏—Å—Å–∏–π —Å VIP —É—Ä–æ–≤–Ω—è–º–∏...")

    quantity = 1.0
    price = 50000.0

    # VIP 1 —É—Ä–æ–≤–µ–Ω—å
    vip1_fee = calculate_dynamic_fee(quantity, price, "MARKET", False, 1)
    base_fee = quantity * price * 0.0004
    vip1_discount = quantity * price * 0.00001  # 0.001% —Å–∫–∏–¥–∫–∞
    expected_vip1 = base_fee - vip1_discount
    assert abs(vip1_fee - expected_vip1) < 0.01, f"VIP1 fee: {vip1_fee} != {expected_vip1}"

    # VIP 10 —É—Ä–æ–≤–µ–Ω—å (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞)
    vip10_fee = calculate_dynamic_fee(quantity, price, "MARKET", False, 10)
    max_discount = quantity * price * 0.0001  # –ú–∞–∫—Å–∏–º—É–º 0.01% —Å–∫–∏–¥–∫–∞
    expected_vip10 = base_fee - max_discount
    assert abs(vip10_fee - expected_vip10) < 0.01, f"VIP10 fee: {vip10_fee} != {expected_vip10}"

    print("‚úÖ VIP –∫–æ–º–∏—Å—Å–∏–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


async def test_pnl_calculation_with_fees():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ PnL —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏"""
    print("üîç –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ PnL —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏...")

    # –¢–µ—Å—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏
    entry_price = 50000.0
    exit_price = 50500.0  # +1% –ø—Ä–∏–±—ã–ª—å
    quantity = 1.0
    side = "buy"

    # –ë–µ–∑ BNB
    pnl_no_bnb = calculate_net_pnl_with_fees(
        entry_price, exit_price, quantity, side,
        "MARKET", "MARKET", False, 0
    )

    # –° BNB
    pnl_with_bnb = calculate_net_pnl_with_fees(
        entry_price, exit_price, quantity, side,
        "MARKET", "MARKET", True, 0
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å BNB –∫–æ–º–∏—Å—Å–∏–∏ –º–µ–Ω—å—à–µ
    assert pnl_with_bnb["total_fees"] < pnl_no_bnb["total_fees"], "BNB fees should be lower"
    assert pnl_with_bnb["net_pnl"] > pnl_no_bnb["net_pnl"], "BNB net PnL should be higher"

    print(f"‚úÖ PnL –±–µ–∑ BNB: {pnl_no_bnb['net_pnl']:.2f} USDC")
    print(f"‚úÖ PnL —Å BNB: {pnl_with_bnb['net_pnl']:.2f} USDC")
    print(f"‚úÖ –≠–∫–æ–Ω–æ–º–∏—è —Å BNB: {pnl_no_bnb['total_fees'] - pnl_with_bnb['total_fees']:.2f} USDC")


async def test_liquidation_price_with_fees():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏"""
    print("üîç –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏...")

    entry_price = 50000.0
    side = "buy"
    leverage = 5
    wallet_balance = 1000.0
    position_size = 0.1

    # –ë–µ–∑ BNB
    liq_price_no_bnb = calculate_liquidation_price(
        entry_price, side, leverage, wallet_balance, position_size,
        0.004, False, 0
    )

    # –° BNB
    liq_price_with_bnb = calculate_liquidation_price(
        entry_price, side, leverage, wallet_balance, position_size,
        0.004, True, 0
    )

    # –° BNB —Ü–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ (–º–µ–Ω—å—à–µ –∫–æ–º–∏—Å—Å–∏–π)
    assert liq_price_with_bnb < liq_price_no_bnb, "BNB liquidation price should be lower"

    print(f"‚úÖ –¶–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –±–µ–∑ BNB: {liq_price_no_bnb:.2f}")
    print(f"‚úÖ –¶–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ —Å BNB: {liq_price_with_bnb:.2f}")


async def test_notional_value_calculation():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    print("üîç –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏...")

    quantity = 0.5
    price = 50000.0
    notional = calculate_notional_value(quantity, price)
    expected = quantity * price

    assert abs(notional - expected) < 0.01, f"Notional: {notional} != {expected}"
    print(f"‚úÖ –ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {notional:.2f} USDC")


async def test_gross_pnl_calculation():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –≤–∞–ª–æ–≤–æ–≥–æ PnL"""
    print("üîç –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –≤–∞–ª–æ–≤–æ–≥–æ PnL...")

    entry_price = 50000.0
    exit_price = 50500.0
    quantity = 1.0

    # Long position
    long_pnl = calculate_gross_pnl(entry_price, exit_price, quantity, "buy")
    expected_long = (exit_price - entry_price) * quantity
    assert abs(long_pnl - expected_long) < 0.01, f"Long PnL: {long_pnl} != {expected_long}"

    # Short position
    short_pnl = calculate_gross_pnl(entry_price, exit_price, quantity, "sell")
    expected_short = (entry_price - exit_price) * quantity
    assert abs(short_pnl - expected_short) < 0.01, f"Short PnL: {short_pnl} != {expected_short}"

    print(f"‚úÖ Long PnL: {long_pnl:.2f} USDC")
    print(f"‚úÖ Short PnL: {short_pnl:.2f} USDC")


async def test_fee_comparison_scenarios():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∫–æ–º–∏—Å—Å–∏–π"""
    print("üîç –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∫–æ–º–∏—Å—Å–∏–π...")

    quantity = 1.0
    price = 50000.0

    scenarios = [
        {"name": "Market –±–µ–∑ BNB", "order_type": "MARKET", "has_bnb": False, "vip": 0},
        {"name": "Limit –±–µ–∑ BNB", "order_type": "LIMIT", "has_bnb": False, "vip": 0},
        {"name": "Market —Å BNB", "order_type": "MARKET", "has_bnb": True, "vip": 0},
        {"name": "Limit —Å BNB", "order_type": "LIMIT", "has_bnb": True, "vip": 0},
        {"name": "Market VIP5", "order_type": "MARKET", "has_bnb": False, "vip": 5},
        {"name": "Limit VIP10", "order_type": "LIMIT", "has_bnb": True, "vip": 10},
    ]

    for scenario in scenarios:
        fee = calculate_dynamic_fee(
            quantity, price,
            scenario["order_type"],
            scenario["has_bnb"],
            scenario["vip"]
        )
        print(f"‚úÖ {scenario['name']}: {fee:.2f} USDC")


async def test_exchange_client_fee_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ExchangeClient"""
    print("üîç –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ExchangeClient...")

    mock_client = MockExchangeClient()

    # –¢–µ—Å—Ç –±–µ–∑ BNB
    fee_info_no_bnb = await mock_client.get_fee_info()
    assert fee_info_no_bnb["has_bnb_discount"] == False
    assert fee_info_no_bnb["taker_fee"] == 0.0004

    # –¢–µ—Å—Ç —Å BNB
    mock_client.set_fee_info({
        "maker_fee": 0.0001,
        "taker_fee": 0.0003,
        "has_bnb_discount": True,
        "vip_level": 0,
        "commission_rate": 0.0003,
    })

    fee_info_with_bnb = await mock_client.get_fee_info()
    assert fee_info_with_bnb["has_bnb_discount"] == True
    assert fee_info_with_bnb["taker_fee"] == 0.0003

    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ExchangeClient —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–∏—Å—Å–∏–π Binance USDC-M Futures")
    print("=" * 60)

    try:
        await test_basic_fee_calculation()
        await test_bnb_discount_fees()
        await test_vip_level_fees()
        await test_pnl_calculation_with_fees()
        await test_liquidation_price_with_fees()
        await test_notional_value_calculation()
        await test_gross_pnl_calculation()
        await test_fee_comparison_scenarios()
        await test_exchange_client_fee_integration()

        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–∏—Å—Å–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –£—á—Ç–µ–Ω—ã BNB —Å–∫–∏–¥–∫–∏ –∏ VIP —É—Ä–æ–≤–Ω–∏")
        print("‚úÖ PnL —Ä–∞—Å—á–µ—Ç—ã —Ç–æ—á–Ω—ã–µ")
        print("‚úÖ –¶–µ–Ω—ã –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ")

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
