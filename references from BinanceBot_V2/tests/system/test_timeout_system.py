#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ time-based exits
"""

import asyncio
import time
from datetime import datetime
from types import SimpleNamespace

from core.order_manager import OrderManager


class MockExchangeClient:
    def __init__(self):
        self.orders = {}
        self.order_id_counter = 1

    async def set_leverage(self, symbol, leverage):
        return {'success': True}

    async def place_order(self, symbol, side, quantity, order_type="MARKET", price=None, params=None):
        order_id = self.order_id_counter
        self.order_id_counter += 1

        order = {
            'orderId': order_id,
            'symbol': symbol,
            'side': side,
            'quantity': quantity,
            'type': order_type,
            'status': 'FILLED',
            'price': price or 50000.0
        }

        self.orders[order_id] = order
        return order

    async def get_ticker(self, symbol):
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        if 'TIMEOUT' in symbol:
            price = '48000.0'  # –£–±—ã—Ç–æ–∫ –¥–ª—è timeout
        elif 'PROFIT' in symbol:
            price = '50700.0'  # –ü—Ä–∏–±—ã–ª—å –¥–ª—è auto-profit
        elif 'WEAK' in symbol:
            price = '50050.0'  # –ù–µ–±–æ–ª—å—à–∞—è –ø—Ä–∏–±—ã–ª—å –¥–ª—è weak
        elif 'RISKY' in symbol:
            price = '49250.0'  # –£–±—ã—Ç–æ–∫ –¥–ª—è risky
        else:
            price = '50000.0'

        return {'lastPrice': price}

    async def get_order_status(self, symbol, order_id):
        return self.orders.get(order_id, {'status': 'FILLED'})

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã
    async def get_positions(self):
        return []

    async def get_open_orders(self, symbol=None):
        return []

class MockLogger:
    def __init__(self):
        self.events = []
        self.trades = []
        self.config = SimpleNamespace(telegram_enabled=False)

    def log_event(self, component, level, message, details=None):
        self.events.append({
            'component': component,
            'level': level,
            'message': message,
            'details': details,
            'timestamp': datetime.now().isoformat()  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º deprecation warning
        })
        print(f"[{level}] {component}: {message}")

    def log_trade(self, symbol, side, entry_price, exit_price, qty, pnl, win, fees):
        self.trades.append({
            'symbol': symbol,
            'side': side,
            'entry_price': entry_price,
            'exit_price': exit_price,
            'qty': qty,
            'pnl': pnl,
            'win': win,
            'fees': fees,
            'timestamp': datetime.now().isoformat()
        })
        print(f"üí∞ Trade: {symbol} {side} {qty} @ {entry_price} -> {exit_price} (PnL: ${pnl:.2f})")

async def test_timeout_scenarios():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
    print("=" * 60)

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    config = SimpleNamespace(
        sl_percent=0.012,
        step_tp_levels=[0.004, 0.008, 0.012],
        step_tp_sizes=[0.5, 0.3, 0.2],
        max_position_duration=3600,
        max_concurrent_positions=3,
        min_trade_qty=0.001,
        telegram_enabled=False,
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è enhanced timeout system
        max_hold_minutes=30,
        soft_exit_minutes=15,
        auto_profit_threshold=0.7,
        weak_position_minutes=45,
        risky_loss_threshold=-1.5,
        emergency_stop_threshold=-2.0,
        trailing_stop_drawdown=0.3
    )

    exchange = MockExchangeClient()
    logger = MockLogger()

    order_manager = OrderManager(config, exchange, logger)
    await order_manager.initialize()

    # –¢–µ—Å—Ç 1: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
    print("\nüìã –¢–µ—Å—Ç 1: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è")
    await order_manager.place_position_with_tp_sl(
        symbol="BTCUSDC_TIMEOUT",
        side="BUY",
        quantity=0.001,
        entry_price=50000.0,
        leverage=5
    )

    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞
    position = order_manager.active_positions["BTCUSDC_TIMEOUT"]
    position['entry_time'] = time.time() - (35 * 60)  # 35 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥

    await order_manager.check_timeouts()

    if "BTCUSDC_TIMEOUT" not in order_manager.active_positions:
        print("‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è")
    else:
        print("‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")

    # –û—á–∏—â–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
    order_manager.active_positions.clear()

    # –¢–µ—Å—Ç 2: Auto-profit
    print("\nüìã –¢–µ—Å—Ç 2: Auto-profit")
    await order_manager.place_position_with_tp_sl(
        symbol="BTCUSDC_PROFIT",
        side="BUY",
        quantity=0.001,
        entry_price=50000.0,
        leverage=5
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º entry_time –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –î–û –≤—ã–∑–æ–≤–∞ check_timeouts
    position = order_manager.active_positions["BTCUSDC_PROFIT"]
    position['entry_time'] = time.time() - (10 * 60)  # 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥

    await order_manager.check_timeouts()

    if "BTCUSDC_PROFIT" not in order_manager.active_positions:
        print("‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ auto-profit")
    else:
        print("‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ auto-profit")

    # –û—á–∏—â–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
    order_manager.active_positions.clear()

    # –¢–µ—Å—Ç 3: –°–ª–∞–±–∞—è –ø–æ–∑–∏—Ü–∏—è
    print("\nüìã –¢–µ—Å—Ç 3: –°–ª–∞–±–∞—è –ø–æ–∑–∏—Ü–∏—è")
    await order_manager.place_position_with_tp_sl(
        symbol="BTCUSDC_WEAK",
        side="BUY",
        quantity=0.001,
        entry_price=50000.0,
        leverage=5
    )

    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ –î–û –≤—ã–∑–æ–≤–∞ check_timeouts
    position = order_manager.active_positions["BTCUSDC_WEAK"]
    position['entry_time'] = time.time() - (50 * 60)  # 50 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥

    await order_manager.check_timeouts()

    if "BTCUSDC_WEAK" not in order_manager.active_positions:
        print("‚úÖ –°–ª–∞–±–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
    else:
        print("‚ùå –°–ª–∞–±–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞")

    # –û—á–∏—â–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
    order_manager.active_positions.clear()

    # –¢–µ—Å—Ç 4: –†–∏—Å–∫–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
    print("\nüìã –¢–µ—Å—Ç 4: –†–∏—Å–∫–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è")
    await order_manager.place_position_with_tp_sl(
        symbol="BTCUSDC_RISKY",
        side="BUY",
        quantity=0.001,
        entry_price=50000.0,
        leverage=5
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º entry_time –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –î–û –≤—ã–∑–æ–≤–∞ check_timeouts
    position = order_manager.active_positions["BTCUSDC_RISKY"]
    position['entry_time'] = time.time() - (5 * 60)  # 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥

    await order_manager.check_timeouts()

    if "BTCUSDC_RISKY" not in order_manager.active_positions:
        print("‚úÖ –†–∏—Å–∫–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
    else:
        print("‚ùå –†–∏—Å–∫–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞")

    # –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π:")
    for event in logger.events:
        if "closing" in event['message'].lower() or "closed" in event['message'].lower():
            print(f"  {event['level']}: {event['message']}")

    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(logger.events)}")

async def main():
    try:
        await test_timeout_scenarios()
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
