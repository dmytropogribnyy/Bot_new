#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥ STOP –∏ SHUTDOWN –¥–ª—è BinanceBot_V2
"""

import asyncio
from unittest.mock import Mock

from telegram.command_handlers import CommandHandlers


class MockTradingEngine:
    """–ú–æ–∫ –¥–ª—è TradingEngine —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π pause/resume"""

    def __init__(self):
        self.in_position = {
            "BTCUSDC": {"entry_price": 50000.0, "qty": 0.001, "side": "BUY"},
            "ETHUSDC": {"entry_price": 3000.0, "qty": 0.01, "side": "SELL"},
        }
        self.paused = False
        self.running = True
        self.logger = Mock()

    def get_open_positions(self):
        positions = []
        for symbol, pos in self.in_position.items():
            positions.append({
                "symbol": symbol,
                "side": pos["side"],
                "qty": pos["qty"],
                "entry_price": pos["entry_price"],
            })
        return positions

    def pause_trading(self):
        self.paused = True
        self.logger.log_event("TRADING_ENGINE", "WARNING", "Trading paused")

    def resume_trading(self):
        self.paused = False
        self.logger.log_event("TRADING_ENGINE", "INFO", "Trading resumed")

    async def close_position(self, symbol: str):
        """–ú–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        if symbol in self.in_position:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
            del self.in_position[symbol]
            return {"success": True, "pnl": 25.50, "win": True}
        else:
            return {"success": False, "error": "Position not found"}


class MockLogger:
    """–ú–æ–∫ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞"""

    def __init__(self):
        self.events = []

    def log_event(self, component, level, message, details=None):
        self.events.append({
            "component": component,
            "level": level,
            "message": message,
            "details": details
        })
        print(f"[{level}] {component}: {message}")


async def test_stop_command():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /stop"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /stop...")

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏
    engine = MockTradingEngine()
    engine.logger = MockLogger()

    handlers = CommandHandlers(
        leverage_manager=Mock(),
        symbol_selector=Mock(),
        exchange_client=Mock(),
        bot_engine=engine,
        config=Mock()
    )

    # –¢–µ—Å—Ç 1: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    print("\nüìã –¢–µ—Å—Ç 1: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
    engine.in_position = {}  # –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π
    result = await handlers.stop_trading()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    assert "No active positions" in result
    assert engine.paused == True

    # –¢–µ—Å—Ç 2: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ (–±—ã—Å—Ç—Ä–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ)
    print("\nüìã –¢–µ—Å—Ç 2: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ (–±—ã—Å—Ç—Ä–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ)")
    engine.in_position = {"BTCUSDC": {"entry_price": 50000.0, "qty": 0.001, "side": "BUY"}}
    engine.paused = False

    # –ú–æ–∫–∞–µ–º –±—ã—Å—Ç—Ä–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
    original_close = engine.close_position
    async def fast_close(symbol):
        await asyncio.sleep(0.1)  # –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        return await original_close(symbol)

    engine.close_position = fast_close

    result = await handlers.stop_trading()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    assert "successfully" in result or "still active" in result

    # –¢–µ—Å—Ç 3: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ (–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ)
    print("\nüìã –¢–µ—Å—Ç 3: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ (–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ)")
    engine.in_position = {"ETHUSDC": {"entry_price": 3000.0, "qty": 0.01, "side": "SELL"}}
    engine.paused = False

    # –ú–æ–∫–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
    async def slow_close(symbol):
        await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        return {"success": False, "error": "Timeout"}  # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è

    engine.close_position = slow_close

    result = await handlers.stop_trading()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    assert "still active" in result or "Use /shutdown" in result


async def test_shutdown_command():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /shutdown"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /shutdown...")

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏
    engine = MockTradingEngine()
    engine.logger = MockLogger()

    handlers = CommandHandlers(
        leverage_manager=Mock(),
        symbol_selector=Mock(),
        exchange_client=Mock(),
        bot_engine=engine,
        config=Mock()
    )

    # –¢–µ—Å—Ç 1: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π
    print("\nüìã –¢–µ—Å—Ç 1: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π")
    engine.in_position = {}
    result = await handlers.shutdown_bot()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    assert "No active positions" in result
    assert engine.paused == True

    # –¢–µ—Å—Ç 2: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ (—É—Å–ø–µ—à–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ)
    print("\nüìã –¢–µ—Å—Ç 2: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ (—É—Å–ø–µ—à–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ)")
    engine.in_position = {
        "BTCUSDC": {"entry_price": 50000.0, "qty": 0.001, "side": "BUY"},
        "ETHUSDC": {"entry_price": 3000.0, "qty": 0.01, "side": "SELL"},
    }
    engine.paused = False

    result = await handlers.shutdown_bot()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    assert "Emergency shutdown executed" in result
    assert engine.paused == True

    # –¢–µ—Å—Ç 3: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –æ—à–∏–±–∫–∞–º–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    print("\nüìã –¢–µ—Å—Ç 3: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –æ—à–∏–±–∫–∞–º–∏ –∑–∞–∫—Ä—ã—Ç–∏—è")
    engine.in_position = {"BTCUSDC": {"entry_price": 50000.0, "qty": 0.001, "side": "BUY"}}
    engine.paused = False

    # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
    async def error_close(symbol):
        return {"success": False, "error": "Network error"}

    engine.close_position = error_close

    result = await handlers.shutdown_bot()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    assert "Emergency shutdown executed" in result
    assert "0/1" in result  # 0 —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∏–∑ 1 –ø–æ–∑–∏—Ü–∏–∏


async def test_command_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥...")

    engine = MockTradingEngine()
    engine.logger = MockLogger()

    handlers = CommandHandlers(
        leverage_manager=Mock(),
        symbol_selector=Mock(),
        exchange_client=Mock(),
        bot_engine=engine,
        config=Mock()
    )

    # –¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥
    print("\nüìã –¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: pause -> stop -> shutdown")

    # 1. Pause
    result1 = await handlers.pause_trading()
    print(f"Pause: {result1}")
    assert engine.paused == True

    # 2. Stop
    result2 = await handlers.stop_trading()
    print(f"Stop: {result2}")

    # 3. Shutdown
    result3 = await handlers.shutdown_bot()
    print(f"Shutdown: {result3}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
    print("\nüìù –õ–æ–≥–∏ —Å–æ–±—ã—Ç–∏–π:")
    for event in engine.logger.events:
        print(f"  [{event['level']}] {event['component']}: {event['message']}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ STOP –∏ SHUTDOWN")
    print("=" * 50)

    try:
        await test_stop_command()
        await test_shutdown_command()
        await test_command_integration()

        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –†–µ–∑—é–º–µ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥:")
        print("  /stop - Graceful –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π")
        print("  /shutdown - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º")
        print("  –û–±–µ –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–æ–≥–∏—Ä—É—é—Ç —Å–æ–±—ã—Ç–∏—è –∏ —É–ø—Ä–∞–≤–ª—è—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
