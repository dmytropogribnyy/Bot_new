#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å–ª–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è
"""

import asyncio
import time
from datetime import datetime
from types import SimpleNamespace

from core.order_manager import OrderManager


class MockExchangeClient:
    def __init__(self):
        self.orders = {}
        self.positions = {}
        self.order_id_counter = 1

    async def set_leverage(self, symbol, leverage):
        return {'success': True}

    async def place_order(self, symbol, side, quantity, order_type="MARKET", price=None, params=None):
        order_id = self.order_id_counter
        self.order_id_counter += 1

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
        if order_type == "MARKET":
            status = 'FILLED'
        elif order_type == "STOP_MARKET":
            status = 'NEW'
        elif order_type == "LIMIT":
            status = 'NEW'
        else:
            status = 'FILLED'

        order = {
            'orderId': order_id,
            'symbol': symbol,
            'side': side,
            'quantity': quantity,
            'type': order_type,
            'status': status,
            'price': price or 50000.0,
            'time': int(time.time() * 1000)
        }

        self.orders[order_id] = order

        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä, —Å–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        if order_type == "MARKET":
            self.positions[symbol] = {
                'symbol': symbol,
                'positionAmt': str(quantity if side == 'BUY' else -quantity),
                'entryPrice': str(price or 50000.0),
                'unRealizedProfit': '0.0',
                'side': side
            }

        return order

    async def get_ticker(self, symbol):
        return {'lastPrice': '50000.0'}

    async def get_order_status(self, symbol, order_id):
        return self.orders.get(order_id, {'status': 'FILLED'})

    async def get_positions(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏"""
        return list(self.positions.values())

    async def get_open_orders(self, symbol=None):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞"""
        open_orders = []
        for order in self.orders.values():
            if order['status'] == 'NEW':
                if symbol is None or order['symbol'] == symbol:
                    open_orders.append(order)
        return open_orders

    async def cancel_order(self, symbol, order_id):
        """–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞"""
        if order_id in self.orders:
            self.orders[order_id]['status'] = 'CANCELED'
            return {'success': True}
        return {'success': False, 'error': 'Order not found'}

    def simulate_position_close(self, symbol):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        if symbol in self.positions:
            del self.positions[symbol]
            return True
        return False

class MockLogger:
    def __init__(self):
        self.events = []
        self.trades = []
        self.config = SimpleNamespace(telegram_enabled=False)

    def log_event(self, component, level, message, details=None):
        self.events.append({
            'component': component,
            'level': level,
            'message': message,
            'details': details,
            'timestamp': datetime.now().isoformat()
        })
        print(f"[{level}] {component}: {message}")

    def log_trade(self, symbol, side, entry_price, exit_price, qty, pnl, win, fees):
        self.trades.append({
            'symbol': symbol,
            'side': side,
            'entry_price': entry_price,
            'exit_price': exit_price,
            'qty': qty,
            'pnl': pnl,
            'win': win,
            'fees': fees,
            'timestamp': datetime.now().isoformat()
        })
        print(f"üí∞ Trade: {symbol} {side} {qty} @ {entry_price} -> {exit_price} (PnL: ${pnl:.2f})")

async def test_emergency_shutdown_recovery():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å–ª–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("=" * 60)

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = SimpleNamespace(
        sl_percent=0.012,
        step_tp_levels=[0.004, 0.008, 0.012],
        step_tp_sizes=[0.5, 0.3, 0.2],
        max_position_duration=3600,
        max_concurrent_positions=3,
        min_trade_qty=0.001,
        telegram_enabled=False,
        max_hold_minutes=30,
        soft_exit_minutes=15,
        auto_profit_threshold=0.7,
        weak_position_minutes=45,
        risky_loss_threshold=-1.5,
        emergency_stop_threshold=-2.0,
        trailing_stop_drawdown=0.3
    )

    exchange = MockExchangeClient()
    logger = MockLogger()

    # –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π (–±–µ–∑ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è)
    print("\nüìã –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π")

    # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ
    exchange.positions["BTCUSDC_NORMAL"] = {
        'symbol': 'BTCUSDC_NORMAL',
        'positionAmt': '0.001',
        'entryPrice': '50000.0',
        'unRealizedProfit': '25.0',
        'side': 'BUY'
    }

    # –°–æ–∑–¥–∞–µ–º OrderManager
    order_manager = OrderManager(config, exchange, logger)
    await order_manager.initialize()

    print(f"  –ü–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ: {len(exchange.positions)}")
    print(f"  –ü–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {len(order_manager.active_positions)}")
    print(f"  Emergency shutdown flag: {order_manager.is_emergency_shutdown()}")

    # –¢–µ—Å—Ç 2: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    print("\nüìã –¢–µ—Å—Ç 2: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    await order_manager.place_position_with_tp_sl(
        symbol="ETHUSDC_EMERGENCY",
        side="BUY",
        quantity=0.01,
        entry_price=3000.0,
        leverage=5
    )

    print(f"  –ü–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ –¥–æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {len(order_manager.active_positions)}")
    print(f"  –ü–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ –¥–æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {len(exchange.positions)}")

    # –°–∏–º—É–ª–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
    await order_manager.shutdown(emergency=True)

    print(f"  –ü–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ –ø–æ—Å–ª–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {len(order_manager.active_positions)}")
    print(f"  –ü–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ –ø–æ—Å–ª–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {len(exchange.positions)}")
    print(f"  Emergency shutdown flag: {order_manager.is_emergency_shutdown()}")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π OrderManager (—Å–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
    new_order_manager = OrderManager(config, exchange, logger)
    await new_order_manager.initialize()

    print(f"  –ü–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {len(new_order_manager.active_positions)}")
    print(f"  Emergency shutdown flag –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {new_order_manager.is_emergency_shutdown()}")

    # –¢–µ—Å—Ç 3: –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
    print("\nüìã –¢–µ—Å—Ç 3: –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    new_order_manager.reset_emergency_flag()
    print(f"  Emergency shutdown flag –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: {new_order_manager.is_emergency_shutdown()}")

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏
    await new_order_manager.sync_positions_from_exchange()
    print(f"  –ü–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {len(new_order_manager.active_positions)}")

    # –¢–µ—Å—Ç 4: Graceful shutdown –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    print("\nüìã –¢–µ—Å—Ç 4: Graceful shutdown –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    await new_order_manager.place_position_with_tp_sl(
        symbol="ADAUSDC_GRACEFUL",
        side="BUY",
        quantity=100,
        entry_price=0.5,
        leverage=5
    )

    print(f"  –ü–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ –¥–æ graceful shutdown: {len(new_order_manager.active_positions)}")

    # –°–∏–º—É–ª–∏—Ä—É–µ–º graceful shutdown (–±–µ–∑ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è)
    new_order_manager.shutdown_requested = True
    new_order_manager.shutdown_timestamp = time.time()
    # –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º emergency_shutdown_flag = True

    print(f"  Emergency shutdown flag –ø–æ—Å–ª–µ graceful shutdown: {new_order_manager.is_emergency_shutdown()}")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π OrderManager (—Å–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ graceful shutdown)
    graceful_order_manager = OrderManager(config, exchange, logger)
    await graceful_order_manager.initialize()

    print(f"  –ü–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ –ø–æ—Å–ª–µ graceful shutdown –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {len(graceful_order_manager.active_positions)}")
    print(f"  Emergency shutdown flag –ø–æ—Å–ª–µ graceful shutdown: {graceful_order_manager.is_emergency_shutdown()}")

    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    print("\nüìã –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")

    scenarios = [
        ("Ctrl+C (–ø–µ—Ä–≤—ã–π)", False, "–î–æ–ª–∂–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏"),
        ("Ctrl+C (–≤—Ç–æ—Ä–æ–π)", True, "–ù–ï –¥–æ–ª–∂–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏"),
        ("/stop –∫–æ–º–∞–Ω–¥–∞", False, "–î–æ–ª–∂–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏"),
        ("/shutdown –∫–æ–º–∞–Ω–¥–∞", True, "–ù–ï –¥–æ–ª–∂–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏"),
        ("SIGTERM", False, "–î–æ–ª–∂–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏"),
        ("Timeout –≤ graceful", True, "–ù–ï –¥–æ–ª–∂–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏")
    ]

    for scenario_name, is_emergency, expected_behavior in scenarios:
        print(f"  {scenario_name}: {expected_behavior}")
        print(f"    Emergency flag: {is_emergency}")

    # –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π:")
    emergency_events = [e for e in logger.events if 'emergency' in e['message'].lower() or 'shutdown' in e['message'].lower()]
    for event in emergency_events[-10:]:
        print(f"  {event['level']}: {event['message']}")

    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(logger.events)}")

async def main():
    try:
        await test_emergency_shutdown_recovery()
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
