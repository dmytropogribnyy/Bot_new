#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Ä–¥–µ—Ä–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –±–æ—Ç–æ–º –∏ Binance
"""

import asyncio
import time
from datetime import datetime
from types import SimpleNamespace

from core.order_manager import OrderManager


class MockExchangeClient:
    def __init__(self):
        self.orders = {}
        self.positions = {}
        self.order_id_counter = 1
        self.position_id_counter = 1

    async def set_leverage(self, symbol, leverage):
        return {'success': True}

    async def place_order(self, symbol, side, quantity, order_type="MARKET", price=None, params=None):
        order_id = self.order_id_counter
        self.order_id_counter += 1

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
        if order_type == "MARKET":
            status = 'FILLED'
        elif order_type == "STOP_MARKET":
            status = 'NEW'  # SL –æ—Ä–¥–µ—Ä–∞ –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏
        elif order_type == "LIMIT":
            status = 'NEW'  # TP –æ—Ä–¥–µ—Ä–∞ –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏
        else:
            status = 'FILLED'

        order = {
            'orderId': order_id,
            'symbol': symbol,
            'side': side,
            'quantity': quantity,
            'type': order_type,
            'status': status,
            'price': price or 50000.0,
            'time': int(time.time() * 1000)
        }

        self.orders[order_id] = order

        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä, —Å–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        if order_type == "MARKET":
            self.positions[symbol] = {
                'symbol': symbol,
                'positionAmt': str(quantity if side == 'BUY' else -quantity),
                'entryPrice': str(price or 50000.0),
                'unRealizedProfit': '0.0',
                'side': side
            }

        return order

    async def get_ticker(self, symbol):
        return {'lastPrice': '50000.0'}

    async def get_order_status(self, symbol, order_id):
        return self.orders.get(order_id, {'status': 'FILLED'})

    async def get_positions(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏"""
        return list(self.positions.values())

    async def get_open_orders(self, symbol=None):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞"""
        open_orders = []
        for order in self.orders.values():
            if order['status'] == 'NEW':
                if symbol is None or order['symbol'] == symbol:
                    open_orders.append(order)
        return open_orders

    async def cancel_order(self, symbol, order_id):
        """–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞"""
        if order_id in self.orders:
            self.orders[order_id]['status'] = 'CANCELED'
            return {'success': True}
        return {'success': False, 'error': 'Order not found'}

    def simulate_order_execution(self, order_id, new_status='FILLED'):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞"""
        if order_id in self.orders:
            self.orders[order_id]['status'] = new_status
            return True
        return False

    def simulate_position_change(self, symbol, new_size=None, new_pnl=None):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        if symbol in self.positions:
            if new_size is not None:
                self.positions[symbol]['positionAmt'] = str(new_size)
            if new_pnl is not None:
                self.positions[symbol]['unRealizedProfit'] = str(new_pnl)
            return True
        return False

    def simulate_position_close(self, symbol):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        if symbol in self.positions:
            del self.positions[symbol]
            return True
        return False

class MockLogger:
    def __init__(self):
        self.events = []
        self.trades = []
        self.config = SimpleNamespace(telegram_enabled=False)

    def log_event(self, component, level, message, details=None):
        self.events.append({
            'component': component,
            'level': level,
            'message': message,
            'details': details,
            'timestamp': datetime.now().isoformat()
        })
        print(f"[{level}] {component}: {message}")

    def log_trade(self, symbol, side, entry_price, exit_price, qty, pnl, win, fees):
        self.trades.append({
            'symbol': symbol,
            'side': side,
            'entry_price': entry_price,
            'exit_price': exit_price,
            'qty': qty,
            'pnl': pnl,
            'win': win,
            'fees': fees,
            'timestamp': datetime.now().isoformat()
        })
        print(f"üí∞ Trade: {symbol} {side} {qty} @ {entry_price} -> {exit_price} (PnL: ${pnl:.2f})")

async def test_synchronization_scenarios():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Ä–¥–µ—Ä–æ–≤")
    print("=" * 70)

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = SimpleNamespace(
        sl_percent=0.012,
        step_tp_levels=[0.004, 0.008, 0.012],
        step_tp_sizes=[0.5, 0.3, 0.2],
        max_position_duration=3600,
        max_concurrent_positions=3,
        min_trade_qty=0.001,
        telegram_enabled=False,
        max_hold_minutes=30,
        soft_exit_minutes=15,
        auto_profit_threshold=0.7,
        weak_position_minutes=45,
        risky_loss_threshold=-1.5,
        emergency_stop_threshold=-2.0,
        trailing_stop_drawdown=0.3
    )

    exchange = MockExchangeClient()
    logger = MockLogger()

    order_manager = OrderManager(config, exchange, logger)
    await order_manager.initialize()

    # –¢–µ—Å—Ç 1: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
    print("\nüìã –¢–µ—Å—Ç 1: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏")

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
    result = await order_manager.place_position_with_tp_sl(
        symbol="BTCUSDC_SYNC",
        side="BUY",
        quantity=0.001,
        entry_price=50000.0,
        leverage=5
    )

    print(f"  –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {result['success']}")
    print(f"  –ü–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ: {len(order_manager.active_positions)}")
    print(f"  –ü–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ: {len(exchange.positions)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    await order_manager.sync_positions_from_exchange()
    print(f"  –ü–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ: {len(order_manager.active_positions)}")

    # –¢–µ—Å—Ç 2: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ TP –æ—Ä–¥–µ—Ä–∞
    print("\nüìã –¢–µ—Å—Ç 2: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ TP –æ—Ä–¥–µ—Ä–∞")

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ TP –æ—Ä–¥–µ—Ä–∞
    if "BTCUSDC_SYNC" in order_manager.tp_orders:
        tp_order = order_manager.tp_orders["BTCUSDC_SYNC"][0]
        print(f"  TP –æ—Ä–¥–µ—Ä –¥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {tp_order}")
        print(f"  –ü–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ –¥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {len(order_manager.active_positions)}")

        exchange.simulate_order_execution(tp_order['order_id'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
        await order_manager.check_order_executions()

        print(f"  TP –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {tp_order['order_id']}")
        print(f"  –ü–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {len(order_manager.active_positions)}")
        print(f"  –ü–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ: {len(exchange.positions)}")

    # –¢–µ—Å—Ç 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ SL –æ—Ä–¥–µ—Ä–∞
    print("\nüìã –¢–µ—Å—Ç 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ SL –æ—Ä–¥–µ—Ä–∞")

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞ SL
    await order_manager.place_position_with_tp_sl(
        symbol="ETHUSDC_SL",
        side="SELL",
        quantity=0.01,
        entry_price=3000.0,
        leverage=5
    )

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ SL –æ—Ä–¥–µ—Ä–∞
    if "ETHUSDC_SL" in order_manager.sl_orders:
        sl_order = order_manager.sl_orders["ETHUSDC_SL"]
        print(f"  SL –æ—Ä–¥–µ—Ä –¥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {sl_order}")
        print(f"  –ü–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ –¥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {len(order_manager.active_positions)}")

        exchange.simulate_order_execution(sl_order['order_id'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
        await order_manager.check_order_executions()

        print(f"  SL –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {sl_order['order_id']}")
        print(f"  –ü–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {len(order_manager.active_positions)}")
        print(f"  –ü–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ: {len(exchange.positions)}")

    # –¢–µ—Å—Ç 4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ
    print("\nüìã –¢–µ—Å—Ç 4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ")

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
    await order_manager.place_position_with_tp_sl(
        symbol="ADAUSDC_CHANGE",
        side="BUY",
        quantity=100,
        entry_price=0.5,
        leverage=5
    )

    print(f"  –î–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è - –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ: {len(order_manager.active_positions)}")
    print(f"  –î–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è - –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ: {len(exchange.positions)}")
    print(f"  –ü–æ–∑–∏—Ü–∏—è ADAUSDC_CHANGE –≤ –±–æ—Ç–µ: {order_manager.active_positions.get('ADAUSDC_CHANGE', '–ù–ï –ù–ê–ô–î–ï–ù–ê')}")

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ)
    exchange.simulate_position_change("ADAUSDC_CHANGE", new_size=50, new_pnl=25.0)

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
    await order_manager.sync_positions_from_exchange()

    print(f"  –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è - –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ: {len(order_manager.active_positions)}")
    print(f"  –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è - –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ: {len(exchange.positions)}")
    print(f"  –ü–æ–∑–∏—Ü–∏—è ADAUSDC_CHANGE –≤ –±–æ—Ç–µ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {order_manager.active_positions.get('ADAUSDC_CHANGE', '–ù–ï –ù–ê–ô–î–ï–ù–ê')}")

    # –¢–µ—Å—Ç 5: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ
    print("\nüìã –¢–µ—Å—Ç 5: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ")

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
    await order_manager.place_position_with_tp_sl(
        symbol="DOTUSDC_CLOSE",
        side="BUY",
        quantity=10,
        entry_price=7.0,
        leverage=5
    )

    print(f"  –î–æ –∑–∞–∫—Ä—ã—Ç–∏—è - –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ: {len(order_manager.active_positions)}")
    print(f"  –î–æ –∑–∞–∫—Ä—ã—Ç–∏—è - –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ: {len(exchange.positions)}")
    print(f"  –ü–æ–∑–∏—Ü–∏—è DOTUSDC_CLOSE –≤ –±–æ—Ç–µ: {'–ù–ê–ô–î–ï–ù–ê' if 'DOTUSDC_CLOSE' in order_manager.active_positions else '–ù–ï –ù–ê–ô–î–ï–ù–ê'}")

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ
    exchange.simulate_position_close("DOTUSDC_CLOSE")

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
    await order_manager.sync_positions_from_exchange()

    print(f"  –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è - –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ: {len(order_manager.active_positions)}")
    print(f"  –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è - –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ: {len(exchange.positions)}")
    print(f"  –ü–æ–∑–∏—Ü–∏—è DOTUSDC_CLOSE –≤ –±–æ—Ç–µ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {'–ù–ê–ô–î–ï–ù–ê' if 'DOTUSDC_CLOSE' in order_manager.active_positions else '–ù–ï –ù–ê–ô–î–ï–ù–ê'}")

    # –¢–µ—Å—Ç 6: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ—è
    print("\nüìã –¢–µ—Å—Ç 6: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ—è")

    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ
    exchange.positions["BTCUSDC_RECOVERY"] = {
        'symbol': 'BTCUSDC_RECOVERY',
        'positionAmt': '0.002',
        'entryPrice': '48000.0',
        'unRealizedProfit': '-40.0',
        'side': 'BUY'
    }

    print(f"  –ü–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º: {len(exchange.positions)}")
    print(f"  –ü–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º: {len(order_manager.active_positions)}")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π OrderManager (—Å–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
    new_order_manager = OrderManager(config, exchange, logger)
    await new_order_manager.initialize()

    print(f"  –ü–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è - –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ: {len(new_order_manager.active_positions)}")
    print(f"  –ü–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è - –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ: {len(exchange.positions)}")
    print(f"  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {list(new_order_manager.active_positions.keys())}")

    # –¢–µ—Å—Ç 7: –û—á–∏—Å—Ç–∫–∞ –≤–∏—Å—è—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤
    print("\nüìã –¢–µ—Å—Ç 7: –û—á–∏—Å—Ç–∫–∞ –≤–∏—Å—è—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤")

    # –°–æ–∑–¥–∞–µ–º –≤–∏—Å—è—â–∏–π –æ—Ä–¥–µ—Ä
    hanging_order = {
        'orderId': 999,
        'symbol': 'BTCUSDC_HANGING',
        'side': 'BUY',
        'quantity': 0.001,
        'type': 'LIMIT',
        'status': 'NEW',
        'price': 50000.0,
        'time': int((time.time() - 400) * 1000)  # 400 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥
    }
    exchange.orders[999] = hanging_order

    print(f"  –î–æ –æ—á–∏—Å—Ç–∫–∏ - –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ: {len(exchange.orders)}")
    print(f"  –í–∏—Å—è—â–∏–π –æ—Ä–¥–µ—Ä: {hanging_order}")

    # –û—á–∏—â–∞–µ–º –≤–∏—Å—è—â–∏–µ –æ—Ä–¥–µ—Ä–∞
    await order_manager.cleanup_hanging_orders()

    print(f"  –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ - –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ: {len(exchange.orders)}")
    print(f"  –°—Ç–∞—Ç—É—Å –≤–∏—Å—è—â–µ–≥–æ –æ—Ä–¥–µ—Ä–∞: {exchange.orders.get(999, {}).get('status', '–ù–ï –ù–ê–ô–î–ï–ù')}")

    # –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π
    print("\nüìã –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
    monitor_task = asyncio.create_task(order_manager.monitor_positions())

    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await asyncio.sleep(2)

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    order_manager.shutdown_requested = True
    await asyncio.sleep(1)

    if not monitor_task.done():
        monitor_task.cancel()
        try:
            await monitor_task
        except asyncio.CancelledError:
            pass

    print(f"  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–µ: {len(order_manager.active_positions)}")
    print(f"  –ü–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ: {len(exchange.positions)}")

    # –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
    sync_events = [e for e in logger.events if 'sync' in e['message'].lower() or 'position' in e['message'].lower()]
    for event in sync_events[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π
        print(f"  {event['level']}: {event['message']}")

    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(logger.events)}")

async def main():
    try:
        await test_synchronization_scenarios()
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
