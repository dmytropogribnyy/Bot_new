#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç BinanceBot v2 –ø–æ—Å–ª–µ –∞—É–¥–∏—Ç–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))


async def test_optimized_components():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

    try:
        from core.config import TradingConfig
        from core.monitoring import PerformanceMonitor
        from core.unified_logger import UnifiedLogger
        from strategies.tp_optimizer import TPOptimizer
        from utils.performance import PerformanceOptimizer
        from utils.validators import ConfigValidator, OrderValidator

        config = TradingConfig.from_file()
        logger = UnifiedLogger(config)

        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
        order_validator = OrderValidator(config)
        config_validator = ConfigValidator()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        is_valid, message = config_validator.validate_runtime_config(config.__dict__)
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞: {is_valid}")

        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–∞
        is_valid, message = order_validator.validate_order_params("BTCUSDC", "BUY", 0.001)
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–∞: {is_valid}")

        # –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        import numpy as np

        prices = np.array([100, 101, 102, 103, 104, 105, 106, 107, 108, 109])
        rsi = PerformanceOptimizer.calculate_rsi_fast(prices)
        print(f"‚úÖ RSI —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: {rsi[-1]:.2f}")

        # –¢–µ—Å—Ç TP –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        tp_optimizer = TPOptimizer(config, logger)
        print("‚úÖ TP Optimizer —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitor = PerformanceMonitor(config, logger)
        print("‚úÖ Performance Monitor —Å–æ–∑–¥–∞–Ω")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        return False


async def test_leverage_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ leverage manager"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Leverage Manager...")

    try:
        from core.config import TradingConfig
        from core.leverage_manager import LeverageManager
        from core.unified_logger import UnifiedLogger

        config = TradingConfig.from_file()
        logger = UnifiedLogger(config)
        leverage_manager = LeverageManager(config, logger)

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ leverage
        optimal_leverage = leverage_manager.get_optimal_leverage("BTCUSDC")
        print(f"‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π leverage –¥–ª—è BTC: {optimal_leverage}x")

        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        stats = {"win_rate": 0.65, "avg_drawdown_percent": 0.8, "sl_hit_rate": 0.3}

        suggestion = leverage_manager.analyze_performance_and_suggest("BTCUSDC", stats)
        print(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ leverage: {suggestion}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Leverage Manager: {e}")
        return False


async def test_telegram_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Telegram"""
    print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")

    try:
        from core.config import TradingConfig
        from telegram.command_handlers import CommandHandlers
        from telegram.telegram_bot import TelegramBot

        config = TradingConfig.from_file()

        # –°–æ–∑–¥–∞–µ–º Telegram –±–æ—Ç
        telegram_bot = TelegramBot(config.telegram_token)
        print("‚úÖ Telegram –±–æ—Ç —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã
        command_handlers = CommandHandlers(None, None, None, None, config)
        print("‚úÖ Command handlers —Å–æ–∑–¥–∞–Ω—ã")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


async def test_performance_targets():
    """–¢–µ—Å—Ç —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π...")

    try:
        from core.config import TradingConfig

        config = TradingConfig.from_file()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º runtime config –Ω–∞–ø—Ä—è–º—É—é
        import json

        with open("data/runtime_config.json") as f:
            runtime_config = json.load(f)

        targets = runtime_config.get("performance_targets", {})

        print(f"‚úÖ –¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –≤ —á–∞—Å: ${targets.get('min_hourly_profit_usd', 2.0)}")
        print(f"‚úÖ –¶–µ–ª–µ–≤–æ–π win rate: {targets.get('target_win_rate', 0.55):.1%}")
        print(f"‚úÖ –ú–∏–Ω–∏–º—É–º —Å–¥–µ–ª–æ–∫ –≤ —á–∞—Å: {targets.get('min_trades_per_hour', 3)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ 250-350 USD
        base_risk = config.base_risk_pct
        max_positions = config.max_concurrent_positions
        sl_percent = config.sl_percent

        print(f"‚úÖ –ë–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫: {base_risk:.1%}")
        print(f"‚úÖ –ú–∞–∫—Å –ø–æ–∑–∏—Ü–∏–π: {max_positions}")
        print(f"‚úÖ Stop Loss: {sl_percent:.1%}")

        # –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –ø—Ä–∏–±—ã–ª–∏
        expected_hourly_profit = (base_risk * 0.6 * max_positions * 2) * 100  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        print(f"‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å –≤ —á–∞—Å: ${expected_hourly_profit:.2f}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {e}")
        return False


async def test_architecture_completeness():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    print("\nüèóÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")

    required_components = [
        "core/config.py",
        "core/exchange_client.py",
        "core/trading_engine.py",
        "core/risk_manager.py",
        "core/unified_logger.py",
        "core/rate_limiter.py",
        "core/monitoring.py",
        "core/leverage_manager.py",
        "core/symbol_manager.py",
        "strategies/base_strategy.py",
        "strategies/scalping_v1.py",
        "strategies/symbol_selector.py",
        "strategies/tp_optimizer.py",
        "utils/validators.py",
        "utils/performance.py",
        "utils/helpers.py",
        "telegram/telegram_bot.py",
        "telegram/command_handlers.py",
        "data/leverage_map.json",
        "data/runtime_config.json",
    ]

    missing_components = []

    for component in required_components:
        if not Path(component).exists():
            missing_components.append(component)
        else:
            print(f"‚úÖ {component}")

    if missing_components:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {missing_components}")
        return False
    else:
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç"""
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏—Ç BinanceBot v2")
    print("=" * 60)

    tests = [
        test_architecture_completeness,
        test_optimized_components,
        test_leverage_integration,
        test_telegram_integration,
        test_performance_targets,
    ]

    results = []
    for test in tests:
        try:
            result = await test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            results.append(False)

    print("\n" + "=" * 60)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞:")

    passed = sum(results)
    total = len(results)

    for i, result in enumerate(results):
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   –¢–µ—Å—Ç {i+1}: {status}")

    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üöÄ BinanceBot v2 –≥–æ—Ç–æ–≤ –∫ production –∑–∞–ø—É—Å–∫—É!")
        print("\nüìã Deployment Checklist:")
        print("‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ OptiFlow HFT")
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        print("‚úÖ Leverage Manager –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        print("‚úÖ Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("‚úÖ –¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ 250-350 USD")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return False


if __name__ == "__main__":
    asyncio.run(main())
