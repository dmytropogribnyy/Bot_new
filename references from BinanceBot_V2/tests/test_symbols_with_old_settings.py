#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞
"""

import ccxt
import os
from dotenv import load_dotenv
import json

load_dotenv()

def test_symbols_with_old_settings():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""

    exchange = ccxt.binance({
        'apiKey': os.getenv('BINANCE_API_KEY'),
        'secret': os.getenv('BINANCE_API_SECRET'),
        'sandbox': False,
        'options': {
            'defaultType': 'future',
        }
    })

    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞...")
    print("=" * 60)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞
    FILTER_TIERS = [
        {"atr": 0.0006, "volume": 5000},
        {"atr": 0.0007, "volume": 3000},
        {"atr": 0.0008, "volume": 2000},
        {"atr": 0.0009, "volume": 1000}
    ]

    try:
        markets = exchange.load_markets()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ USDT —Ñ—å—é—á–µ—Ä—Å—ã
        usdt_futures = {symbol: market for symbol, market in markets.items()
                       if market['quote'] == 'USDT' and market['future']}

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ USDT —Ñ—å—é—á–µ—Ä—Å–æ–≤: {len(usdt_futures)}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
        passed_symbols = []

        for symbol in list(usdt_futures.keys())[:10]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10
            try:
                ticker = exchange.fetch_ticker(symbol)
                volume = ticker['quoteVolume']

                # –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ATR
                ohlcv = exchange.fetch_ohlcv(symbol, '15m', limit=20)
                if len(ohlcv) < 20:
                    print(f"   ‚ö†Ô∏è {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                    continue

                # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç ATR
                highs = [candle[2] for candle in ohlcv]
                lows = [candle[3] for candle in ohlcv]
                closes = [candle[4] for candle in ohlcv]

                # ATR (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
                tr_values = []
                for i in range(1, len(ohlcv)):
                    high_low = highs[i] - lows[i]
                    high_close = abs(highs[i] - closes[i-1])
                    low_close = abs(lows[i] - closes[i-1])
                    tr = max(high_low, high_close, low_close)
                    tr_values.append(tr)

                atr = sum(tr_values) / len(tr_values) if tr_values else 0
                atr_percent = (atr / ticker['last']) * 100

                print(f"   üìä {symbol}:")
                print(f"      ‚Ä¢ –û–±—ä–µ–º: ${volume:,.0f}")
                print(f"      ‚Ä¢ ATR: {atr_percent:.4f}%")
                print(f"      ‚Ä¢ –¶–µ–Ω–∞: ${ticker['last']:.4f}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                passed_tier = None
                for tier in FILTER_TIERS:
                    if volume >= tier['volume'] and atr_percent >= tier['atr']:
                        passed_tier = tier
                        break

                if passed_tier:
                    print(f"      ‚úÖ –ü–†–û–®–ï–õ —Ñ–∏–ª—å—Ç—Ä: ATR‚â•{passed_tier['atr']}% / VOL‚â•${passed_tier['volume']:,.0f}")
                    passed_symbols.append({
                        'symbol': symbol,
                        'volume': volume,
                        'atr_percent': atr_percent,
                        'price': ticker['last'],
                        'tier': passed_tier
                    })
                else:
                    print(f"      ‚ùå –ù–ï –ü–†–û–®–ï–õ —Ñ–∏–ª—å—Ç—Ä—ã")

            except Exception as e:
                print(f"   ‚ùå {symbol}: –û—à–∏–±–∫–∞ - {e}")

        print(f"\n" + "=" * 60)
        print(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: 10 —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   ‚Ä¢ –ü—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã: {len(passed_symbols)} —Å–∏–º–≤–æ–ª–æ–≤")

        if passed_symbols:
            print(f"\n‚úÖ –ü–û–î–•–û–î–Ø–©–ò–ï –°–ò–ú–í–û–õ–´:")
            for symbol_info in passed_symbols:
                print(f"   ‚Ä¢ {symbol_info['symbol']}: ${symbol_info['volume']:,.0f} / {symbol_info['atr_percent']:.4f}%")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if len(passed_symbols) >= 5:
            print(f"   ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ - –Ω–∞–π–¥–µ–Ω–æ {len(passed_symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
        elif len(passed_symbols) >= 2:
            print(f"   ‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–µ–º–ª–µ–º—ã–µ - –Ω–∞–π–¥–µ–Ω–æ {len(passed_symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print(f"   ‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ - –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(passed_symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—ä–µ–º—É –∏–ª–∏ ATR")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    test_symbols_with_old_settings()
