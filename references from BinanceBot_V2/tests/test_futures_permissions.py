#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ Futures API
"""

import asyncio
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.config import TradingConfig


async def test_futures_permissions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Futures API"""
    try:
        print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ Futures API...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = TradingConfig.load_optimized_for_profit_target(0.7)

        import ccxt

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∏—Ä–∂–∏
        exchange = ccxt.binance({
            'apiKey': config.api_key,
            'secret': config.api_secret,
            'sandbox': getattr(config, 'use_testnet', False),
            'enableRateLimit': True,
            'options': {
                'defaultType': 'future',
            }
        })

        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        endpoints_to_test = [
            ("–ü—É–±–ª–∏—á–Ω—ã–π API - Ticker", lambda: exchange.fetch_ticker('BTC/USDT')),
            ("–ü—É–±–ª–∏—á–Ω—ã–π API - OHLCV", lambda: exchange.fetch_ohlcv('BTC/USDT', '1h', limit=1)),
            ("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π API - –ë–∞–ª–∞–Ω—Å", lambda: exchange.fetch_balance()),
            ("Futures API - –ü–æ–∑–∏—Ü–∏–∏ (fetch_positions)", lambda: exchange.fetch_positions()),
            ("Futures API - –ü–æ–∑–∏—Ü–∏–∏ (fapiPrivateGetPositionRisk)", lambda: exchange.fapiPrivateGetPositionRisk()),
            ("Futures API - –ê–∫–∫–∞—É–Ω—Ç (fapiPrivateGetAccount)", lambda: exchange.fapiPrivateGetAccount()),
            ("Futures API - –î–æ—Ö–æ–¥—ã (fapiPrivateGetIncome)", lambda: exchange.fapiPrivateGetIncome({'limit': 1})),
            ("Futures API - –°–¥–µ–ª–∫–∏ (fapiPrivateGetUserTrades)", lambda: exchange.fapiPrivateGetUserTrades({'limit': 1})),
        ]

        for name, test_func in endpoints_to_test:
            try:
                print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {name}")
                result = test_func()
                if isinstance(result, list):
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: –ø–æ–ª—É—á–µ–Ω–æ {len(result)} –∑–∞–ø–∏—Å–µ–π")
                elif isinstance(result, dict):
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: –ø–æ–ª—É—á–µ–Ω –æ–±—ä–µ–∫—Ç —Å {len(result)} –ø–æ–ª—è–º–∏")
                else:
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {type(result).__name__}")

            except Exception as e:
                error_msg = str(e)
                if "404" in error_msg:
                    print("‚ùå 404 Not Found - —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                elif "403" in error_msg:
                    print("‚ùå 403 Forbidden - –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                elif "401" in error_msg:
                    print("‚ùå 401 Unauthorized - –Ω–µ–≤–µ—Ä–Ω—ã–µ –∫–ª—é—á–∏")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {error_msg[:100]}...")

        print("\nüìã –†–ï–ó–Æ–ú–ï:")
        print("‚úÖ –ï—Å–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–µ API —Ä–∞–±–æ—Ç–∞—é—Ç - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ")
        print("‚úÖ –ï—Å–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ API —Ä–∞–±–æ—Ç–∞—é—Ç - –∫–ª—é—á–∏ –≤–∞–ª–∏–¥–Ω—ã–µ")
        print("‚ùå –ï—Å–ª–∏ Futures API –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç - –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ Futures")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_futures_permissions())
