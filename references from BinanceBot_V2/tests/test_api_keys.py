#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API –∫–ª—é—á–µ–π Binance
"""

import asyncio
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.config import TradingConfig
from core.unified_logger import UnifiedLogger


async def test_api_keys():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∫–ª—é—á–∏"""
    try:
        print("üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–µ–π Binance...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = TradingConfig.load_optimized_for_profit_target(0.7)

        print("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   ‚Ä¢ API Key: {config.api_key[:10]}...")
        print(f"   ‚Ä¢ API Secret: {config.api_secret[:10]}...")
        print(f"   ‚Ä¢ Exchange Mode: {config.exchange_mode}")
        print(f"   ‚Ä¢ Use Testnet: {getattr(config, 'use_testnet', False)}")

        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
        logger = UnifiedLogger(config)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance
        print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance...")

        try:
            import ccxt

            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∏—Ä–∂–∏
            exchange = ccxt.binance({
                'apiKey': config.api_key,
                'secret': config.api_secret,
                'sandbox': getattr(config, 'use_testnet', False),
                'enableRateLimit': True,
                'options': {
                    'defaultType': 'future',
                }
            })

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∫–ª—é—á–µ–π)
            print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API...")
            ticker = exchange.fetch_ticker('BTC/USDT')
            print(f"‚úÖ BTC/USDT —Ü–µ–Ω–∞: ${ticker['last']}")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π API
            print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API...")
            balance = exchange.fetch_balance()
            print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: {len(balance['total'])} –∞–∫—Ç–∏–≤–æ–≤")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–∫—Ç–∏–≤—ã
            usdt_balance = balance['total'].get('USDT', 0)
            btc_balance = balance['total'].get('BTC', 0)
            print(f"   ‚Ä¢ USDT: {usdt_balance}")
            print(f"   ‚Ä¢ BTC: {btc_balance}")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º Futures API
            print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Futures API...")
            positions = exchange.fetch_positions()
            print(f"‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã: {len(positions)} –ø–æ–∑–∏—Ü–∏–π")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            open_positions = [p for p in positions if float(p['contracts']) > 0]
            print(f"   ‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(open_positions)}")

            for pos in open_positions[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   ‚Ä¢ {pos['symbol']}: {pos['contracts']} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")

            print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_api_keys())
