#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–∞ 3 –º–∏–Ω—É—Ç—ã
"""

import asyncio
import time

from core.config import TradingConfig
from core.exchange_client import ExchangeClient
from core.ip_monitor import IPMonitor
from core.unified_logger import UnifiedLogger


async def test_logging_and_real_run():
    """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""

    print("üß™ –¢–ï–°–¢ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –ò –†–ï–ê–õ–¨–ù–û–ì–û –ó–ê–ü–£–°–ö–ê")
    print("=" * 50)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = TradingConfig()
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
    logger = UnifiedLogger(config)
    print("‚úÖ –õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.log_event("TEST", "INFO", "üß™ –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - INFO —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.log_event("TEST", "WARNING", "‚ö†Ô∏è –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - WARNING —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.log_event("TEST", "ERROR", "‚ùå –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - ERROR —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.log_event("TRADE", "INFO", "üí∞ –¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    logger.log_event("SIGNAL", "INFO", "üì° –¢–µ—Å—Ç —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")

    # Exchange Client
    exchange = ExchangeClient(config, logger)
    print("‚úÖ Exchange Client —Å–æ–∑–¥–∞–Ω")

    # IP Monitor
    ip_monitor = IPMonitor(logger)
    print("‚úÖ IP Monitor —Å–æ–∑–¥–∞–Ω")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if await exchange.initialize():
        logger.log_event("SYSTEM", "INFO", "üöÄ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await exchange.get_balance()
        available = await exchange.get_available_balance()
        logger.log_event("BALANCE", "INFO", f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} USDC")
        logger.log_event("BALANCE", "INFO", f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: {available:.2f} USDC")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º IP
        current_ip = await ip_monitor.get_current_ip()
        logger.log_event("IP_MONITOR", "INFO", f"üåê IP –∞–¥—Ä–µ—Å: {current_ip}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        positions = await exchange.get_positions()
        logger.log_event("POSITIONS", "INFO", f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–¥–µ—Ä–∞
        orders = await exchange.get_open_orders()
        logger.log_event("ORDERS", "INFO", f"üìã –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(orders)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª—ã
        symbols = await exchange.get_usdc_symbols()
        logger.log_event("SYMBOLS", "INFO", f"üéØ USDC —Å–∏–º–≤–æ–ª–æ–≤: {len(symbols)}")

        print("\nüéâ –¢–ï–°–¢ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù!")
        print("üí° –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ 3 –º–∏–Ω—É—Ç—ã...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ 3 –º–∏–Ω—É—Ç—ã
        await real_trading_test(exchange, logger, config)

        return True
    else:
        logger.log_event("SYSTEM", "ERROR", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∏—Ä–∂–µ")
        return False

async def real_trading_test(exchange, logger, config):
    """–†–µ–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ç–µ—Å—Ç –Ω–∞ 3 –º–∏–Ω—É—Ç—ã"""

    logger.log_event("REAL_TEST", "INFO", "üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–∞ 3 –º–∏–Ω—É—Ç—ã")

    start_time = time.time()
    test_duration = 180  # 3 –º–∏–Ω—É—Ç—ã

    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç —Ç–µ—Å—Ç–∞
    logger.log_event("REAL_TEST", "INFO", "‚è∞ –¢–µ—Å—Ç –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è 3 –º–∏–Ω—É—Ç—ã")
    logger.log_event("REAL_TEST", "INFO", "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–∫–∞ –∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")

    # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    cycle_count = 0
    while time.time() - start_time < test_duration:
        cycle_count += 1
        elapsed = time.time() - start_time

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ü–∏–∫–ª
        logger.log_event("TRADING_CYCLE", "INFO", f"üîÑ –¶–∏–∫–ª #{cycle_count} (–ø—Ä–æ—à–ª–æ {elapsed:.1f}s)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        if cycle_count % 6 == 0:  # –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (5 —Å–µ–∫—É–Ω–¥ * 6)
            balance = await exchange.get_balance()
            available = await exchange.get_available_balance()
            logger.log_event("BALANCE_CHECK", "INFO", f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} USDC, –î–æ—Å—Ç—É–ø–Ω–æ: {available:.2f} USDC")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        if cycle_count % 12 == 0:  # –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
            positions = await exchange.get_positions()
            logger.log_event("POSITION_CHECK", "INFO", f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")

        # –°–∏–º—É–ª—è—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        if cycle_count % 10 == 0:  # –∫–∞–∂–¥—ã–µ 50 —Å–µ–∫—É–Ω–¥
            logger.log_event("SIGNAL", "INFO", "üì° –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
            logger.log_event("SIGNAL", "INFO", "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–Ω–¥–æ–≤...")

        await asyncio.sleep(5)  # 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    total_time = time.time() - start_time
    logger.log_event("REAL_TEST", "INFO", f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
    logger.log_event("REAL_TEST", "INFO", f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {cycle_count}")

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    final_balance = await exchange.get_balance()
    final_available = await exchange.get_available_balance()
    final_positions = await exchange.get_positions()

    logger.log_event("FINAL_CHECK", "INFO", f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {final_balance:.2f} USDC")
    logger.log_event("FINAL_CHECK", "INFO", f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω–æ: {final_available:.2f} USDC")
    logger.log_event("FINAL_CHECK", "INFO", f"üìä –§–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(final_positions)}")

    logger.log_event("REAL_TEST", "SUCCESS", "üéâ –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    try:
        result = asyncio.run(test_logging_and_real_run())
        if result:
            print("\n‚úÖ –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏ —Ñ–∞–π–ª–∞—Ö")
        else:
            print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
