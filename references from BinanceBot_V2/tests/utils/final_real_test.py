#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ Telegram
"""

import asyncio
import time

from core.config import TradingConfig
from core.exchange_client import ExchangeClient
from core.ip_monitor import IPMonitor
from core.unified_logger import UnifiedLogger
from telegram.telegram_bot import TelegramBot


async def final_real_test():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""

    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢")
    print("=" * 50)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = TradingConfig()
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
    logger = UnifiedLogger(config)
    print("‚úÖ –õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # Telegram Bot
    telegram_bot = TelegramBot(config.telegram_token)
    logger.attach_telegram(telegram_bot)
    print("‚úÖ Telegram Bot –ø–æ–¥–∫–ª—é—á–µ–Ω")

    # Exchange Client
    exchange = ExchangeClient(config, logger)
    print("‚úÖ Exchange Client —Å–æ–∑–¥–∞–Ω")

    # IP Monitor
    ip_monitor = IPMonitor(logger)
    print("‚úÖ IP Monitor —Å–æ–∑–¥–∞–Ω")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if await exchange.initialize():
        logger.log_event("SYSTEM", "INFO", "üöÄ OptiFlow HFT Bot –∑–∞–ø—É—â–µ–Ω!")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        await telegram_bot.send_notification("üöÄ OptiFlow HFT Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await exchange.get_balance()
        available = await exchange.get_available_balance()
        logger.log_event("BALANCE", "INFO", f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} USDC")
        logger.log_event("BALANCE", "INFO", f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: {available:.2f} USDC")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ Telegram
        await telegram_bot.send_notification(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} USDC\nüí∞ –î–æ—Å—Ç—É–ø–Ω–æ: {available:.2f} USDC")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º IP
        current_ip = await ip_monitor.get_current_ip()
        logger.log_event("IP_MONITOR", "INFO", f"üåê IP –∞–¥—Ä–µ—Å: {current_ip}")
        await telegram_bot.send_notification(f"üåê IP –∞–¥—Ä–µ—Å: {current_ip}\n‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: OK")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        positions = await exchange.get_positions()
        logger.log_event("POSITIONS", "INFO", f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–¥–µ—Ä–∞
        orders = await exchange.get_open_orders()
        logger.log_event("ORDERS", "INFO", f"üìã –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(orders)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª—ã
        symbols = await exchange.get_usdc_symbols()
        logger.log_event("SYMBOLS", "INFO", f"üéØ USDC —Å–∏–º–≤–æ–ª–æ–≤: {len(symbols)}")

        print("\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê!")
        print("üí° –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ç–µ—Å—Ç –Ω–∞ 3 –º–∏–Ω—É—Ç—ã...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ç–µ—Å—Ç
        await real_trading_cycle(exchange, logger, telegram_bot, config)

        return True
    else:
        logger.log_event("SYSTEM", "ERROR", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∏—Ä–∂–µ")
        await telegram_bot.send_notification("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ!")
        return False

async def real_trading_cycle(exchange, logger, telegram_bot, config):
    """–†–µ–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –Ω–∞ 3 –º–∏–Ω—É—Ç—ã"""

    logger.log_event("REAL_TRADING", "INFO", "üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –Ω–∞ 3 –º–∏–Ω—É—Ç—ã")
    await telegram_bot.send_notification("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –Ω–∞ 3 –º–∏–Ω—É—Ç—ã")

    start_time = time.time()
    test_duration = 180  # 3 –º–∏–Ω—É—Ç—ã

    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç
    logger.log_event("REAL_TRADING", "INFO", "‚è∞ –¢–µ—Å—Ç –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è 3 –º–∏–Ω—É—Ç—ã")
    logger.log_event("REAL_TRADING", "INFO", "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–∫–∞ –∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")

    # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    cycle_count = 0
    while time.time() - start_time < test_duration:
        cycle_count += 1
        elapsed = time.time() - start_time

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ü–∏–∫–ª
        logger.log_event("TRADING_CYCLE", "INFO", f"üîÑ –¶–∏–∫–ª #{cycle_count} (–ø—Ä–æ—à–ª–æ {elapsed:.1f}s)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        if cycle_count % 6 == 0:  # –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            balance = await exchange.get_balance()
            available = await exchange.get_available_balance()
            logger.log_event("BALANCE_CHECK", "INFO", f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} USDC, –î–æ—Å—Ç—É–ø–Ω–æ: {available:.2f} USDC")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        if cycle_count % 12 == 0:  # –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
            positions = await exchange.get_positions()
            logger.log_event("POSITION_CHECK", "INFO", f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")

        # –°–∏–º—É–ª—è—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 50 —Å–µ–∫—É–Ω–¥
        if cycle_count % 10 == 0:
            logger.log_event("SIGNAL", "INFO", "üì° –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
            logger.log_event("SIGNAL", "INFO", "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–Ω–¥–æ–≤...")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∫–∞–∂–¥—ã–µ 50 —Å–µ–∫—É–Ω–¥
            await telegram_bot.send_notification(f"üì° –¶–∏–∫–ª #{cycle_count}: –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤...")

        await asyncio.sleep(5)  # 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    total_time = time.time() - start_time
    logger.log_event("REAL_TRADING", "INFO", f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
    logger.log_event("REAL_TRADING", "INFO", f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {cycle_count}")

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    final_balance = await exchange.get_balance()
    final_available = await exchange.get_available_balance()
    final_positions = await exchange.get_positions()

    logger.log_event("FINAL_CHECK", "INFO", f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {final_balance:.2f} USDC")
    logger.log_event("FINAL_CHECK", "INFO", f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω–æ: {final_available:.2f} USDC")
    logger.log_event("FINAL_CHECK", "INFO", f"üìä –§–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(final_positions)}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Telegram
    final_report = f"""
üéâ –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!

‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_time:.1f} —Å–µ–∫—É–Ω–¥
üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {cycle_count}
üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {final_balance:.2f} USDC
üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω–æ: {final_available:.2f} USDC
üìä –§–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(final_positions)}

‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!
"""

    await telegram_bot.send_notification(final_report)
    logger.log_event("REAL_TRADING", "SUCCESS", "üéâ –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    try:
        result = asyncio.run(final_real_test())
        if result:
            print("\n‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏ Telegram")
        else:
            print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
