#!/usr/bin/env python3
"""
Signal Handler –¥–ª—è BinanceBot_V2
–û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl-C –∏ graceful shutdown
"""

import asyncio
import signal
import sys
from collections.abc import Callable
from typing import Any

from core.unified_logger import UnifiedLogger


class SignalHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""

    def __init__(self, logger: UnifiedLogger):
        self.logger = logger
        self.shutdown_callback: Callable | None = None
        self.emergency_callback: Callable | None = None

        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.shutdown_requested = False
        self.emergency_requested = False

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._handle_sigint)
        signal.signal(signal.SIGTERM, self._handle_sigterm)

        # –î–ª—è Windows
        if hasattr(signal, "SIGBREAK"):
            signal.signal(signal.SIGBREAK, self._handle_sigbreak)

    def set_callbacks(self, shutdown_callback: Callable, emergency_callback: Callable):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback —Ñ—É–Ω–∫—Ü–∏–π"""
        self.shutdown_callback = shutdown_callback
        self.emergency_callback = emergency_callback

    def _handle_sigint(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl-C (SIGINT)"""
        if self.shutdown_requested:
            # –í—Ç–æ—Ä–æ–π Ctrl-C - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
            self.logger.log_event(
                "SIGNAL_HANDLER", "CRITICAL", "Second Ctrl-C detected - Emergency shutdown!"
            )
            self.emergency_requested = True
            if self.emergency_callback:
                asyncio.create_task(self.emergency_callback())
            sys.exit(1)
        else:
            # –ü–µ—Ä–≤—ã–π Ctrl-C - graceful shutdown
            self.logger.log_event(
                "SIGNAL_HANDLER", "WARNING", "Ctrl-C detected - Graceful shutdown requested"
            )
            self.shutdown_requested = True
            if self.shutdown_callback:
                asyncio.create_task(self.shutdown_callback())

    def _handle_sigterm(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ SIGTERM"""
        self.logger.log_event("SIGNAL_HANDLER", "WARNING", "SIGTERM received - Graceful shutdown")
        self.shutdown_requested = True
        if self.shutdown_callback:
            asyncio.create_task(self.shutdown_callback())

    def _handle_sigbreak(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ SIGBREAK (Windows)"""
        self.logger.log_event("SIGNAL_HANDLER", "WARNING", "SIGBREAK received - Graceful shutdown")
        self.shutdown_requested = True
        if self.shutdown_callback:
            asyncio.create_task(self.shutdown_callback())

    def is_shutdown_requested(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ shutdown"""
        return self.shutdown_requested

    def is_emergency_requested(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ emergency shutdown"""
        return self.emergency_requested

    def reset(self):
        """–°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        self.shutdown_requested = False
        self.emergency_requested = False


class GracefulShutdown:
    """–°–∏—Å—Ç–µ–º–∞ graceful shutdown –¥–ª—è –±–æ—Ç–∞"""

    def __init__(self, logger: UnifiedLogger, order_manager, trading_engine, telegram_bot=None):
        self.logger = logger
        self.order_manager = order_manager
        self.trading_engine = trading_engine
        self.telegram_bot = telegram_bot

        self.signal_handler = SignalHandler(logger)
        self.signal_handler.set_callbacks(self.graceful_shutdown, self.emergency_shutdown)

        self.shutdown_in_progress = False

    async def graceful_shutdown(self):
        """Graceful shutdown - –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        if self.shutdown_in_progress:
            return

        self.shutdown_in_progress = True
        self.logger.log_event("SHUTDOWN", "WARNING", "Graceful shutdown initiated")

        try:
            # 1. –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
            self.trading_engine.pause_trading()

            # 2. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            active_positions = self.order_manager.get_active_positions()

            if not active_positions:
                self.logger.log_event("SHUTDOWN", "INFO", "No active positions, shutdown complete")
                await self._finalize_shutdown()
                return

            # 3. –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram
            if self.telegram_bot:
                await self.telegram_bot.send_message(
                    f"üîÑ Graceful shutdown initiated. Waiting for {len(active_positions)} positions to close..."
                )

            # 4. –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π (–º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç)
            timeout = 300  # 5 –º–∏–Ω—É—Ç
            start_time = asyncio.get_event_loop().time()

            while active_positions and (asyncio.get_event_loop().time() - start_time) < timeout:
                await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                active_positions = self.order_manager.get_active_positions()

                if active_positions:
                    self.logger.log_event(
                        "SHUTDOWN",
                        "INFO",
                        f"Waiting for {len(active_positions)} positions to close...",
                    )

            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            remaining_positions = self.order_manager.get_active_positions()

            if remaining_positions:
                self.logger.log_event(
                    "SHUTDOWN",
                    "WARNING",
                    f"Timeout reached, {len(remaining_positions)} positions still active",
                )

                if self.telegram_bot:
                    await self.telegram_bot.send_message(
                        f"‚ö†Ô∏è Timeout reached, {len(remaining_positions)} positions still active. "
                        "Use /shutdown for emergency close."
                    )

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ emergency shutdown
                await self.emergency_shutdown()
            else:
                self.logger.log_event("SHUTDOWN", "INFO", "All positions closed successfully")

                if self.telegram_bot:
                    await self.telegram_bot.send_message("‚úÖ Graceful shutdown completed")

                await self._finalize_shutdown()

        except Exception as e:
            self.logger.log_event("SHUTDOWN", "ERROR", f"Graceful shutdown failed: {e}")
            await self.emergency_shutdown()

    async def emergency_shutdown(self):
        """Emergency shutdown - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if self.shutdown_in_progress:
            return

        self.shutdown_in_progress = True
        self.logger.log_event("SHUTDOWN", "CRITICAL", "Emergency shutdown initiated")

        try:
            # 1. –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram
            if self.telegram_bot:
                await self.telegram_bot.send_message("üö® Emergency shutdown initiated!")

            # 2. –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
            self.trading_engine.pause_trading()

            # 3. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
            active_positions = self.order_manager.get_active_positions()
            closed_count = 0

            for position in active_positions:
                try:
                    result = await self.order_manager.close_position_emergency(position["symbol"])
                    if result["success"]:
                        closed_count += 1
                        self.logger.log_event(
                            "SHUTDOWN", "INFO", f"Emergency closed position: {position['symbol']}"
                        )
                    else:
                        self.logger.log_event(
                            "SHUTDOWN",
                            "ERROR",
                            f"Failed to close position {position['symbol']}: {result.get('error')}",
                        )
                except Exception as e:
                    self.logger.log_event(
                        "SHUTDOWN", "ERROR", f"Error closing position {position['symbol']}: {e}"
                    )

            # 4. –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            total_positions = len(active_positions)
            self.logger.log_event(
                "SHUTDOWN",
                "INFO",
                f"Emergency shutdown completed: {closed_count}/{total_positions} positions closed",
            )

            if self.telegram_bot:
                await self.telegram_bot.send_message(
                    f"üö® Emergency shutdown completed: {closed_count}/{total_positions} positions closed"
                )

            await self._finalize_shutdown()

        except Exception as e:
            self.logger.log_event("SHUTDOWN", "ERROR", f"Emergency shutdown failed: {e}")
            await self._finalize_shutdown()

    async def _finalize_shutdown(self):
        """–§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ shutdown"""
        try:
            # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OrderManager
            await self.order_manager.shutdown(
                emergency=self.signal_handler.is_emergency_requested()
            )

            # 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TradingEngine
            self.trading_engine.stop_trading()

            # 3. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
            if self.telegram_bot:
                await self.telegram_bot.stop()

            # 4. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.logger.log_event("SHUTDOWN", "INFO", "Bot shutdown completed")

            # 5. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
            sys.exit(0)

        except Exception as e:
            self.logger.log_event("SHUTDOWN", "ERROR", f"Finalization failed: {e}")
            sys.exit(1)

    def get_status(self) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ shutdown"""
        return {
            "shutdown_in_progress": self.shutdown_in_progress,
            "shutdown_requested": self.signal_handler.is_shutdown_requested(),
            "emergency_requested": self.signal_handler.is_emergency_requested(),
            "active_positions": len(self.order_manager.get_active_positions()),
        }
