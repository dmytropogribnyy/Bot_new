#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Symbol Manager - –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import random
from typing import Any

from core.config import TradingConfig
from core.exchange_client import OptimizedExchangeClient
from core.unified_logger import UnifiedLogger


class SymbolManager:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""

    def __init__(self, config: TradingConfig, logger: UnifiedLogger):
        self.config = config
        self.logger = logger
        self.exchange = None
        self.active_symbols = []
        self.symbol_rotation_time = 0
        self.rotation_interval = 3600  # 1 —á–∞—Å

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤"""
        self.logger.log_event("SYMBOL_MANAGER", "INFO", "üöÄ Symbol Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def set_exchange(self, exchange: OptimizedExchangeClient):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ exchange client"""
        self.exchange = exchange

    async def get_active_symbols(self) -> list[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
            current_time = asyncio.get_event_loop().time()
            if (
                not self.active_symbols
                or current_time - self.symbol_rotation_time > self.rotation_interval
            ):
                await self._update_active_symbols()
                self.symbol_rotation_time = current_time

            return self.active_symbols

        except Exception as e:
            self.logger.log_event(
                "SYMBOL_MANAGER", "ERROR", f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {e}"
            )
            return []

    async def _update_active_symbols(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        try:
            if not self.exchange:
                self.logger.log_event("SYMBOL_MANAGER", "ERROR", "Exchange client –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ USDC —Å–∏–º–≤–æ–ª—ã
            all_symbols = await self.exchange.get_usdc_symbols()

            if not all_symbols:
                self.logger.log_event("SYMBOL_MANAGER", "WARNING", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª—ã")
                return

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –ø–æ –æ–±—ä–µ–º—É –∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            filtered_symbols = await self._filter_symbols_by_volume(all_symbols)

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
            max_symbols = min(self.config.max_concurrent_positions * 2, len(filtered_symbols))
            selected_symbols = random.sample(
                filtered_symbols, min(max_symbols, len(filtered_symbols))
            )

            self.active_symbols = selected_symbols

            self.logger.log_event(
                "SYMBOL_MANAGER",
                "INFO",
                f"–û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤: {len(self.active_symbols)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–∑ {len(all_symbols)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö",
            )

        except Exception as e:
            self.logger.log_event("SYMBOL_MANAGER", "ERROR", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤: {e}")

    async def _filter_symbols_by_volume(self, symbols: list[str]) -> list[str]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤"""
        try:
            filtered_symbols = []
            min_volume_usdc = getattr(
                self.config, "min_volume_24h_usdc", 5000000.0
            )  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç

            for symbol in symbols[:50]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 50 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                try:
                    ticker = await self.exchange.get_ticker(symbol)
                    if ticker and ticker.get("quoteVolume", 0) > min_volume_usdc:
                        filtered_symbols.append(symbol)
                except Exception as e:
                    self.logger.log_event(
                        "SYMBOL_MANAGER", "DEBUG", f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞ {symbol}: {e}"
                    )
                    continue

            self.logger.log_event(
                "SYMBOL_MANAGER",
                "INFO",
                f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {len(symbols)} –ø–æ –æ–±—ä–µ–º—É",
            )

            return filtered_symbols

        except Exception as e:
            self.logger.log_event("SYMBOL_MANAGER", "ERROR", f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return symbols[:20]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å

    def get_symbol_info(self, symbol: str) -> dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ"""
        return {
            "symbol": symbol,
            "active": symbol in self.active_symbols,
            "rotation_time": self.symbol_rotation_time,
        }

    async def force_symbol_rotation(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤"""
        self.symbol_rotation_time = 0
        await self._update_active_symbols()
        self.logger.log_event("SYMBOL_MANAGER", "INFO", "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
