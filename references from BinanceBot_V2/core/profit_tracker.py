#!/usr/bin/env python3
"""
Profit Tracker –¥–ª—è BinanceBot_V2
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""

import asyncio
import time
from collections import deque
from datetime import datetime
from typing import Any

from core.unified_logger import UnifiedLogger


class ProfitTracker:
    """üöÄ –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è $2/—á–∞—Å —Ü–µ–ª–∏"""

    def __init__(self, config, logger: UnifiedLogger | None = None):
        self.config = config
        self.logger = logger

        # –¶–µ–ª–∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        self.profit_target_hourly = getattr(config, "profit_target_hourly", 0.7)
        self.profit_target_daily = getattr(config, "profit_target_daily", 16.8)
        self.min_win_rate = getattr(config, "min_win_rate", 0.65)
        self.max_daily_loss = getattr(config, "max_daily_loss", 20.0)

        # –¢—Ä–µ–∫–∏–Ω–≥ —Å–¥–µ–ª–æ–∫
        self.trades_history = deque(maxlen=1000)
        self.hourly_profits = deque(maxlen=24)
        self.daily_profits = deque(maxlen=30)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.current_hour_profit = 0.0
        self.current_day_profit = 0.0
        self.total_trades = 0
        self.winning_trades = 0
        self.losing_trades = 0

        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.aggression_level = 1.0  # 1.0 = –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π, 1.5 = –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π, 0.7 = –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π
        self.position_size_multiplier = 1.0
        self.tp_target_multiplier = 1.0

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.last_hour_check = time.time()
        self.last_day_check = time.time()
        self.is_running = False

        # Callbacks –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        self.adjustment_callbacks = []

    async def start_tracking(self):
        """–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏"""
        self.is_running = True
        self.logger.log_event(
            "PROFIT_TRACKER",
            "INFO",
            f"üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏. –¶–µ–ª—å: ${self.profit_target_hourly}/—á–∞—Å",
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        asyncio.create_task(self._profit_monitoring_loop())

    async def stop_tracking(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        self.is_running = False
        self.logger.log_event("PROFIT_TRACKER", "INFO", "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏")

    async def _profit_monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏"""
        while self.is_running:
            try:
                current_time = time.time()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
                if current_time - self.last_hour_check >= 3600:
                    await self._check_hourly_performance()
                    self.last_hour_check = current_time

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
                if current_time - self.last_day_check >= 86400:
                    await self._check_daily_performance()
                    self.last_day_check = current_time

                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

            except Exception as e:
                self.logger.log_event("PROFIT_TRACKER", "ERROR", f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60)

    async def record_trade(
        self,
        symbol: str,
        side: str,
        entry_price: float,
        exit_price: float,
        quantity: float,
        pnl: float,
        duration_seconds: float,
    ):
        """–ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏"""
        trade_data = {
            "timestamp": datetime.now().isoformat(),
            "symbol": symbol,
            "side": side,
            "entry_price": entry_price,
            "exit_price": exit_price,
            "quantity": quantity,
            "pnl": pnl,
            "duration_seconds": duration_seconds,
            "hour": datetime.now().hour,
            "day": datetime.now().date().isoformat(),
        }

        self.trades_history.append(trade_data)
        self.total_trades += 1

        if pnl > 0:
            self.winning_trades += 1
        else:
            self.losing_trades += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏–±—ã–ª—å
        self.current_hour_profit += pnl
        self.current_day_profit += pnl

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É
        win_rate = self.winning_trades / max(self.total_trades, 1)
        self.logger.log_event(
            "PROFIT_TRACKER",
            "INFO",
            f"üí∞ –°–¥–µ–ª–∫–∞ {symbol}: {pnl:.2f} USDC | –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1%} | "
            f"–ß–∞—Å: ${self.current_hour_profit:.2f} | –î–µ–Ω—å: ${self.current_day_profit:.2f}",
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        await self._check_performance_and_adjust()

    async def _check_hourly_performance(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å–æ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        target_hourly = self.profit_target_hourly
        current_hourly = self.current_hour_profit

        self.hourly_profits.append(current_hourly)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if current_hourly < target_hourly * 0.5:  # –ú–µ–Ω—å—à–µ 50% –æ—Ç —Ü–µ–ª–∏
            await self._increase_aggression()
        elif current_hourly > target_hourly * 1.5:  # –ë–æ–ª—å—à–µ 150% –æ—Ç —Ü–µ–ª–∏
            await self._reduce_risk()
        elif current_hourly >= target_hourly:
            self.logger.log_event(
                "PROFIT_TRACKER",
                "SUCCESS",
                f"üéØ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! ${current_hourly:.2f}/—á–∞—Å (—Ü–µ–ª—å: ${target_hourly})",
            )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —á–∞—Å–∞
        self.current_hour_profit = 0.0

    async def _check_daily_performance(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        target_daily = self.profit_target_daily
        current_daily = self.current_day_profit

        self.daily_profits.append(current_daily)

        if current_daily < target_daily * 0.3:  # –ú–µ–Ω—å—à–µ 30% –æ—Ç –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏
            await self._emergency_adjustment()
        elif current_daily >= target_daily:
            self.logger.log_event(
                "PROFIT_TRACKER",
                "SUCCESS",
                f"üéØ –î–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! ${current_daily:.2f}/–¥–µ–Ω—å (—Ü–µ–ª—å: ${target_daily})",
            )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–Ω—è
        self.current_day_profit = 0.0

    async def _check_performance_and_adjust(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞"""
        win_rate = self.winning_trades / max(self.total_trades, 1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–Ω—Ä–µ–π—Ç
        if win_rate < self.min_win_rate and self.total_trades >= 10:
            await self._improve_win_rate()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏
        if self.current_day_profit < -self.max_daily_loss:
            await self._emergency_stop()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å–æ–≤—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        if self.total_trades >= 5:  # –ú–∏–Ω–∏–º—É–º 5 —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if self.current_hour_profit < self.profit_target_hourly * 0.5:
                await self._increase_aggression()
            elif self.current_hour_profit > self.profit_target_hourly * 1.5:
                await self._reduce_risk()

    async def _increase_aggression(self):
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.aggression_level = min(self.aggression_level * 1.2, 2.0)
        self.position_size_multiplier = min(self.position_size_multiplier * 1.1, 1.5)
        self.tp_target_multiplier = max(self.tp_target_multiplier * 0.9, 0.7)

        self.logger.log_event(
            "PROFIT_TRACKER",
            "WARNING",
            f"üìà –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å: —É—Ä–æ–≤–µ–Ω—å {self.aggression_level:.2f}",
        )

        # –í—ã–∑—ã–≤–∞–µ–º callbacks
        for callback in self.adjustment_callbacks:
            try:
                await callback(
                    "increase_aggression",
                    {
                        "aggression_level": self.aggression_level,
                        "position_size_multiplier": self.position_size_multiplier,
                        "tp_target_multiplier": self.tp_target_multiplier,
                    },
                )
            except Exception as e:
                self.logger.log_event("PROFIT_TRACKER", "ERROR", f"Callback error: {e}")

    async def _reduce_risk(self):
        """–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞"""
        self.aggression_level = max(self.aggression_level * 0.9, 0.5)
        self.position_size_multiplier = max(self.position_size_multiplier * 0.9, 0.7)
        self.tp_target_multiplier = min(self.tp_target_multiplier * 1.1, 1.3)

        self.logger.log_event(
            "PROFIT_TRACKER", "INFO", f"üìâ –°–Ω–∏–∂–∞–µ–º —Ä–∏—Å–∫: —É—Ä–æ–≤–µ–Ω—å {self.aggression_level:.2f}"
        )

        # –í—ã–∑—ã–≤–∞–µ–º callbacks
        for callback in self.adjustment_callbacks:
            try:
                await callback(
                    "reduce_risk",
                    {
                        "aggression_level": self.aggression_level,
                        "position_size_multiplier": self.position_size_multiplier,
                        "tp_target_multiplier": self.tp_target_multiplier,
                    },
                )
            except Exception as e:
                self.logger.log_event("PROFIT_TRACKER", "ERROR", f"Callback error: {e}")

    async def _improve_win_rate(self):
        """–£–ª—É—á—à–µ–Ω–∏–µ –≤–∏–Ω—Ä–µ–π—Ç–∞"""
        self.aggression_level = max(self.aggression_level * 0.8, 0.5)
        self.tp_target_multiplier = min(self.tp_target_multiplier * 1.2, 1.5)

        self.logger.log_event(
            "PROFIT_TRACKER",
            "WARNING",
            f"üéØ –£–ª—É—á—à–∞–µ–º –≤–∏–Ω—Ä–µ–π—Ç: —Å–Ω–∏–∂–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å –¥–æ {self.aggression_level:.2f}",
        )

    async def _emergency_adjustment(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –ø–ª–æ—Ö–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.aggression_level = 0.5
        self.position_size_multiplier = 0.5
        self.tp_target_multiplier = 1.5

        self.logger.log_event(
            "PROFIT_TRACKER", "CRITICAL", "üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê: –°–Ω–∏–∂–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
        )

    async def _emergency_stop(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å"""
        self.logger.log_event(
            "PROFIT_TRACKER",
            "CRITICAL",
            f"üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê: –î–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ ${self.current_day_profit:.2f} –ø—Ä–µ–≤—ã—à–∞—é—Ç –ª–∏–º–∏—Ç ${self.max_daily_loss}",
        )

        # –í—ã–∑—ã–≤–∞–µ–º callbacks –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        for callback in self.adjustment_callbacks:
            try:
                await callback("emergency_stop", {"daily_loss": self.current_day_profit})
            except Exception as e:
                self.logger.log_event("PROFIT_TRACKER", "ERROR", f"Emergency callback error: {e}")

    def add_adjustment_callback(self, callback):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏"""
        self.adjustment_callbacks.append(callback)

    def get_profit_stats(self) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏"""
        win_rate = self.winning_trades / max(self.total_trades, 1)
        avg_hourly = sum(self.hourly_profits) / max(len(self.hourly_profits), 1)
        avg_daily = sum(self.daily_profits) / max(len(self.daily_profits), 1)

        return {
            "current_hour_profit": self.current_hour_profit,
            "current_day_profit": self.current_day_profit,
            "total_trades": self.total_trades,
            "winning_trades": self.winning_trades,
            "losing_trades": self.losing_trades,
            "win_rate": win_rate,
            "avg_hourly_profit": avg_hourly,
            "avg_daily_profit": avg_daily,
            "aggression_level": self.aggression_level,
            "position_size_multiplier": self.position_size_multiplier,
            "tp_target_multiplier": self.tp_target_multiplier,
            "profit_target_hourly": self.profit_target_hourly,
            "profit_target_daily": self.profit_target_daily,
        }

    def get_performance_summary(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        stats = self.get_profit_stats()

        return (
            f"üí∞ –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å: ${stats['current_hour_profit']:.2f}/—á–∞—Å | "
            f"${stats['current_day_profit']:.2f}/–¥–µ–Ω—å | "
            f"–í–∏–Ω—Ä–µ–π—Ç: {stats['win_rate']:.1%} | "
            f"–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å: {stats['aggression_level']:.2f}"
        )

    async def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ record_trade
        pass
