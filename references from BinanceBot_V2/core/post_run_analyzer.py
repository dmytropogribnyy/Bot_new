# Import Windows compatibility error handling
import asyncio
import json
import sqlite3
from dataclasses import dataclass
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any

import pandas as pd

import core.windows_compatibility
from core.metrics_aggregator import MetricsAggregator


@dataclass
class AnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""

    period_hours: int
    total_trades: int
    total_pnl: float
    win_rate: float
    avg_pnl: float
    max_profit: float
    max_loss: float
    profit_factor: float
    sharpe_ratio: float
    max_drawdown: float
    best_symbol: str | None
    worst_symbol: str | None
    errors_count: int
    warnings_count: int
    recommendations: list[str]
    performance_score: float


class PostRunAnalyzer:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"""

    def __init__(self, logger, config):
        self.logger = logger
        self.config = config
        self.db_path = Path(config.db_path)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MetricsAggregator –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
        self.metrics_aggregator = MetricsAggregator(config, logger)

    async def analyze_trading_session(self, hours: int = 24) -> AnalysisResult:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        # Skip analysis on Windows due to compatibility issues
        if core.windows_compatibility.IS_WINDOWS:
            self.logger.log_event("POST_RUN_ANALYZER", "INFO", "Analysis disabled for Windows")
            return self._empty_analysis_result(hours)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            events_data = await self._get_events_data(hours)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º MetricsAggregator –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
            period_map = {"1h": "1h", "4h": "4h", "24h": "1d", "1d": "1d"}
            period = period_map.get(f"{hours}h", "1d")

            trading_metrics = await self.metrics_aggregator.get_trading_metrics(period)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            error_analysis = self._analyze_errors(events_data)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = self._generate_recommendations(trading_metrics, error_analysis)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π score
            performance_score = self._calculate_performance_score(trading_metrics, error_analysis)

            return AnalysisResult(
                period_hours=hours,
                total_trades=trading_metrics.total_trades,
                total_pnl=trading_metrics.total_pnl,
                win_rate=trading_metrics.win_rate,
                avg_pnl=trading_metrics.avg_pnl,
                max_profit=trading_metrics.max_profit,
                max_loss=trading_metrics.max_loss,
                profit_factor=trading_metrics.profit_factor,
                sharpe_ratio=trading_metrics.sharpe_ratio,
                max_drawdown=trading_metrics.max_drawdown,
                best_symbol=trading_metrics.best_symbol,
                worst_symbol=trading_metrics.worst_symbol,
                errors_count=error_analysis["errors_count"],
                warnings_count=error_analysis["warnings_count"],
                recommendations=recommendations,
                performance_score=performance_score,
            )

        except Exception as e:
            self.logger.log_event("POST_RUN_ANALYZER", "ERROR", f"Analysis failed: {e}")
            return self._empty_analysis_result(hours)

    async def _get_trades_data(self, hours: int) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö"""
        since = datetime.utcnow() - timedelta(hours=hours)

        try:
            with sqlite3.connect(self.db_path) as conn:
                query = """
                    SELECT symbol, side, qty, entry_price, pnl, win, timestamp
                    FROM trades
                    WHERE timestamp >= ?
                    ORDER BY timestamp DESC
                """
                df = pd.read_sql_query(query, conn, params=(since.isoformat(),))
            return df
        except Exception as e:
            # Handle Windows compatibility errors
            if core.windows_compatibility.is_windows_compatibility_error(str(e)):
                self.logger.log_event(
                    "POST_RUN_ANALYZER", "INFO", "Analysis data retrieved (Windows compatibility)"
                )
            else:
                self.logger.log_event(
                    "POST_RUN_ANALYZER", "ERROR", f"Failed to get trades data: {e}"
                )
            return pd.DataFrame()

    async def _get_events_data(self, hours: int) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö"""
        since = datetime.utcnow() - timedelta(hours=hours)

        try:
            with sqlite3.connect(self.db_path) as conn:
                query = """
                    SELECT level, component, message, details, timestamp
                    FROM events
                    WHERE timestamp >= ?
                    ORDER BY timestamp DESC
                """
                df = pd.read_sql_query(query, conn, params=(since.isoformat(),))
            return df
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ Windows compatibility
            if "warnings" in str(e) or "maxsize" in str(e) or "builtin_module_names" in str(e):
                self.logger.log_event(
                    "POST_RUN_ANALYZER", "INFO", "Events data retrieved (Windows compatibility)"
                )
            else:
                self.logger.log_event(
                    "POST_RUN_ANALYZER", "ERROR", f"Failed to get events data: {e}"
                )
            return pd.DataFrame()

    def _calculate_metrics(self, trades_df: pd.DataFrame) -> dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        if trades_df.empty:
            return self._empty_metrics()

        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_trades = len(trades_df)
        winning_trades = len(trades_df[trades_df["pnl"] > 0])
        losing_trades = len(trades_df[trades_df["pnl"] < 0])
        win_rate = winning_trades / total_trades if total_trades > 0 else 0

        # PnL –º–µ—Ç—Ä–∏–∫–∏
        total_pnl = trades_df["pnl"].sum()
        avg_pnl = trades_df["pnl"].mean()
        max_profit = trades_df["pnl"].max()
        max_loss = trades_df["pnl"].min()

        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        profit_factor = self._calculate_profit_factor(trades_df)
        sharpe_ratio = self._calculate_sharpe_ratio(trades_df)
        max_drawdown = self._calculate_max_drawdown(trades_df)

        # –õ—É—á—à–∏–µ/—Ö—É–¥—à–∏–µ —Å–∏–º–≤–æ–ª—ã
        symbol_pnl = trades_df.groupby("symbol")["pnl"].sum()
        best_symbol = symbol_pnl.idxmax() if not symbol_pnl.empty else None
        worst_symbol = symbol_pnl.idxmin() if not symbol_pnl.empty else None

        return {
            "total_trades": total_trades,
            "winning_trades": winning_trades,
            "losing_trades": losing_trades,
            "win_rate": win_rate,
            "total_pnl": total_pnl,
            "avg_pnl": avg_pnl,
            "max_profit": max_profit,
            "max_loss": max_loss,
            "profit_factor": profit_factor,
            "sharpe_ratio": sharpe_ratio,
            "max_drawdown": max_drawdown,
            "best_symbol": best_symbol,
            "worst_symbol": worst_symbol,
        }

    def _analyze_errors(self, events_df: pd.DataFrame) -> dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        if events_df.empty:
            return {"errors_count": 0, "warnings_count": 0, "error_types": {}}

        errors_df = events_df[events_df["level"].isin(["ERROR", "CRITICAL"])]
        warnings_df = events_df[events_df["level"] == "WARNING"]

        error_types = errors_df["component"].value_counts().to_dict()

        return {
            "errors_count": len(errors_df),
            "warnings_count": len(warnings_df),
            "error_types": error_types,
        }

    def _generate_recommendations(
        self, metrics: dict[str, Any], error_analysis: dict[str, Any]
    ) -> list[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        recommendations = []

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        if metrics["total_pnl"] < 0:
            recommendations.append("üî¥ –û–±—â–∏–π PnL –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π - –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")

        if metrics["win_rate"] < 0.5:
            recommendations.append("üìâ –ù–∏–∑–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç - —É–ª—É—á—à–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–æ–≤")

        if metrics["profit_factor"] < 1.2:
            recommendations.append("‚öñÔ∏è –ù–∏–∑–∫–∏–π profit factor - –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç")

        if metrics["max_drawdown"] > 10:
            recommendations.append("üìâ –í—ã—Å–æ–∫–∏–π drawdown - —É–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π")

        # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
        if error_analysis["errors_count"] > 5:
            recommendations.append("‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã")

        if error_analysis["warnings_count"] > 10:
            recommendations.append("‚ö†Ô∏è –ú–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π - –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ª–æ–≥–∏–∫—É")

        # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã
        if metrics["win_rate"] > 0.7:
            recommendations.append("‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –≤–∏–Ω—Ä–µ–π—Ç - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ")

        if metrics["profit_factor"] > 2.0:
            recommendations.append("‚úÖ –í—ã—Å–æ–∫–∏–π profit factor - –æ—Ç–ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")

        if metrics["total_pnl"] > 0 and metrics["total_trades"] > 10:
            recommendations.append("‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è - –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ")

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        for rec in recommendations:
            self.logger.log_analysis_recommendation(rec)

        return recommendations

    def _calculate_performance_score(
        self, metrics: dict[str, Any], error_analysis: dict[str, Any]
    ) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π score –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (0-100)"""
        score = 0

        # –ë–∞–∑–æ–≤—ã–π score –∑–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å (40 –±–∞–ª–ª–æ–≤)
        if metrics["total_pnl"] > 0:
            score += min(40, metrics["total_pnl"] * 10)  # –î–æ 40 –±–∞–ª–ª–æ–≤ –∑–∞ –ø—Ä–∏–±—ã–ª—å

        # Score –∑–∞ –≤–∏–Ω—Ä–µ–π—Ç (20 –±–∞–ª–ª–æ–≤)
        score += metrics["win_rate"] * 20

        # Score –∑–∞ profit factor (20 –±–∞–ª–ª–æ–≤)
        if metrics["profit_factor"] > 0:
            score += min(20, metrics["profit_factor"] * 10)

        # –®—Ç—Ä–∞—Ñ –∑–∞ –æ—à–∏–±–∫–∏ (–¥–æ -20 –±–∞–ª–ª–æ–≤)
        error_penalty = min(20, error_analysis["errors_count"] * 2)
        score -= error_penalty

        # –®—Ç—Ä–∞—Ñ –∑–∞ drawdown (–¥–æ -10 –±–∞–ª–ª–æ–≤)
        drawdown_penalty = min(10, metrics["max_drawdown"] / 2)
        score -= drawdown_penalty

        return max(0, min(100, score))

    def _calculate_profit_factor(self, trades_df: pd.DataFrame) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç profit factor"""
        if trades_df.empty:
            return 0

        gross_profit = trades_df[trades_df["pnl"] > 0]["pnl"].sum()
        gross_loss = abs(trades_df[trades_df["pnl"] < 0]["pnl"].sum())

        return gross_profit / gross_loss if gross_loss > 0 else float("inf")

    def _calculate_sharpe_ratio(self, trades_df: pd.DataFrame) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç Sharpe ratio"""
        if trades_df.empty or len(trades_df) < 2:
            return 0

        returns = trades_df["pnl"].pct_change().dropna()
        if len(returns) == 0:
            return 0

        return returns.mean() / returns.std() if returns.std() > 0 else 0

    def _calculate_max_drawdown(self, trades_df: pd.DataFrame) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π drawdown"""
        if trades_df.empty:
            return 0

        cumulative = trades_df["pnl"].cumsum()
        running_max = cumulative.expanding().max()
        drawdown = (cumulative - running_max) / running_max * 100

        return abs(drawdown.min()) if len(drawdown) > 0 else 0

    def _empty_metrics(self) -> dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        return {
            "total_trades": 0,
            "winning_trades": 0,
            "losing_trades": 0,
            "win_rate": 0,
            "total_pnl": 0,
            "avg_pnl": 0,
            "max_profit": 0,
            "max_loss": 0,
            "profit_factor": 0,
            "sharpe_ratio": 0,
            "max_drawdown": 0,
            "best_symbol": None,
            "worst_symbol": None,
        }

    def _empty_analysis_result(self, hours: int) -> AnalysisResult:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞"""
        return AnalysisResult(
            period_hours=hours,
            total_trades=0,
            total_pnl=0,
            win_rate=0,
            avg_pnl=0,
            max_profit=0,
            max_loss=0,
            profit_factor=0,
            sharpe_ratio=0,
            max_drawdown=0,
            best_symbol=None,
            worst_symbol=None,
            errors_count=0,
            warnings_count=0,
            recommendations=["üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"],
            performance_score=0,
        )

    def generate_console_report(self, result: AnalysisResult) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        report = f"""
{"=" * 60}
üéØ –ü–û–°–¢-–ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–û–ô –°–ï–°–°–ò–ò ({result.period_hours}—á)
{"=" * 60}

üìä –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
‚Ä¢ –°–¥–µ–ª–æ–∫: {result.total_trades}
‚Ä¢ PnL: ${result.total_pnl:.2f}
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {result.win_rate:.1%}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL: ${result.avg_pnl:.2f}
‚Ä¢ –ú–∞–∫—Å. –ø—Ä–∏–±—ã–ª—å: ${result.max_profit:.2f}
‚Ä¢ –ú–∞–∫—Å. —É–±—ã—Ç–æ–∫: ${result.max_loss:.2f}

üìà –ü–†–û–î–í–ò–ù–£–¢–´–ï –ú–ï–¢–†–ò–ö–ò:
‚Ä¢ Profit Factor: {result.profit_factor:.2f}
‚Ä¢ Sharpe Ratio: {result.sharpe_ratio:.2f}
‚Ä¢ Max Drawdown: {result.max_drawdown:.1f}%

üèÜ –õ–£–ß–®–ò–ï/–•–£–î–®–ò–ï –°–ò–ú–í–û–õ–´:
‚Ä¢ –õ—É—á—à–∏–π: {result.best_symbol or "N/A"}
‚Ä¢ –•—É–¥—à–∏–π: {result.worst_symbol or "N/A"}

‚ö†Ô∏è –°–ò–°–¢–ï–ú–ù–´–ï –°–û–ë–´–¢–ò–Ø:
‚Ä¢ –û—à–∏–±–æ–∫: {result.errors_count}
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {result.warnings_count}

üéØ –û–ë–©–ò–ô SCORE: {result.performance_score:.1f}/100

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
"""

        for rec in result.recommendations:
            report += f"‚Ä¢ {rec}\n"

        report += f"\n{'=' * 60}"

        return report

    def save_analysis_report(self, result: AnalysisResult, filename: str = None) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–∞–π–ª"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"analysis_report_{result.period_hours}h_{timestamp}.json"

        report_path = Path("data/analysis_reports") / filename
        report_path.parent.mkdir(exist_ok=True)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON
        report_data = {
            "timestamp": datetime.now().isoformat(),
            "period_hours": result.period_hours,
            "total_trades": result.total_trades,
            "total_pnl": result.total_pnl,
            "win_rate": result.win_rate,
            "avg_pnl": result.avg_pnl,
            "max_profit": result.max_profit,
            "max_loss": result.max_loss,
            "profit_factor": result.profit_factor,
            "sharpe_ratio": result.sharpe_ratio,
            "max_drawdown": result.max_drawdown,
            "best_symbol": result.best_symbol,
            "worst_symbol": result.worst_symbol,
            "errors_count": result.errors_count,
            "warnings_count": result.warnings_count,
            "recommendations": result.recommendations,
            "performance_score": result.performance_score,
        }

        with open(report_path, "w", encoding="utf-8") as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        asyncio.create_task(self._cleanup_old_reports())

        return str(report_path)

    async def _cleanup_old_reports(self, days_to_keep: int = 30):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
        try:
            data_dir = Path("data")
            analysis_reports_dir = Path("data/analysis_reports")
            if not data_dir.exists():
                return

            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤
            report_files = list(analysis_reports_dir.glob("analysis_report_*.json"))
            report_files.extend(list(data_dir.glob("final_analysis_*.txt")))

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π
            cutoff_date = datetime.now() - timedelta(days=days_to_keep)
            files_to_delete = []

            for file_path in report_files:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    file_date_str = file_path.stem.split("_")[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –∏–º–µ–Ω–∏
                    if len(file_date_str) >= 8:  # YYYYMMDD
                        file_date = datetime.strptime(file_date_str[:8], "%Y%m%d")
                        if file_date < cutoff_date:
                            files_to_delete.append(file_path)
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    if file_path.stat().st_mtime < cutoff_date.timestamp():
                        files_to_delete.append(file_path)

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
            deleted_count = 0
            for file_path in files_to_delete:
                try:
                    file_path.unlink()
                    deleted_count += 1
                except Exception as e:
                    self.logger.log_event(
                        "POST_RUN_ANALYZER",
                        "WARNING",
                        f"Failed to delete old report {file_path}: {e}",
                    )

            if deleted_count > 0:
                self.logger.log_event(
                    "POST_RUN_ANALYZER",
                    "INFO",
                    f"Cleaned up {deleted_count} old report files (older than {days_to_keep} days)",
                )

        except Exception as e:
            self.logger.log_event(
                "POST_RUN_ANALYZER", "ERROR", f"Failed to cleanup old reports: {e}"
            )

    def get_reports_info(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö"""
        try:
            data_dir = Path("data")
            analysis_reports_dir = Path("data/analysis_reports")
            if not data_dir.exists():
                return {"total_reports": 0, "reports": []}

            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤
            json_reports = list(analysis_reports_dir.glob("analysis_report_*.json"))
            txt_reports = list(data_dir.glob("final_analysis_*.txt"))
            all_reports = json_reports + txt_reports

            reports_info = []
            total_size_mb = 0

            for file_path in all_reports:
                try:
                    stat = file_path.stat()
                    size_mb = stat.st_size / (1024 * 1024)
                    total_size_mb += size_mb

                    reports_info.append(
                        {
                            "filename": file_path.name,
                            "size_mb": round(size_mb, 2),
                            "modified": datetime.fromtimestamp(stat.st_mtime).strftime(
                                "%Y-%m-%d %H:%M:%S"
                            ),
                            "type": "json" if file_path.suffix == ".json" else "txt",
                        }
                    )
                except Exception as e:
                    self.logger.log_event(
                        "POST_RUN_ANALYZER", "WARNING", f"Failed to get info for {file_path}: {e}"
                    )

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            reports_info.sort(key=lambda x: x["modified"], reverse=True)

            return {
                "total_reports": len(reports_info),
                "total_size_mb": round(total_size_mb, 2),
                "reports": reports_info[:10],  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            }

        except Exception as e:
            self.logger.log_event("POST_RUN_ANALYZER", "ERROR", f"Failed to get reports info: {e}")
            return {"total_reports": 0, "reports": []}

    async def analyze_performance_loop(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        while True:
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                result = await self.analyze_trading_session(hours=24)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
                console_report = self.generate_console_report(result)

                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                self.logger.log_event(
                    "POST_RUN_ANALYZER",
                    "INFO",
                    f"Performance Analysis ({result.period_hours}h): "
                    f"Trades: {result.total_trades}, PnL: ${result.total_pnl:.2f}, "
                    f"Win Rate: {result.win_rate:.1%}, Score: {result.performance_score:.1f}/100",
                )

                # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
                print(console_report)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
                report_path = self.save_analysis_report(result)
                self.logger.log_event(
                    "POST_RUN_ANALYZER", "INFO", f"Analysis report saved: {report_path}"
                )

                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
                if result.performance_score < 50:
                    self.logger.log_event(
                        "POST_RUN_ANALYZER",
                        "WARNING",
                        f"Low performance score: {result.performance_score:.1f}/100",
                    )

                if result.errors_count > 5:
                    self.logger.log_event(
                        "POST_RUN_ANALYZER", "WARNING", f"High error count: {result.errors_count}"
                    )

                # –ñ–¥–µ–º 6 —á–∞—Å–æ–≤ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                await asyncio.sleep(6 * 3600)  # 6 —á–∞—Å–æ–≤

            except Exception as e:
                self.logger.log_event(
                    "POST_RUN_ANALYZER", "ERROR", f"Performance analysis loop error: {e}"
                )
                await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def generate_quick_summary(self, hours: int = 24) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
        try:
            result = await self.analyze_trading_session(hours)

            summary = f"""
üìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –ó–ê {hours}–ß:

üí∞ –ü—Ä–∏–±—ã–ª—å: ${result.total_pnl:.2f}
üìà –°–¥–µ–ª–æ–∫: {result.total_trades}
‚úÖ –í–∏–Ω—Ä–µ–π—Ç: {result.win_rate:.1%}
üìä Score: {result.performance_score:.1f}/100

üèÜ –õ—É—á—à–∏–π —Å–∏–º–≤–æ–ª: {result.best_symbol or "N/A"}
üìâ –•—É–¥—à–∏–π —Å–∏–º–≤–æ–ª: {result.worst_symbol or "N/A"}

‚ö†Ô∏è –û—à–∏–±–æ–∫: {result.errors_count}
‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {result.warnings_count}

üí° –ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
"""

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            for i, rec in enumerate(result.recommendations[:3], 1):
                summary += f"{i}. {rec}\n"

            return summary.strip()

        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"

    async def generate_detailed_report(self, hours: int = 24) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        try:
            result = await self.analyze_trading_session(hours)

            report = f"""
üéØ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–õ–ò ({hours}—á)

üìä –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
‚Ä¢ –û–±—â–∏–π PnL: ${result.total_pnl:.2f}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {result.total_trades}
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {result.win_rate:.1%}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL –∑–∞ —Å–¥–µ–ª–∫—É: ${result.avg_pnl:.2f}
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${result.max_profit:.2f}
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: ${result.max_loss:.2f}

üìà –ü–†–û–î–í–ò–ù–£–¢–´–ï –ú–ï–¢–†–ò–ö–ò:
‚Ä¢ Profit Factor: {result.profit_factor:.2f}
‚Ä¢ Sharpe Ratio: {result.sharpe_ratio:.2f}
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π Drawdown: {result.max_drawdown:.1f}%

üèÜ –ê–ù–ê–õ–ò–ó –ü–û –°–ò–ú–í–û–õ–ê–ú:
‚Ä¢ –õ—É—á—à–∏–π —Å–∏–º–≤–æ–ª: {result.best_symbol or "N/A"}
‚Ä¢ –•—É–¥—à–∏–π —Å–∏–º–≤–æ–ª: {result.worst_symbol or "N/A"}

‚ö†Ô∏è –°–ò–°–¢–ï–ú–ù–´–ï –°–û–ë–´–¢–ò–Ø:
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {result.errors_count}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {result.warnings_count}

üéØ –û–ë–©–ò–ô SCORE: {result.performance_score:.1f}/100

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
"""

            for i, rec in enumerate(result.recommendations, 1):
                report += f"{i}. {rec}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é score
            if result.performance_score >= 80:
                report += "\n‚úÖ –û–¢–õ–ò–ß–ù–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨"
            elif result.performance_score >= 60:
                report += "\nüü° –•–û–†–û–®–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨"
            elif result.performance_score >= 40:
                report += "\nüü† –°–†–ï–î–ù–Ø–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨"
            else:
                report += "\nüî¥ –ù–ò–ó–ö–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨"

            return report.strip()

        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"

    async def get_binance_position_history(self, hours: int = 24) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ—á–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ–∑–∏—Ü–∏–π –∏–∑ Binance API"""
        try:
            from core.config import TradingConfig
            from core.exchange_client import OptimizedExchangeClient

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π exchange client
            config = TradingConfig.load_optimized_for_profit_target(0.7)
            exchange = OptimizedExchangeClient(config, self.logger)

            if not await exchange.initialize():
                return {"error": "Failed to initialize exchange client"}

            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
            since = datetime.now() - timedelta(hours=hours)
            since_timestamp = int(since.timestamp() * 1000)

            # 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ (userTrades)
            trades_data = await self._get_user_trades(exchange, since_timestamp)

            # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (positionRisk)
            positions_data = await self._get_position_risk(exchange)

            # 3. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã (income)
            income_data = await self._get_income_history(exchange, since_timestamp)

            # 4. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            account_data = await self._get_account_info(exchange)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            analysis = self._analyze_position_history(
                trades_data, positions_data, income_data, account_data
            )

            return analysis

        except Exception as e:
            self.logger.log_event(
                "POST_RUN_ANALYZER", "ERROR", f"Failed to get Binance position history: {e}"
            )
            return {"error": str(e)}

    async def _get_user_trades(self, exchange, since_timestamp: int) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # GET /fapi/v1/userTrades
            params = {
                "startTime": since_timestamp,
                "limit": 1000,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
            }

            response = await exchange.client.futures_account_trades(**params)
            return response
        except Exception as e:
            self.logger.log_event("POST_RUN_ANALYZER", "ERROR", f"Failed to get user trades: {e}")
            return []

    async def _get_position_risk(self, exchange) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö"""
        try:
            # GET /fapi/v1/positionRisk
            response = await exchange.client.futures_position_information()
            return response
        except Exception as e:
            self.logger.log_event("POST_RUN_ANALYZER", "ERROR", f"Failed to get position risk: {e}")
            return []

    async def _get_income_history(self, exchange, since_timestamp: int) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤"""
        try:
            # GET /fapi/v1/income
            params = {"startTime": since_timestamp, "limit": 1000}

            response = await exchange.client.futures_income_history(**params)
            return response
        except Exception as e:
            self.logger.log_event(
                "POST_RUN_ANALYZER", "ERROR", f"Failed to get income history: {e}"
            )
            return []

    async def _get_account_info(self, exchange) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        try:
            # GET /fapi/v1/account
            response = await exchange.client.futures_account()
            return response
        except Exception as e:
            self.logger.log_event("POST_RUN_ANALYZER", "ERROR", f"Failed to get account info: {e}")
            return {}

    def _analyze_position_history(
        self, trades_data: list, positions_data: list, income_data: list, account_data: dict
    ) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π –∏–∑ Binance API"""
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            symbol_trades = {}
            total_fees = 0
            total_commission = 0

            for trade in trades_data:
                symbol = trade["symbol"]
                if symbol not in symbol_trades:
                    symbol_trades[symbol] = []

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
                fee = float(trade["commission"])
                total_commission += fee

                symbol_trades[symbol].append(
                    {
                        "time": trade["time"],
                        "side": trade["side"],
                        "price": float(trade["price"]),
                        "qty": float(trade["qty"]),
                        "commission": fee,
                        "realizedPnl": float(trade.get("realizedPnl", 0)),
                    }
                )

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            position_analysis = {}
            total_realized_pnl = 0
            total_trades = 0
            winning_trades = 0

            for symbol, trades in symbol_trades.items():
                if len(trades) < 2:  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å–¥–µ–ª–∫–∏ (–æ—Ç–∫—Ä—ã—Ç–∏–µ + –∑–∞–∫—Ä—ã—Ç–∏–µ)
                    continue

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                trades.sort(key=lambda x: x["time"])

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤ –ø–æ–∑–∏—Ü–∏–∏ (–æ—Ç–∫—Ä—ã—Ç–∏–µ + –∑–∞–∫—Ä—ã—Ç–∏–µ)
                positions = []
                i = 0
                while i < len(trades) - 1:
                    open_trade = trades[i]
                    close_trade = trades[i + 1]

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                    if (
                        open_trade["side"] != close_trade["side"]
                        and open_trade["qty"] == close_trade["qty"]
                    ):
                        position = {
                            "symbol": symbol,
                            "side": open_trade["side"],
                            "entry_price": open_trade["price"],
                            "exit_price": close_trade["price"],
                            "qty": open_trade["qty"],
                            "entry_time": open_trade["time"],
                            "exit_time": close_trade["time"],
                            "realized_pnl": close_trade["realizedPnl"],
                            "fees": open_trade["commission"] + close_trade["commission"],
                        }

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
                        if position["side"] == "BUY":
                            pnl = (position["exit_price"] - position["entry_price"]) * position[
                                "qty"
                            ]
                        else:
                            pnl = (position["entry_price"] - position["exit_price"]) * position[
                                "qty"
                            ]

                        position["calculated_pnl"] = pnl
                        position["net_pnl"] = pnl - position["fees"]

                        positions.append(position)
                        total_realized_pnl += position["net_pnl"]
                        total_trades += 1

                        if position["net_pnl"] > 0:
                            winning_trades += 1

                        i += 2  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–µ —Å–¥–µ–ª–∫–∏
                    else:
                        i += 1

                position_analysis[symbol] = positions

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º funding fees
            total_funding_fees = 0
            for income in income_data:
                if income["incomeType"] == "FUNDING_FEE":
                    total_funding_fees += float(income["income"])

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
            avg_pnl_per_trade = total_realized_pnl / total_trades if total_trades > 0 else 0

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
            current_positions = []
            unrealized_pnl = 0

            for position in positions_data:
                if float(position["positionAmt"]) != 0:  # –ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è
                    current_positions.append(
                        {
                            "symbol": position["symbol"],
                            "side": "LONG" if float(position["positionAmt"]) > 0 else "SHORT",
                            "size": abs(float(position["positionAmt"])),
                            "entry_price": float(position["entryPrice"]),
                            "mark_price": float(position["markPrice"]),
                            "unrealized_pnl": float(position["unRealizedProfit"]),
                        }
                    )
                    unrealized_pnl += float(position["unRealizedProfit"])

            return {
                "period_hours": 24,
                "total_trades": total_trades,
                "winning_trades": winning_trades,
                "win_rate": win_rate,
                "total_realized_pnl": total_realized_pnl,
                "total_commission": total_commission,
                "total_funding_fees": total_funding_fees,
                "net_pnl": total_realized_pnl - total_commission - total_funding_fees,
                "avg_pnl_per_trade": avg_pnl_per_trade,
                "current_positions": current_positions,
                "unrealized_pnl": unrealized_pnl,
                "position_analysis": position_analysis,
                "account_info": {
                    "total_wallet_balance": float(account_data.get("totalWalletBalance", 0)),
                    "total_unrealized_profit": float(account_data.get("totalUnrealizedProfit", 0)),
                    "total_margin_balance": float(account_data.get("totalMarginBalance", 0)),
                },
            }

        except Exception as e:
            self.logger.log_event(
                "POST_RUN_ANALYZER", "ERROR", f"Failed to analyze position history: {e}"
            )
            return {"error": str(e)}

    async def generate_binance_summary(self, hours: int = 24) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö Binance API"""
        try:
            binance_data = await self.get_binance_position_history(hours)

            if "error" in binance_data:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Binance: {binance_data['error']}"

            summary = f"""
üìä –¢–û–ß–ù–ê–Ø –°–í–û–î–ö–ê –ò–ó BINANCE API ({hours}—á)

üí∞ –†–ï–ê–õ–ò–ó–û–í–ê–ù–ù–´–ô PnL:
‚Ä¢ –û–±—â–∏–π PnL: ${binance_data["total_realized_pnl"]:.2f}
‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏: ${binance_data["total_commission"]:.2f}
‚Ä¢ Funding Fees: ${binance_data["total_funding_fees"]:.2f}
‚Ä¢ –ß–∏—Å—Ç—ã–π PnL: ${binance_data["net_pnl"]:.2f}

üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–î–ï–õ–û–ö:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {binance_data["total_trades"]}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {binance_data["winning_trades"]}
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {binance_data["win_rate"]:.1f}%
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL –∑–∞ —Å–¥–µ–ª–∫—É: ${binance_data["avg_pnl_per_trade"]:.2f}

üèÜ –¢–ï–ö–£–©–ò–ï –ü–û–ó–ò–¶–ò–ò ({len(binance_data["current_positions"])}):
"""

            for pos in binance_data["current_positions"]:
                summary += f"‚Ä¢ {pos['symbol']} {pos['side']}: {pos['size']:.4f} @ ${pos['entry_price']:.4f} (UnPnL: ${pos['unrealized_pnl']:.2f})\n"

            summary += f"""
üíº –ê–ö–ö–ê–£–ù–¢:
‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${binance_data["account_info"]["total_wallet_balance"]:.2f}
‚Ä¢ –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${binance_data["account_info"]["total_unrealized_profit"]:.2f}
‚Ä¢ –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${binance_data["account_info"]["total_margin_balance"]:.2f}

üìã –î–ï–¢–ê–õ–ò –ü–û –°–ò–ú–í–û–õ–ê–ú:
"""

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ PnL
            symbol_pnl = {}
            for symbol, positions in binance_data["position_analysis"].items():
                symbol_total = sum(pos["net_pnl"] for pos in positions)
                symbol_pnl[symbol] = symbol_total

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ PnL
            sorted_symbols = sorted(symbol_pnl.items(), key=lambda x: x[1], reverse=True)

            for i, (symbol, pnl) in enumerate(sorted_symbols[:5], 1):
                summary += f"{i}. {symbol}: ${pnl:.2f}\n"

            return summary.strip()

        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏ Binance: {e}"
