#!/usr/bin/env python3
"""
IP Monitor –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP –∞–¥—Ä–µ—Å–∞
"""

import asyncio
import time

import requests

from core.unified_logger import UnifiedLogger


class IPMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    def __init__(self, logger: UnifiedLogger | None = None):
        self.logger = logger
        self.current_ip = None
        self.last_check = 0
        self.check_interval = 300  # 5 –º–∏–Ω—É—Ç

    async def get_current_ip(self) -> str | None:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π IP –∞–¥—Ä–µ—Å"""
        try:
            response = requests.get("https://api.ipify.org?format=json", timeout=10)
            if response.status_code == 200:
                return response.json()["ip"]
            return None
        except Exception as e:
            if self.logger:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ sys.builtin_module_names –∏ sys.maxsize –≤ Windows
                if "builtin_module_names" not in str(e) and "maxsize" not in str(e):
                    self.logger.log_event("IP_MONITOR", "ERROR", f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP: {e}")
            return None

    async def check_ip_change(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞"""
        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
        if current_time - self.last_check < self.check_interval:
            return False

        new_ip = await self.get_current_ip()
        if not new_ip:
            return False

        self.last_check = current_time

        if self.current_ip is None:
            # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            self.current_ip = new_ip
            if self.logger:
                self.logger.log_event("IP_MONITOR", "INFO", f"üåê IP –∞–¥—Ä–µ—Å: {new_ip}")
            return False

        if new_ip != self.current_ip:
            # IP –∏–∑–º–µ–Ω–∏–ª—Å—è!
            old_ip = self.current_ip
            self.current_ip = new_ip

            if self.logger:
                self.logger.log_event("IP_MONITOR", "WARNING",
                    f"‚ö†Ô∏è IP –∞–¥—Ä–µ—Å –∏–∑–º–µ–Ω–∏–ª—Å—è: {old_ip} ‚Üí {new_ip}")

            return True

        return False

    async def monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ IP"""
        if self.logger:
            self.logger.log_event("IP_MONITOR", "INFO", "üåê –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ IP –∞–¥—Ä–µ—Å–∞")

        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ IP
                ip_changed = await self.check_ip_change()

                if ip_changed:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ IP
                    if self.logger:
                        self.logger.log_event("IP_MONITOR", "CRITICAL",
                            "üö® –í–ù–ò–ú–ê–ù–ò–ï: IP –∞–¥—Ä–µ—Å –∏–∑–º–µ–Ω–∏–ª—Å—è! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å!")

                # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(self.check_interval)

            except Exception as e:
                if self.logger:
                    self.logger.log_event("IP_MONITOR", "ERROR", f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ IP: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
