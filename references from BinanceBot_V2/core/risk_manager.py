import asyncio
import time
from collections import defaultdict, deque
from datetime import datetime
from typing import Any

import numpy as np


class RiskManager:
    """
    üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä —Å ML-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
    """

    def __init__(self, config, logger):
        self.config = config
        self.logger = logger

        # –ë–∞–∑–æ–≤—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
        self.sl_streak_counter = 0
        self.sl_streak_paused_until = None
        self.lock = asyncio.Lock()

        # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏—Å–∫–æ–≤
        self.risk_metrics = {
            "total_trades": 0,
            "winning_trades": 0,
            "losing_trades": 0,
            "total_pnl": 0.0,
            "max_drawdown": 0.0,
            "current_drawdown": 0.0,
            "sharpe_ratio": 0.0,
            "volatility": 0.0
        }

        # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞
        self.adaptive_risk_params = {
            "base_risk_pct": config.base_risk_pct,
            "max_position_size": config.max_position_size_usdc,
            "max_capital_utilization": config.max_capital_utilization_pct,
            "volatility_multiplier": 1.0,
            "market_regime_multiplier": 1.0
        }

        # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML
        self.trade_history = deque(maxlen=1000)
        self.volatility_history = defaultdict(deque)
        self.correlation_matrix = {}

        # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ª–∏–º–∏—Ç—ã
        self.dynamic_limits = {
            "max_positions": config.max_concurrent_positions,
            "max_daily_loss": config.max_drawdown_daily,
            "max_position_duration": config.max_position_duration
        }

        # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        self.market_regime = "normal"  # normal, volatile, trending, crisis
        self.regime_start_time = time.time()

        # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: ML-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–∏—Å–∫–∞
        self.risk_predictions = {}
        self.prediction_accuracy = 0.7

    async def is_trading_allowed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SL streak
        if self.sl_streak_paused_until:
            now = time.time()
            if now < self.sl_streak_paused_until:
                return False
            else:
                self.sl_streak_paused_until = None

        # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
        if not await self.check_daily_limits():
            return False

        # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if self.market_regime == "crisis":
            return False

        # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        if not await self.check_portfolio_correlation():
            return False

        return True

    async def check_daily_limits(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ø–æ—Ç–µ—Ä—å"""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π PnL
            today = datetime.now().date()
            daily_pnl = 0.0

            for trade in self.trade_history:
                trade_date = datetime.fromisoformat(trade["timestamp"]).date()
                if trade_date == today:
                    daily_pnl += trade["pnl"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å
            if daily_pnl < -self.dynamic_limits["max_daily_loss"]:
                self.logger.log_event("RISK_MANAGER", "WARNING",
                    f"Daily loss limit reached: ${daily_pnl:.2f}")
                return False

            return True

        except Exception as e:
            self.logger.log_event("RISK_MANAGER", "ERROR", f"Daily limits check failed: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é

    async def check_portfolio_correlation(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
            return True

        except Exception as e:
            self.logger.log_event("RISK_MANAGER", "ERROR", f"Correlation check failed: {e}")
            return True

    async def register_sl_hit(self, symbol: str, pnl: float):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç SL hit —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
        async with self.lock:
            self.sl_streak_counter += 1

            # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.risk_metrics["losing_trades"] += 1
            self.risk_metrics["total_trades"] += 1
            self.risk_metrics["total_pnl"] += pnl

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–æ—Å–∞–¥–∫—É
            self.risk_metrics["current_drawdown"] = min(
                self.risk_metrics["current_drawdown"], pnl
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É
            if self.risk_metrics["current_drawdown"] < self.risk_metrics["max_drawdown"]:
                self.risk_metrics["max_drawdown"] = self.risk_metrics["current_drawdown"]

            # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å–∞–¥–∫–∏
            if self.sl_streak_counter >= self.config.max_sl_streak:
                pause_duration = self.calculate_adaptive_pause()
                self.sl_streak_paused_until = time.time() + pause_duration

                self.logger.log_event("RISK_MANAGER", "WARNING",
                    f"SL Streak reached {self.sl_streak_counter}. Trading paused for {pause_duration//60} minutes.")

                # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∏—Å–∫–∞
                await self.adjust_risk_parameters()

    async def register_win(self, symbol: str, pnl: float):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—É—é —Å–¥–µ–ª–∫—É —Å ML-–æ–±—É—á–µ–Ω–∏–µ–º"""
        async with self.lock:
            if self.sl_streak_counter > 0:
                self.sl_streak_counter = max(
                    0, self.sl_streak_counter - self.config.sl_streak_reduction_factor
                )

            # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.risk_metrics["winning_trades"] += 1
            self.risk_metrics["total_trades"] += 1
            self.risk_metrics["total_pnl"] += pnl

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–æ—Å–∞–¥–∫—É –ø—Ä–∏ –ø—Ä–∏–±—ã–ª–∏
            if pnl > 0:
                self.risk_metrics["current_drawdown"] = 0

            # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: ML-–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö
            await self.update_ml_model(symbol, pnl, "win")

    def calculate_position_size(
        self, symbol: str, entry_price: float, balance: float, leverage: int,
        volatility: float = 1.0, market_regime: str = "normal"
    ) -> float:
        # üöÄ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if balance is None or balance <= 0:
            self.logger.log_event("RISK_MANAGER", "WARNING", f"Invalid balance for {symbol}: {balance}")
            return 0.0
            
        if entry_price is None or entry_price <= 0:
            self.logger.log_event("RISK_MANAGER", "WARNING", f"Invalid entry_price for {symbol}: {entry_price}")
            return 0.0
        """üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å ML-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        try:
            # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ë–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            base_risk = balance * self.adaptive_risk_params["base_risk_pct"]

            # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
            volatility_mult = self.calculate_volatility_multiplier(symbol, volatility)
            regime_mult = self.calculate_regime_multiplier(market_regime)
            performance_mult = self.calculate_performance_multiplier()
            correlation_mult = self.calculate_correlation_multiplier(symbol)

            # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: ML-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            ml_prediction = self.predict_optimal_position_size(symbol, entry_price, balance)

            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            adjusted_risk = base_risk * volatility_mult * regime_mult * performance_mult * correlation_mult

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ ML-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            if ml_prediction > 0:
                adjusted_risk = adjusted_risk * (0.8 + 0.4 * ml_prediction)  # 0.8-1.2 –¥–∏–∞–ø–∞–∑–æ–Ω

            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            qty = (adjusted_risk * leverage) / entry_price

            # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            qty = self.apply_dynamic_limits(qty, entry_price, balance)

            return round(qty, 6)

        except Exception as e:
            self.logger.log_event("RISK_MANAGER", "ERROR", f"Position size calculation failed: {e}")
            # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É —Ä–∞—Å—á–µ—Ç—É
            return self.calculate_basic_position_size(symbol, entry_price, balance, leverage)

    def calculate_volatility_multiplier(self, symbol: str, volatility: float) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            hist_volatility = self.get_historical_volatility(symbol)

            if hist_volatility > 0:
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                vol_ratio = volatility / hist_volatility
                if vol_ratio > 1.5:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    return 0.7  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
                elif vol_ratio < 0.5:  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    return 1.3  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                else:
                    return 1.0
            else:
                return 1.0

        except Exception as e:
            self.logger.log_event("RISK_MANAGER", "ERROR", f"Volatility multiplier calculation failed: {e}")
            return 1.0

    def calculate_regime_multiplier(self, market_regime: str) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        multipliers = {
            "normal": 1.0,
            "volatile": 0.8,
            "trending": 1.1,
            "crisis": 0.5
        }
        return multipliers.get(market_regime, 1.0)

    def calculate_performance_multiplier(self) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            if self.risk_metrics["total_trades"] < 10:
                return 1.0  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö

            win_rate = self.risk_metrics["winning_trades"] / self.risk_metrics["total_trades"]
            avg_pnl = self.risk_metrics["total_pnl"] / self.risk_metrics["total_trades"]

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if win_rate > 0.6 and avg_pnl > 0:
                return 1.2  # –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            elif win_rate < 0.4 or avg_pnl < -0.5:
                return 0.8  # –ü–ª–æ—Ö–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            else:
                return 1.0

        except Exception as e:
            self.logger.log_event("RISK_MANAGER", "ERROR", f"Performance multiplier calculation failed: {e}")
            return 1.0

    def calculate_correlation_multiplier(self, symbol: str) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1.0
            return 1.0

        except Exception as e:
            self.logger.log_event("RISK_MANAGER", "ERROR", f"Correlation multiplier calculation failed: {e}")
            return 1.0

    def predict_optimal_position_size(self, symbol: str, entry_price: float, balance: float) -> float:
        """ML-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ—Å—Ç–∞—è ML-–º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            symbol_history = [trade for trade in self.trade_history if trade["symbol"] == symbol]

            if len(symbol_history) < 5:
                return 0.5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
            successful_trades = [t for t in symbol_history if t["pnl"] > 0]
            if not successful_trades:
                return 0.5

            # –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            avg_successful_size = np.mean([t["position_size"] for t in successful_trades])
            current_size = (balance * self.adaptive_risk_params["base_risk_pct"]) / entry_price

            if current_size > 0:
                optimal_ratio = avg_successful_size / current_size
                return max(0.5, min(1.5, optimal_ratio))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            else:
                return 0.5

        except Exception as e:
            self.logger.log_event("RISK_MANAGER", "ERROR", f"ML prediction failed: {e}")
            return 0.5

    def apply_dynamic_limits(self, qty: float, entry_price: float, balance: float) -> float:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫ —Ä–∞–∑–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            notional = qty * entry_price

            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            if notional < self.config.min_notional_open:
                qty = self.config.min_notional_open / entry_price

            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            max_size = self.adaptive_risk_params["max_position_size"]
            if notional > max_size:
                qty = max_size / entry_price

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–∞–ø–∏—Ç–∞–ª—É
            max_utilization = self.adaptive_risk_params["max_capital_utilization"]
            if notional / balance > max_utilization:
                allowed_notional = balance * max_utilization
                qty = allowed_notional / entry_price

            # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å–∞–¥–∫–∏
            if self.risk_metrics["current_drawdown"] < -0.1:  # –ü—Ä–æ—Å–∞–¥–∫–∞ –±–æ–ª—å—à–µ 10%
                qty *= 0.7  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏

            return qty

        except Exception as e:
            self.logger.log_event("RISK_MANAGER", "ERROR", f"Dynamic limits application failed: {e}")
            return qty

    def calculate_basic_position_size(self, symbol: str, entry_price: float, balance: float, leverage: int) -> float:
        """–ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∫ fallback"""
        risk_amount = balance * self.config.base_risk_pct
        qty = (risk_amount * leverage) / entry_price

        # –ë–∞–∑–æ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        notional = qty * entry_price
        if notional < self.config.min_notional_open:
            qty = self.config.min_notional_open / entry_price
        if notional > self.config.max_position_size_usdc:
            qty = self.config.max_position_size_usdc / entry_price

        return round(qty, 6)

    def calculate_adaptive_pause(self) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –ø–∞—É–∑—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å–∞–¥–∫–∏"""
        try:
            base_pause = self.config.sl_streak_pause_minutes * 60

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å–∞–¥–∫–∏
            drawdown_pct = abs(self.risk_metrics["current_drawdown"]) / 100
            if drawdown_pct > 0.05:  # –ü—Ä–æ—Å–∞–¥–∫–∞ –±–æ–ª—å—à–µ 5%
                base_pause *= 1.5
            elif drawdown_pct > 0.1:  # –ü—Ä–æ—Å–∞–¥–∫–∞ –±–æ–ª—å—à–µ 10%
                base_pause *= 2.0

            return int(base_pause)

        except Exception as e:
            self.logger.log_event("RISK_MANAGER", "ERROR", f"Adaptive pause calculation failed: {e}")
            return self.config.sl_streak_pause_minutes * 60

    async def adjust_risk_parameters(self):
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∏—Å–∫–∞"""
        try:
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if self.risk_metrics["total_trades"] > 20:
                win_rate = self.risk_metrics["winning_trades"] / self.risk_metrics["total_trades"]

                if win_rate < 0.4:  # –ù–∏–∑–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç
                    self.adaptive_risk_params["base_risk_pct"] *= 0.8
                    self.logger.log_event("RISK_MANAGER", "INFO",
                        f"Reducing base risk to {self.adaptive_risk_params['base_risk_pct']:.3f} due to low win rate")
                elif win_rate > 0.6:  # –í—ã—Å–æ–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç
                    self.adaptive_risk_params["base_risk_pct"] = min(
                        self.config.base_risk_pct * 1.2,
                        self.adaptive_risk_params["base_risk_pct"] * 1.1
                    )
                    self.logger.log_event("RISK_MANAGER", "INFO",
                        f"Increasing base risk to {self.adaptive_risk_params['base_risk_pct']:.3f} due to high win rate")

        except Exception as e:
            self.logger.log_event("RISK_MANAGER", "ERROR", f"Risk parameters adjustment failed: {e}")

    async def update_ml_model(self, symbol: str, pnl: float, result: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç ML-–º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–¥–µ–ª–æ–∫"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
            trade_data = {
                "symbol": symbol,
                "pnl": pnl,
                "result": result,
                "timestamp": datetime.now().isoformat(),
                "position_size": 0.0,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
                "market_regime": self.market_regime
            }

            self.trade_history.append(trade_data)

            # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            if len(self.trade_history) > 10:
                recent_trades = list(self.trade_history)[-10:]
                predicted_wins = sum(1 for t in recent_trades if t["result"] == "win")
                actual_wins = sum(1 for t in recent_trades if t["pnl"] > 0)

                if actual_wins > 0:
                    self.prediction_accuracy = predicted_wins / actual_wins

        except Exception as e:
            self.logger.log_event("RISK_MANAGER", "ERROR", f"ML model update failed: {e}")

    def get_historical_volatility(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞"""
        try:
            if symbol in self.volatility_history:
                recent_volatility = list(self.volatility_history[symbol])[-10:]
                if recent_volatility:
                    return np.mean(recent_volatility)
            return 1.0  # –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        except Exception as e:
            self.logger.log_event("RISK_MANAGER", "ERROR", f"Historical volatility calculation failed: {e}")
            return 1.0

    async def check_entry_allowed(self, symbol: str, side: str, amount: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –≤—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        try:
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
            if not await self.is_trading_allowed():
                return False

            # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–π
            if not await self.check_position_limits(symbol, amount):
                return False

            # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            if not await self.check_market_conditions(symbol):
                return False

            return True

        except Exception as e:
            self.logger.log_event("RISK_MANAGER", "ERROR", f"Entry check failed: {e}")
            return False

    async def check_position_limits(self, symbol: str, amount: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –ø–æ–∑–∏—Ü–∏–π"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑–æ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
            return True

        except Exception as e:
            self.logger.log_event("RISK_MANAGER", "ERROR", f"Position limits check failed: {e}")
            return True

    async def check_market_conditions(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            return True

        except Exception as e:
            self.logger.log_event("RISK_MANAGER", "ERROR", f"Market conditions check failed: {e}")
            return True

    def reset_streak(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ SL streak"""
        self.sl_streak_counter = 0
        self.sl_streak_paused_until = None
        self.logger.log_event("RISK_MANAGER", "INFO", "SL Streak reset manually.")

    def get_risk_metrics(self) -> dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞"""
        return {
            **self.risk_metrics,
            "sl_streak": self.sl_streak_counter,
            "adaptive_params": self.adaptive_risk_params,
            "market_regime": self.market_regime,
            "prediction_accuracy": self.prediction_accuracy
        }
