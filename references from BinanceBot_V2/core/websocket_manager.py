#!/usr/bin/env python3
"""
Enhanced WebSocket Manager –¥–ª—è BinanceBot_V2
–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
"""

# Import Windows compatibility error handling
import core.windows_compatibility

import asyncio
import json
import time
from collections import defaultdict, deque
from collections.abc import Callable
from typing import Any

import websockets

from core.unified_logger import UnifiedLogger


class WebSocketManager:
    """üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π WebSocket Manager –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    def __init__(self, exchange_client, telegram=None, logger: UnifiedLogger | None = None):
        self.exchange = exchange_client
        self.telegram = telegram
        self.logger = logger

        # WebSocket connections
        self.connections = {}
        self.user_stream_ws = None
        self.listen_key = None

        # Performance tracking - —É–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.message_count = 0
        self.latency_tracker = deque(maxlen=1000)
        self.reconnect_count = 0
        self.last_message_time = time.time()
        self.start_time = time.time()

        # Data handlers
        self.market_data_handlers = defaultdict(list)
        self.order_update_handlers = []
        self.position_update_handlers = []

        # Connection management - —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.is_running = False
        self.reconnect_delay = 5
        self.max_reconnect_attempts = 10
        self.heartbeat_interval = 30

        # Real-time data storage
        self.latest_prices = {}
        self.order_book_cache = {}
        self.trade_cache = deque(maxlen=1000)

        # Performance metrics - —É–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.performance_metrics = {
            'messages_per_second': 0,
            'average_latency': 0,
            'connection_uptime': 0,
            'reconnect_frequency': 0,
            'total_messages': 0,
            'uptime_seconds': 0
        }

        # Connection health monitoring
        self.connection_health = {}
        self.last_health_check = time.time()

        # –ö—ç—à –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        self._valid_symbols_cache = set()
        self._symbols_cache_time = 0

    async def start(self):
        """–ó–∞–ø—É—Å–∫ WebSocket Manager"""
        try:
            self.is_running = True
            self.start_time = time.time()
            self.logger.log_event("WEBSOCKET", "INFO", "üöÄ –ó–∞–ø—É—Å–∫ Enhanced WebSocket Manager")

            # –°–æ–∑–¥–∞–µ–º listen key –¥–ª—è user data stream
            await self._create_listen_key()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
            tasks = [
                asyncio.create_task(self._maintain_user_stream()),
                asyncio.create_task(self._performance_monitor()),
                asyncio.create_task(self._heartbeat_monitor()),
                asyncio.create_task(self._connection_health_monitor())
            ]

            await asyncio.gather(*tasks, return_exceptions=True)

        except Exception as e:
            self.logger.log_event("WEBSOCKET", "ERROR", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket: {e}")
            raise

    async def subscribe_market_data(self, symbols: list[str]):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
            valid_symbols = await self._validate_websocket_symbols(symbols)
            if not valid_symbols:
                self.logger.log_event("WEBSOCKET", "WARNING", "No valid symbols for WebSocket subscription")
                return

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è WebSocket (lowercase, –±–µ–∑ / –∏ :USDC)
            streams = [f"{s.replace('/', '').replace(':USDC', '').lower()}@ticker" for s in valid_symbols]

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å timeout
            if len(streams) > 5:
                streams = streams[:5]
                self.logger.log_event("WEBSOCKET", "INFO", f"Limited to 5 symbols to avoid timeout")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º combined stream –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
            stream_query = "/".join(streams)
            url = f"wss://fstream.binance.com/stream?streams={stream_query}"

            self.logger.log_event("WEBSOCKET", "INFO", f"üîå Connecting to combined stream: {url}")

                        # –î–æ–±–∞–≤–ª—è–µ–º retry –ª–æ–≥–∏–∫—É –¥–ª—è WebSocket
            max_retries = 3
            retry_delay = 5
            
            for attempt in range(max_retries):
                try:
                    async with websockets.connect(
                        url,
                        ping_interval=30,     # ping –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                        ping_timeout=10,      # pong –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
                        open_timeout=5,       # —É–º–µ–Ω—å—à–∞–µ–º timeout –µ—â–µ –±–æ–ª—å—à–µ
                        max_size=2**20
                    ) as ws:
                        self.connections['combined'] = {
                            'websocket': ws,
                            'streams': streams,
                            'last_message': time.time(),
                            'message_count': 0,
                            'is_healthy': True
                        }

                        self.logger.log_event("WEBSOCKET", "INFO", f"‚úÖ WebSocket connected successfully")

                        async for raw_message in ws:
                            try:
                                data = json.loads(raw_message)
                                # –í combined —Ñ–æ—Ä–º–∞—Ç–µ: {'stream': ..., 'data': {...}}
                                payload = data.get("data", data)
                                await self._process_market_message("combined", payload)
                            except Exception as e:
                                self.logger.log_event("WEBSOCKET", "ERROR", f"Failed to process message: {e}")
                        
                        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å
                        break
                        
                except Exception as e:
                    self.logger.log_event("WEBSOCKET", "ERROR", f"WebSocket connection attempt {attempt + 1} failed: {e}")
                    if attempt < max_retries - 1:
                        self.logger.log_event("WEBSOCKET", "INFO", f"Retrying in {retry_delay} seconds...")
                        await asyncio.sleep(retry_delay)
                        retry_delay *= 2  # Exponential backoff
                    else:
                        self.logger.log_event("WEBSOCKET", "WARNING", "All WebSocket connection attempts failed")
                        self.logger.log_event("WEBSOCKET", "INFO", "WebSocket disabled - using REST API only")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ WebSocket
                        await asyncio.sleep(30)

        except Exception as e:
            self.logger.log_event("WEBSOCKET", "ERROR", f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")
            self.logger.log_event("WEBSOCKET", "INFO", "WebSocket disabled for stability - using REST API only")

    async def _connect_market_streams(self, symbol: str, streams: list[str]):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä—ã–Ω–æ—á–Ω—ã–º –ø–æ—Ç–æ–∫–∞–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è WebSocket –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if self.exchange.config.is_testnet_mode():
                base_url = "wss://stream.binancefuture.com"  # Testnet WebSocket
                self.logger.log_event("WEBSOCKET", "INFO", "üß™ Using testnet WebSocket")
            else:
                base_url = "wss://fstream.binance.com"  # Production Futures WebSocket
                self.logger.log_event("WEBSOCKET", "INFO", "üöÄ Using production WebSocket")

            # –°–æ–∑–¥–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è futures
            symbol_lower = symbol.replace("/", "").lower()
            stream_url = f"{base_url}/ws/{symbol_lower}@ticker"

            websocket = await websockets.connect(
                stream_url,
                ping_interval=20,
                ping_timeout=30,
                close_timeout=30,
                max_size=2**20,  # 1MB max message size
                compression=None,   # –û—Ç–∫–ª—é—á–∞–µ–º —Å–∂–∞—Ç–∏–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                open_timeout=30    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            )

            self.connections[symbol] = {
                'websocket': websocket,
                'streams': streams,
                'last_message': time.time(),
                'message_count': 0,
                'connection_time': time.time(),
                'is_healthy': True
            }

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            asyncio.create_task(self._handle_market_messages(symbol, websocket))

            self.logger.log_event("WEBSOCKET", "INFO", f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {symbol}: {len(streams)} –ø–æ—Ç–æ–∫–æ–≤")

        except Exception as e:
            self.logger.log_event("WEBSOCKET", "ERROR", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {symbol}: {e}")
            # Fallback - –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏–∑-–∑–∞ WebSocket
            self.logger.log_event("WEBSOCKET", "INFO", f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º WebSocket –¥–ª—è {symbol}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É")

    async def _handle_market_messages(self, symbol: str, websocket):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            async for message in websocket:
                start_time = time.time()

                try:
                    data = json.loads(message)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    self.message_count += 1
                    self.performance_metrics['total_messages'] += 1

                    # –ò–∑–º–µ—Ä—è–µ–º –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    processing_time = time.time() - start_time
                    self.latency_tracker.append(processing_time)
                    self.last_message_time = time.time()

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                    await self._process_market_message(symbol, data)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    if symbol in self.connections:
                        self.connections[symbol]['message_count'] += 1
                        self.connections[symbol]['last_message'] = time.time()
                        self.connections[symbol]['is_healthy'] = True

                except json.JSONDecodeError as e:
                    self.logger.log_event("WEBSOCKET", "WARNING", f"Invalid JSON from {symbol}: {e}")
                except Exception as e:
                    self.logger.log_event("WEBSOCKET", "ERROR", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {symbol}: {e}")

        except websockets.exceptions.ConnectionClosed:
            self.logger.log_event("WEBSOCKET", "WARNING", f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è {symbol}")
            if symbol in self.connections:
                self.connections[symbol]['is_healthy'] = False
            await self._reconnect_stream(symbol)
        except Exception as e:
            self.logger.log_event("WEBSOCKET", "ERROR", f"–û—à–∏–±–∫–∞ WebSocket –¥–ª—è {symbol}: {e}")
            if symbol in self.connections:
                self.connections[symbol]['is_healthy'] = False
            await self._reconnect_stream(symbol)

    async def _process_market_message(self, symbol: str, data: dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Ü–µ–Ω
            if 'c' in data:  # ticker data
                self.latest_prices[symbol] = {
                    'price': float(data['c']),
                    'volume': float(data['v']),
                    'timestamp': time.time()
                }

            # –û–±–Ω–æ–≤–ª—è–µ–º order book
            if 'b' in data and 'a' in data:  # depth data
                self.order_book_cache[symbol] = {
                    'bids': data['b'][:10],  # Top 10 bids
                    'asks': data['a'][:10],  # Top 10 asks
                    'timestamp': time.time()
                }

            # –ö–µ—à–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏
            if 'p' in data and 'q' in data:  # trade data
                trade_info = {
                    'symbol': symbol,
                    'price': float(data['p']),
                    'quantity': float(data['q']),
                    'timestamp': time.time()
                }
                self.trade_cache.append(trade_info)

            # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            for handler in self.market_data_handlers[symbol]:
                try:
                    await handler(symbol, data)
                except Exception as e:
                    self.logger.log_event("WEBSOCKET", "ERROR", f"Handler error for {symbol}: {e}")

        except Exception as e:
            self.logger.log_event("WEBSOCKET", "ERROR", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")

    async def _create_listen_key(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ listen key –¥–ª—è user data stream"""
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º WebSocket –¥–ª—è Windows
            self.logger.log_event("WEBSOCKET", "INFO", "WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è Windows")
            return

        except Exception as e:
            # Handle Windows compatibility errors
            if core.windows_compatibility.is_windows_compatibility_error(str(e)):
                self.logger.log_event("WEBSOCKET", "INFO", "WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è Windows (compatibility)")
            else:
                self.logger.log_event("WEBSOCKET", "ERROR", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è listen key: {e}")

    async def _maintain_user_stream(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ user data stream"""
        last_log_time = 0
        while self.is_running:
            try:
                if not self.listen_key:
                    current_time = time.time()
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
                    if current_time - last_log_time > 300:
                        self.logger.log_event("WEBSOCKET", "INFO", "WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è Windows")
                        last_log_time = current_time
                    await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    continue

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è user data stream
                # –î–ª—è USDC-M Futures –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ endpoints
                if self.exchange.config.is_testnet_mode():
                    user_stream_url = f"wss://stream.binancefuture.com/ws/{self.listen_key}"
                else:
                    user_stream_url = f"wss://fstream.binance.com/ws/{self.listen_key}"

                async with websockets.connect(user_stream_url) as websocket:
                    self.user_stream_ws = websocket
                    self.logger.log_event("WEBSOCKET", "INFO", "üîå User data stream –ø–æ–¥–∫–ª—é—á–µ–Ω")

                    async for message in websocket:
                        try:
                            data = json.loads(message)
                            await self._handle_user_data(data)
                        except json.JSONDecodeError:
                            continue
                        except Exception as e:
                            self.logger.log_event("WEBSOCKET", "ERROR", f"User data error: {e}")

            except Exception as e:
                self.logger.log_event("WEBSOCKET", "WARNING", f"User stream error: {e}")
                await asyncio.sleep(self.reconnect_delay)
            except Exception as e:
                self.logger.log_event("WEBSOCKET", "ERROR", f"User stream error: {e}")
                await asyncio.sleep(self.reconnect_delay)

    async def _handle_user_data(self, data: dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ user data —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            event_type = data.get('e')

            if event_type == 'executionReport':
                await self._handle_order_update(data)
            elif event_type == 'ACCOUNT_UPDATE':
                await self._handle_position_update(data)
            elif event_type == 'outboundAccountPosition':
                await self._handle_balance_update(data)

        except Exception as e:
            self.logger.log_event("WEBSOCKET", "ERROR", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ user data: {e}")

    async def _handle_order_update(self, data: dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            order_status = data.get('X')
            symbol = data.get('s')
            side = data.get('S')
            price = float(data.get('p', 0))
            quantity = float(data.get('q', 0))

            if order_status == 'FILLED':
                # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏
                if self.telegram:
                    await self.telegram.send_trade_alert({
                        "symbol": symbol,
                        "side": side,
                        "price": price,
                        "quantity": quantity,
                        "status": "FILLED"
                    })

                self.logger.log_event("WEBSOCKET", "INFO",
                    f"üéØ –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {symbol} {side} {quantity} @ {price}")

            # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            for handler in self.order_update_handlers:
                try:
                    await handler(data)
                except Exception as e:
                    self.logger.log_event("WEBSOCKET", "ERROR", f"Order handler error: {e}")

        except Exception as e:
            self.logger.log_event("WEBSOCKET", "ERROR", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ order update: {e}")

    async def _handle_position_update(self, data: dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–π"""
        try:
            positions = data.get('a', {}).get('P', [])

            for position in positions:
                symbol = position.get('s')
                size = float(position.get('pa', 0))

                if abs(size) > 0:
                    self.logger.log_event("WEBSOCKET", "INFO",
                        f"üìä –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {symbol} = {size}")

            # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            for handler in self.position_update_handlers:
                try:
                    await handler(data)
                except Exception as e:
                    self.logger.log_event("WEBSOCKET", "ERROR", f"Position handler error: {e}")

        except Exception as e:
            self.logger.log_event("WEBSOCKET", "ERROR", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ position update: {e}")

    async def _handle_balance_update(self, data: dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞"""
        try:
            balances = data.get('B', [])

            for balance in balances:
                asset = balance.get('a')
                wallet_balance = float(balance.get('wb', 0))

                if asset == 'USDC':
                    self.logger.log_event("WEBSOCKET", "INFO",
                        f"üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {wallet_balance:.2f} USDC")

        except Exception as e:
            self.logger.log_event("WEBSOCKET", "ERROR", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ balance update: {e}")

    async def _reconnect_stream(self, symbol: str):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—Ç–æ–∫—É —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        try:
            self.reconnect_count += 1
            delay = min(self.reconnect_delay * (2 ** (self.reconnect_count - 1)), 60)

            self.logger.log_event("WEBSOCKET", "WARNING",
                f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {symbol} —á–µ—Ä–µ–∑ {delay}—Å (–ø–æ–ø—ã—Ç–∫–∞ {self.reconnect_count})")

            await asyncio.sleep(delay)

            if symbol in self.connections:
                streams = self.connections[symbol]['streams']
                await self._connect_market_streams(symbol, streams)

        except Exception as e:
            self.logger.log_event("WEBSOCKET", "ERROR", f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {symbol}: {e}")

    async def _performance_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ WebSocket"""
        while self.is_running:
            try:
                current_time = time.time()

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if len(self.latency_tracker) > 0:
                    self.performance_metrics['average_latency'] = sum(self.latency_tracker) / len(self.latency_tracker)

                # –°–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É - —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                uptime = current_time - self.start_time
                if uptime > 0:
                    self.performance_metrics['messages_per_second'] = self.message_count / uptime
                    self.performance_metrics['uptime_seconds'] = uptime

                # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                self.performance_metrics['connection_uptime'] = current_time - self.last_message_time

                # –ß–∞—Å—Ç–æ—Ç–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
                self.performance_metrics['reconnect_frequency'] = self.reconnect_count

                # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
                if int(current_time) % 60 == 0:
                    self.logger.log_event("WEBSOCKET", "INFO",
                        f"üìä WebSocket –º–µ—Ç—Ä–∏–∫–∏: "
                        f"Latency: {self.performance_metrics['average_latency']:.3f}ms, "
                        f"Msg/s: {self.performance_metrics['messages_per_second']:.1f}, "
                        f"Total: {self.performance_metrics['total_messages']}, "
                        f"Reconnects: {self.performance_metrics['reconnect_frequency']}")

                await asyncio.sleep(10)

            except Exception as e:
                self.logger.log_event("WEBSOCKET", "ERROR", f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
                await asyncio.sleep(10)

    async def _heartbeat_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ heartbeat –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        while self.is_running:
            try:
                current_time = time.time()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                for symbol, connection in list(self.connections.items()):
                    last_message = connection.get('last_message', 0)

                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª–µ–µ 60 —Å–µ–∫—É–Ω–¥, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
                    if current_time - last_message > 60:
                        self.logger.log_event("WEBSOCKET", "WARNING",
                            f"üíì Heartbeat timeout –¥–ª—è {symbol}, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                        await self._reconnect_stream(symbol)

                # –û–±–Ω–æ–≤–ª—è–µ–º listen key –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                if self.listen_key and int(current_time) % 1800 == 0:
                    await self._create_listen_key()

                await asyncio.sleep(30)

            except Exception as e:
                self.logger.log_event("WEBSOCKET", "ERROR", f"–û—à–∏–±–∫–∞ heartbeat –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(30)

    async def _connection_health_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        while self.is_running:
            try:
                current_time = time.time()

                for symbol, connection in list(self.connections.items()):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    connection_time = connection.get('connection_time', 0)
                    message_count = connection.get('message_count', 0)
                    is_healthy = connection.get('is_healthy', True)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–¥–æ—Ä–æ–≤—å—è
                    self.connection_health[symbol] = {
                        'uptime': current_time - connection_time,
                        'message_count': message_count,
                        'is_healthy': is_healthy,
                        'last_check': current_time
                    }

                await asyncio.sleep(15)

            except Exception as e:
                self.logger.log_event("WEBSOCKET", "ERROR", f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
                await asyncio.sleep(15)

    def add_market_data_handler(self, symbol: str, handler: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.market_data_handlers[symbol].append(handler)

    def add_order_update_handler(self, handler: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–æ–≤"""
        self.order_update_handlers.append(handler)

    def add_position_update_handler(self, handler: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–π"""
        self.position_update_handlers.append(handler)

    def get_latest_price(self, symbol: str) -> float | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –∏–∑ –∫–µ—à–∞"""
        if symbol in self.latest_prices:
            return self.latest_prices[symbol]['price']
        return None

    def get_order_book(self, symbol: str) -> dict[str, Any] | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ order book –∏–∑ –∫–µ—à–∞"""
        return self.order_book_cache.get(symbol)

    def get_performance_metrics(self) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return self.performance_metrics.copy()

    def get_connection_health(self) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        return self.connection_health.copy()

    async def _validate_websocket_symbols(self, symbols: list[str]) -> list[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ WebSocket"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            current_time = time.time()
            if current_time - self._symbols_cache_time < 3600:  # –ö—ç—à –Ω–∞ 1 —á–∞—Å
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
                valid_symbols = []
                for symbol in symbols:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–∏–º–≤–æ–ª–æ–≤
                    symbol_clean = symbol.replace('/', '').replace(':USDC', '').upper()
                    if symbol_clean in self._valid_symbols_cache:
                        valid_symbols.append(symbol)
                    else:
                        self.logger.log_event("WEBSOCKET", "DEBUG", f"Invalid symbol filtered: {symbol}")
                return valid_symbols

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ futures —Å–∏–º–≤–æ–ª–∞—Ö —á–µ—Ä–µ–∑ CCXT
                markets = self.exchange.exchange.load_markets()
                self._valid_symbols_cache = {
                    market['id'].upper() 
                    for market in markets.values() 
                    if market.get('settle') == 'USDC' and market.get('active', True)
                }
                self._symbols_cache_time = current_time
                self.logger.log_event("WEBSOCKET", "INFO", f"Updated valid symbols cache: {len(self._valid_symbols_cache)} symbols")
            except Exception as e:
                self.logger.log_event("WEBSOCKET", "ERROR", f"Failed to fetch exchange info: {e}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫–∞–∫ fallback
                return ["BTC/USDC:USDC", "ETH/USDC:USDC", "BNB/USDC:USDC"]

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã
            valid_symbols = []
            invalid_symbols = []

            for symbol in symbols:
                symbol_clean = symbol.replace('/', '').replace(':USDC', '').upper()

                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ —Å —á–∏—Å–ª–∞–º–∏
                if symbol_clean.startswith('1000'):
                    # 1000SHIB -> SHIBUSDC –∏ —Ç.–¥.
                    symbol_check = symbol_clean[4:] + 'USDC'
                elif symbol_clean == 'IP' or symbol_clean == 'IPUSDC':
                    # IP –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ Binance Futures
                    invalid_symbols.append(symbol)
                    continue
                elif symbol_clean == 'TRUMP' or symbol_clean == 'TRUMPUSDC':
                    # TRUMP –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                    invalid_symbols.append(symbol)
                    continue
                elif symbol_clean == 'KAITO' or symbol_clean == 'KAITOUSDC':
                    # KAITO –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                    invalid_symbols.append(symbol)
                    continue
                else:
                    symbol_check = symbol_clean + 'USDC'

                if symbol_check in self._valid_symbols_cache:
                    valid_symbols.append(symbol)
                else:
                    invalid_symbols.append(symbol)

            if invalid_symbols:
                self.logger.log_event("WEBSOCKET", "WARNING", f"Invalid symbols removed: {invalid_symbols}")

            if not valid_symbols:
                # Fallback –∫ –±–∞–∑–æ–≤—ã–º —Å–∏–º–≤–æ–ª–∞–º
                self.logger.log_event("WEBSOCKET", "WARNING", "No valid symbols found, using defaults")
                return ["BTC/USDC:USDC", "ETH/USDC:USDC", "BNB/USDC:USDC"]

            return valid_symbols

        except Exception as e:
            self.logger.log_event("WEBSOCKET", "ERROR", f"Symbol validation error: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤
            return ["BTC/USDC:USDC", "ETH/USDC:USDC"]

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket Manager"""
        try:
            self.is_running = False

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for symbol, connection in self.connections.items():
                if 'websocket' in connection:
                    try:
                        await connection['websocket'].close()
                    except Exception as e:
                        self.logger.log_event("WEBSOCKET", "WARNING", f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {symbol}: {e}")

            if self.user_stream_ws:
                try:
                    await self.user_stream_ws.close()
                except Exception as e:
                    self.logger.log_event("WEBSOCKET", "WARNING", f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è user stream: {e}")

            self.logger.log_event("WEBSOCKET", "INFO", "üõë WebSocket Manager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            self.logger.log_event("WEBSOCKET", "ERROR", f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ WebSocket: {e}")
