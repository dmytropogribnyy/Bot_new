#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π OptiFlow HFT Bot - –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞
–° –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –∏ –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
"""

import asyncio
import sys

from core.config import TradingConfig
from core.exchange_client import OptimizedExchangeClient
from core.order_manager import OrderManager
from core.profit_tracker import ProfitTracker
from core.strategy_manager import StrategyManager
from core.symbol_manager import SymbolManager
from core.unified_logger import UnifiedLogger


class SimplifiedTradingBot:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ä–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""

    def __init__(self):
        self.config = TradingConfig()
        self.logger = UnifiedLogger(self.config)
        self.exchange = OptimizedExchangeClient(self.config, self.logger)
        self.order_manager = OrderManager(self.config, self.exchange, self.logger)
        self.strategy_manager = StrategyManager(self.config, self.logger)
        self.symbol_manager = SymbolManager(self.config, self.logger)
        self.profit_tracker = ProfitTracker(self.config, self.logger)

        # –ü–æ–ª—É—á–∞–µ–º Telegram credentials
        telegram_token, telegram_chat_id = self.config.get_telegram_credentials()
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º Telegram Bot –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        self.telegram_bot = None  # TelegramBot(telegram_token, telegram_chat_id, self.logger)

        self.running = False
        self.stop_event = asyncio.Event()

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            self.logger.log_event("MAIN", "INFO", "üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ OptiFlow HFT Bot")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.logger.log_event("MAIN", "DEBUG", "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Exchange...")
            await self.exchange.initialize()
            self.logger.log_event("MAIN", "DEBUG", "‚úÖ Exchange –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            self.logger.log_event("MAIN", "DEBUG", "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OrderManager...")
            await self.order_manager.initialize()
            self.logger.log_event("MAIN", "DEBUG", "‚úÖ OrderManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            self.logger.log_event("MAIN", "DEBUG", "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è StrategyManager...")
            await self.strategy_manager.initialize()
            self.logger.log_event("MAIN", "DEBUG", "‚úÖ StrategyManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º exchange –≤ symbol_manager
            self.logger.log_event("MAIN", "DEBUG", "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SymbolManager...")
            self.symbol_manager.set_exchange(self.exchange)
            await self.symbol_manager.initialize()
            self.logger.log_event("MAIN", "DEBUG", "‚úÖ SymbolManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ó–∞–ø—É—Å–∫–∞–µ–º profit tracker
            self.logger.log_event("MAIN", "DEBUG", "üîß –ó–∞–ø—É—Å–∫ ProfitTracker...")
            await self.profit_tracker.start_tracking()
            self.logger.log_event("MAIN", "DEBUG", "‚úÖ ProfitTracker –∑–∞–ø—É—â–µ–Ω")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º telegram bot
            self.logger.log_event("MAIN", "DEBUG", "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramBot...")
            if self.telegram_bot:
                try:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram Bot –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
                    asyncio.create_task(self.telegram_bot.run())
                    self.logger.log_event("MAIN", "DEBUG", "‚úÖ TelegramBot –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ")
                except Exception as e:
                    self.logger.log_event("MAIN", "WARNING", f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TelegramBot: {e}")
                    self.telegram_bot = None  # –û—Ç–∫–ª—é—á–∞–µ–º Telegram Bot –ø—Ä–∏ –æ—à–∏–±–∫–µ
            else:
                self.logger.log_event("MAIN", "WARNING", "‚ö†Ô∏è TelegramBot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

            self.running = True
            self.logger.log_event("MAIN", "INFO", "‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        except Exception as e:
            self.logger.log_event("MAIN", "ERROR", f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            import traceback

            self.logger.log_event("MAIN", "ERROR", f"Traceback: {traceback.format_exc()}")
            raise

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        self.logger.log_event("MAIN", "INFO", "üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        self.running = False
        self.stop_event.set()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        await self.exchange.cleanup()
        await self.order_manager.shutdown()

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º profit tracker
        await self.profit_tracker.stop_tracking()

        self.logger.log_event("MAIN", "INFO", "‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def trading_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)"""
        self.logger.log_event("MAIN", "INFO", "üîÑ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞")

        while self.running and not self.stop_event.is_set():
            try:
                self.logger.log_event("MAIN", "DEBUG", "üîÑ –ù–∞—á–∞–ª–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞")

                # 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                self.logger.log_event("MAIN", "DEBUG", "üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤...")
                symbols = await self.symbol_manager.get_active_symbols()
                self.logger.log_event(
                    "MAIN", "INFO", f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(symbols) if symbols else 0}"
                )

                if not symbols:
                    self.logger.log_event("MAIN", "WARNING", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
                    await asyncio.sleep(5)
                    continue

                # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–∑–∏—Ü–∏–π
                self.logger.log_event("MAIN", "DEBUG", "üìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–π...")
                current_positions = self.order_manager.get_position_count()  # –£–±–∏—Ä–∞–µ–º await
                max_positions = self.config.max_concurrent_positions
                self.logger.log_event(
                    "MAIN", "INFO", f"üìà –ü–æ–∑–∏—Ü–∏–π: {current_positions}/{max_positions}"
                )

                if current_positions >= max_positions:
                    self.logger.log_event(
                        "MAIN",
                        "INFO",
                        f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π ({current_positions}/{max_positions})",
                    )
                    await asyncio.sleep(10)
                    continue

                # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –∏ –∏—â–µ–º —Å–∏–≥–Ω–∞–ª—ã
                self.logger.log_event("MAIN", "DEBUG", f"üîç –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤: {symbols[:5]}")
                for symbol in symbols[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    if self.stop_event.is_set():
                        break

                    try:
                        self.logger.log_event("MAIN", "DEBUG", f"üìä –ê–Ω–∞–ª–∏–∑ {symbol}...")

                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                        ohlcv = await self.exchange.get_ohlcv(symbol, "15m", 100)
                        if not ohlcv:
                            self.logger.log_event(
                                "MAIN", "DEBUG", f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö OHLCV –¥–ª—è {symbol}"
                            )
                            continue

                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                        signal = await self.strategy_manager.analyze_symbol(symbol, ohlcv)
                        self.logger.log_event("MAIN", "DEBUG", f"üìä –°–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {signal}")

                        if signal and signal.get("should_enter"):
                            self.logger.log_event("MAIN", "INFO", f"üéØ –ù–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}")

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞
                            if not await self.order_manager.has_position(symbol):
                                self.logger.log_event(
                                    "MAIN", "INFO", f"üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é {symbol}"
                                )

                                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                                result = await self.order_manager.place_position_with_tp_sl(
                                    symbol=symbol,
                                    side=signal.get("side", "BUY"),
                                    quantity=signal.get("quantity", 0.001),
                                    entry_price=signal.get("entry_price", 0),
                                    leverage=5,
                                )

                                if result.get("success"):
                                    self.logger.log_event(
                                        "MAIN", "INFO", f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {symbol} | {result}"
                                    )
                                    if self.telegram_bot:
                                        try:
                                            await self.telegram_bot.send_message(
                                                f"üöÄ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: {symbol}\n"
                                                f"–°—Ç–æ—Ä–æ–Ω–∞: {signal.get('side')}\n"
                                                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {signal.get('quantity'):.6f}"
                                            )
                                        except Exception as e:
                                            self.logger.log_event(
                                                "MAIN",
                                                "WARNING",
                                                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}",
                                            )
                                else:
                                    self.logger.log_event(
                                        "MAIN",
                                        "ERROR",
                                        f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {result}",
                                    )
                            else:
                                self.logger.log_event(
                                    "MAIN", "DEBUG", f"‚è≠Ô∏è –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è {symbol}"
                                )

                    except Exception as e:
                        self.logger.log_event("MAIN", "ERROR", f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                        continue

                # 4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π
                self.logger.log_event("MAIN", "DEBUG", "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π...")
                await self.order_manager.monitor_positions()

                # 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self.logger.log_event("MAIN", "DEBUG", "üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
                await self.profit_tracker.update_stats()

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                self.logger.log_event("MAIN", "DEBUG", "‚è∏Ô∏è –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(5)

            except Exception as e:
                self.logger.log_event("MAIN", "ERROR", f"–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(10)

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.logger.log_event("MAIN", "INFO", "üöÄ –ù–∞—á–∞–ª–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞...")
            await self.initialize()
            self.logger.log_event("MAIN", "INFO", "‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
            self.logger.log_event("MAIN", "INFO", "üîÑ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
            await self.trading_loop()
            self.logger.log_event("MAIN", "INFO", "‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")

        except KeyboardInterrupt:
            self.logger.log_event("MAIN", "INFO", "–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            self.logger.log_event("MAIN", "ERROR", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback

            self.logger.log_event("MAIN", "ERROR", f"Traceback: {traceback.format_exc()}")
        finally:
            self.logger.log_event("MAIN", "INFO", "üõë –ù–∞—á–∞–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
            await self.shutdown()


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    bot = SimplifiedTradingBot()
    await bot.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
