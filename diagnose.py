import asyncio
import os
import sys

from core.config import TradingConfig
from core.unified_logger import UnifiedLogger

if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –û—Ç–∫–ª—é—á–∏—Ç—å Telegram –¥–ª—è —Ç–µ—Å—Ç–∞
os.environ["TELEGRAM_ENABLED"] = "false"


async def test_exchange():
    """Test exchange connection"""
    config = TradingConfig()
    logger = UnifiedLogger(config)

    print(f"üîß Config: testnet={config.testnet}, api_key={'‚úì' if config.api_key else '‚úó'}")

    from core.exchange_client import OptimizedExchangeClient

    exchange = OptimizedExchangeClient(config, logger)
    print("üì° Before init: exchange object created")

    try:
        await exchange.initialize()
        print("‚úÖ Exchange initialized!")

        if hasattr(exchange.exchange, "urls"):
            api_url = exchange.exchange.urls.get("api", "unknown")
            print(f"üì° After init: API URL={api_url}")
    except Exception as e:
        print(f"‚ùå Init error: {e}")
        return

    # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    try:
        from core.symbol_utils import normalize_symbol

        symbol = normalize_symbol(f"BTC/{config.resolved_quote_coin}:{config.resolved_quote_coin}")
        ticker = await exchange.exchange.fetch_ticker(symbol)
        print(f"‚úÖ {symbol} price: {ticker['last']}")
    except Exception as e:
        print(f"‚ùå Ticker error: {e}")

    # –¢–µ—Å—Ç –±–∞–ª–∞–Ω—Å–∞
    try:
        from core.balance_utils import free

        balance = await exchange.exchange.fetch_balance()
        quote_balance = free(balance, config.resolved_quote_coin)
        print(f"‚úÖ Balance: {quote_balance} {config.resolved_quote_coin}")
    except Exception as e:
        print(f"‚ùå Balance error: {e}")


# –ó–∞–ø—É—Å—Ç–∏—Ç—å
asyncio.run(test_exchange())
