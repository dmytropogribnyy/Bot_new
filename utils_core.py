import csv
import json
import os
import time
from datetime import datetime
from pathlib import Path
from threading import Lock

from common.config_loader import LEVERAGE_MAP, SYMBOLS_ACTIVE
from constants import ENTRY_LOG_FILE, STATE_FILE
from core.exchange_init import exchange
from telegram.telegram_utils import send_telegram_message
from utils_logging import log

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∞
CACHE_TTL = 30
api_cache = {
    "balance": {"value": None, "timestamp": 0},
    "positions": {"value": [], "timestamp": 0},
}
cache_lock = Lock()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
DEFAULT_STATE = {
    "stopping": False,
    "shutdown": False,
    "allowed_user_id": 383821734,
}
state_lock = Lock()

# Runtime config
RUNTIME_CONFIG_FILE = Path("data/runtime_config.json")


def ensure_data_directory():
    """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞."""
    data_dir = "data/"
    if not os.path.exists(data_dir):
        try:
            os.makedirs(data_dir, exist_ok=True)
            log(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {data_dir}", level="INFO")
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {data_dir}: {e}", level="ERROR")
            return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    try:
        test_file = os.path.join(data_dir, ".test_access")
        with open(test_file, "w") as f:
            f.write("test")
        os.remove(test_file)
        return True
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {data_dir}: {e}", level="ERROR")
        return False


def get_cached_balance():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å (totalMarginBalance)."""
    with cache_lock:
        now = time.time()
        if (now - api_cache["balance"]["timestamp"] > CACHE_TTL) or (api_cache["balance"]["value"] is None):
            try:
                balance_info = exchange.fetch_balance()
                total_margin = float(balance_info["info"].get("totalMarginBalance", 0))
                api_cache["balance"]["value"] = total_margin
                api_cache["balance"]["timestamp"] = now
                log(f"Updated balance cache: {total_margin} USDC", level="DEBUG")
            except Exception as e:
                log(f"Error fetching balance: {e}", level="ERROR")
                send_telegram_message(f"‚ö†Ô∏è Failed to fetch balance: {e}", force=True)
                return api_cache["balance"]["value"] if api_cache["balance"]["value"] is not None else 0.0
        return api_cache["balance"]["value"]


def get_cached_positions():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (exchange.fetch_positions)."""
    with cache_lock:
        now = time.time()
        if (now - api_cache["positions"]["timestamp"] > CACHE_TTL) or (not api_cache["positions"]["value"]):
            try:
                all_positions = exchange.fetch_positions()
                api_cache["positions"]["value"] = all_positions
                api_cache["positions"]["timestamp"] = now
                log(f"Updated positions cache: {len(all_positions)} positions", level="DEBUG")
            except Exception as e:
                log(f"Error fetching positions: {e}", level="ERROR")
                send_telegram_message(f"‚ö†Ô∏è Failed to fetch positions: {e}", force=True)
                return api_cache["positions"]["value"] if api_cache["positions"]["value"] else []
        return api_cache["positions"]["value"]


def initialize_cache():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data/."""
    if not ensure_data_directory():
        send_telegram_message("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data/. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.", force=True)

    get_cached_balance()
    get_cached_positions()
    log("API cache initialized", level="INFO")


def load_state():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ (stopping, shutdown –∏ –ø—Ä.) –∏–∑ STATE_FILE."""
    with state_lock:
        try:
            if not os.path.exists(STATE_FILE):
                log(f"State file {STATE_FILE} not found, using default state.", level="INFO")
                return DEFAULT_STATE.copy()

            with open(STATE_FILE, "r", encoding="utf-8") as f:
                state = json.load(f)
            # –ó–∞–ø–æ–ª–Ω–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            for k, v in DEFAULT_STATE.items():
                if k not in state:
                    state[k] = v
            return state

        except json.JSONDecodeError as e:
            log(f"Error decoding state file {STATE_FILE}: {e}. Using default state.", level="ERROR", important=True)
            send_telegram_message(f"‚ùå Error decoding state file {STATE_FILE}: {str(e)}. Reset to default state.", force=True)
            return DEFAULT_STATE.copy()
        except Exception as e:
            log(f"Unexpected error loading state file {STATE_FILE}: {e}. Using default state.", level="ERROR", important=True)
            send_telegram_message(f"‚ùå Unexpected error loading state file {STATE_FILE}: {str(e)}. Reset to default state.", force=True)
            return DEFAULT_STATE.copy()


def save_state(state, retries=3, delay=1):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –≤ STATE_FILE —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏ —Ä–µ—Ç—Ä–∞—è."""
    attempt = 0
    while attempt < retries:
        with state_lock:
            try:
                temp_file = STATE_FILE + ".tmp"
                with open(temp_file, "w", encoding="utf-8") as f:
                    json.dump(state, f, indent=4)
                os.replace(temp_file, STATE_FILE)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                with open(STATE_FILE, "r", encoding="utf-8") as f:
                    saved_state = json.load(f)
                if saved_state != state:
                    log(f"State mismatch after save: expected {state}, got {saved_state}", level="ERROR")
                    raise ValueError("State mismatch after save")
                return
            except Exception as e:
                attempt += 1
                log(f"Attempt {attempt}/{retries} - Error saving state to {STATE_FILE}: {e}", level="ERROR", important=True)
                if attempt == retries:
                    send_telegram_message(f"‚ùå Failed to save state to {STATE_FILE} after {retries} attempts: {str(e)}", force=True)
                else:
                    time.sleep(delay)

    log(f"Failed to save state after {retries} retries.", level="ERROR")


def safe_call_retry(func, *args, tries=3, delay=1, label="API call", **kwargs):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è API."""
    for attempt in range(tries):
        try:
            result = func(*args, **kwargs)
            if result is None:
                raise ValueError(f"{label} returned None")
            return result
        except Exception as e:
            log(f"{label} failed (attempt {attempt + 1}/{tries}): {e}", level="ERROR")
            if attempt < tries - 1:
                time.sleep(delay)
            else:
                log(f"{label} exhausted retries", level="ERROR")
                send_telegram_message(f"‚ö†Ô∏è {label} failed after {tries} retries", force=True)
                return None


def get_runtime_config() -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç runtime_config.json, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict –∏–ª–∏ –ø—É—Å—Ç–æ–π dict –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    if RUNTIME_CONFIG_FILE.exists():
        try:
            with open(RUNTIME_CONFIG_FILE, "r") as f:
                return json.load(f)
        except Exception as e:
            log(f"‚ö†Ô∏è Failed to load runtime_config.json: {e}", level="ERROR")
    return {}


def update_runtime_config(new_values: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç runtime_config.json –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è."""
    config = get_runtime_config()
    config.update(new_values)
    try:
        with open(RUNTIME_CONFIG_FILE, "w") as f:
            json.dump(config, f, indent=2)
        log(f"‚úÖ Runtime config updated: {new_values}", level="INFO")
    except Exception as e:
        log(f"‚ö†Ô∏è Failed to update runtime_config.json: {e}", level="ERROR")

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    history_path = Path("data/parameter_history.json")
    try:
        if history_path.exists():
            with open(history_path, "r") as f:
                history = json.load(f)
        else:
            history = []
        history.append({"timestamp": datetime.utcnow().isoformat(), "updates": new_values})
        with open(history_path, "w") as f:
            json.dump(history[-100:], f, indent=2)
    except Exception as e:
        log(f"‚ö†Ô∏è Error logging parameter history: {e}", level="WARNING")

    # Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        summary = "\n".join([f"{k}: {v}" for k, v in new_values.items()])
        send_telegram_message(f"üîß *runtime_config updated:*\n```\n{summary}\n```", markdown=True)
        log("[RuntimeConfig] Update notification sent to Telegram", level="INFO")
    except Exception as e:
        log(f"[RuntimeConfig] Telegram notification failed: {e}", level="WARNING")


def set_leverage_for_symbols():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–µ—á–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    for symbol in SYMBOLS_ACTIVE:
        leverage = LEVERAGE_MAP.get(symbol, 5)
        safe_call_retry(exchange.set_leverage, leverage, symbol, tries=3, delay=1, label=f"set_leverage {symbol}")
    log("Leverage set for all symbols", level="INFO")


def log_rejected_entry(symbol, reasons, breakdown):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–∫–∞–∑ –æ—Ç –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É. (–ë–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è score).
    """
    row = {
        "timestamp": datetime.utcnow().isoformat(),
        "symbol": symbol,
        "reasons": ",".join(reasons),
        "components": ";".join([f"{k}:{v:.2f}" for k, v in breakdown.items()]),
    }
    try:
        with open(ENTRY_LOG_FILE, mode="a", newline="", encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=row.keys())
            if f.tell() == 0:
                writer.writeheader()
            writer.writerow(row)
    except Exception as e:
        log(f"Failed to log rejected entry for {symbol}: {e}", level="ERROR")


def initialize_runtime_adaptive_config():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ runtime_config –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–±–µ–∑ HTF, score –∏ —Ç.–¥.).
    """
    balance = get_cached_balance() or 100

    if balance < 120:
        max_positions = 3
    elif balance < 300:
        max_positions = 5
    elif balance < 600:
        max_positions = 7
    else:
        max_positions = 10

    current_config = get_runtime_config()
    defaults = {
        "max_concurrent_positions": max_positions,
        "risk_multiplier": 1.0,
        "wick_sensitivity": 0.3,
        "rsi_threshold": 50,
        "rel_volume_threshold": 0.5,
        "SL_PERCENT": 0.015,
        "last_adaptation_timestamp": None,
        # –ú–æ–∂–µ—Ç–µ —É–±—Ä–∞—Ç—å "strategy_aggressiveness": 1.0, –µ—Å–ª–∏ –Ω–∏–≥–¥–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ
        "strategy_aggressiveness": 1.0,
    }

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ –∫–ª—é—á–µ–π
    missing = {k: v for k, v in defaults.items() if k not in current_config}
    if missing:
        update_runtime_config(missing)
        log(f"Initialized missing runtime config values: {missing}", level="INFO")


# –ü—Ä–∏–º–µ—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞
def get_adaptive_risk_percent(balance):
    """
    –ü—Ä–∏–º–µ—Ä –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∏—Å–∫–∞, —á–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ score.
    """
    if balance < 120:
        return 0.01  # 1%
    elif balance < 300:
        return 0.02  # 2%
    else:
        return 0.05  # 5%


def get_max_positions(balance):
    """
    –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏, –¥–∞—é—â–µ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–∑–∏—Ü–∏–π.
    """
    if balance < 120:
        return 2
    elif balance < 300:
        return 3
    else:
        return 5


def get_min_net_profit(balance):
    """–ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞ –ª–æ–≥–∏–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0."""
    return 0.0


def reset_state_flags():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç stopping –∏ shutdown –≤ state-—Ñ–∞–π–ª–µ."""
    st = load_state()
    st["stopping"] = False
    st["shutdown"] = False
    save_state(st)
    log("Reset stopping and shutdown flags in state file", level="INFO")


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è JSON-—Ñ–∞–π–ª–æ–≤ (–æ–±—â–∏–µ)
def load_json_file(path, default=None):
    """–ó–∞–≥—Ä—É–∑–∫–∞ JSON —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        if os.path.exists(path):
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        else:
            log(f"File not found: {path}", level="WARNING")
            return default if default is not None else {}
    except Exception as e:
        log(f"Error loading JSON file {path}: {e}", level="ERROR")
        return default if default is not None else {}


def save_json_file(path, data, indent=2):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        directory = os.path.dirname(path)
        if directory and not os.path.exists(directory):
            os.makedirs(directory)

        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=indent)
        log(f"Successfully saved data to {path}", level="DEBUG")
        return True
    except Exception as e:
        log(f"Error saving JSON file {path}: {e}", level="ERROR")
        return False


def is_optimal_trading_hour():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ¬´–Ω–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –≥–ª—É–±–æ–∫–æ–π –Ω–æ—á—å—é¬ª."""
    inactive_hours = [3, 4, 5, 6, 7]
    current_hour = datetime.utcnow().hour
    return current_hour not in inactive_hours


def normalize_symbol(symbol: str) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç –ø–∞—Ä—É –∫ —Ñ–æ—Ä–º–∞—Ç—É BASE/QUOTE:QUOTE –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤.
    –ü—Ä–∏–º–µ—Ä: "BTC-USDC" ‚Üí "BTC/USDC:USDC"
    """
    if not symbol:
        return ""

    # –û—Ç—Å–µ–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –¥–≤–æ–µ—Ç–æ—á–∏—è, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ":USDC"
    # split(':')[0] —É–±–∏—Ä–∞–µ—Ç –≤—Å—ë, —á—Ç–æ –∏–¥—ë—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è
    symbol = symbol.upper().split(":")[0]

    # –ú–µ–Ω—è–µ–º - –∏ : –Ω–∞ /
    symbol = symbol.replace("-", "/").replace(":", "/")

    # –ï—Å–ª–∏ –Ω–µ—Ç '/', –≤–µ—Ä–Ω—ë–º –∫–∞–∫ –µ—Å—Ç—å
    if "/" not in symbol:
        return symbol

    base, quote = symbol.split("/", 1)
    return f"{base}/{quote}:{quote}"


def calculate_atr_volatility(df, period: int = 14) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç ATR (Average True Range) –ø–æ DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ ['high', 'low', 'close'].
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (float).
    """
    try:
        import ta

        atr_series = ta.volatility.AverageTrueRange(high=df["high"], low=df["low"], close=df["close"], window=period).average_true_range()
        return float(atr_series.iloc[-1]) if len(atr_series) else 0.0
    except Exception as e:
        log(f"[calculate_atr_volatility] Error: {e}", level="ERROR")
        return 0.0


def get_market_volatility_index() -> float:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å BTC: ATR / —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
    (–ø—Ä–∏–º–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 0.5‚Äì2.0).
    """
    try:
        import pandas as pd
        import ta

        from core.binance_api import fetch_ohlcv

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π BTC/USDC (15–º)
        raw = fetch_ohlcv("BTC/USDC", timeframe="15m", limit=50)
        if not raw or len(raw) < 20:
            return 1.0

        df = pd.DataFrame(raw, columns=["time", "open", "high", "low", "close", "volume"])
        atr_series = ta.volatility.AverageTrueRange(high=df["high"], low=df["low"], close=df["close"], window=14).average_true_range()
        atr = atr_series.iloc[-1]
        close_price = float(df["close"].iloc[-1])

        return round(atr / close_price, 4) if close_price else 1.0

    except Exception as e:
        log(f"[Volatility] –û—à–∏–±–∫–∞ –≤ get_market_volatility_index: {e}", level="WARNING")
        return 1.0


if __name__ == "__main__":
    initialize_cache()
    print("Balance:", get_cached_balance())
    print("Positions:", len(get_cached_positions()))
