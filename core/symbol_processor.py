# symbol_processor.py

from common.config_loader import (
    MARGIN_SAFETY_BUFFER,
    MIN_NOTIONAL_OPEN,
    PRIORITY_SMALL_BALANCE_PAIRS,
    TAKER_FEE_RATE,
)
from core.binance_api import convert_symbol
from core.exchange_init import exchange
from core.order_utils import calculate_order_quantity
from core.score_evaluator import get_required_risk_reward_ratio, get_risk_percent_by_score
from core.strategy import fetch_data_multiframe, should_enter_trade
from core.tp_utils import calculate_tp_levels
from core.trade_engine import (
    get_market_regime,
    get_position_size,
    open_positions_lock,
)
from telegram.telegram_utils import send_telegram_message
from utils_core import (
    calculate_risk_reward_ratio,
    check_min_profit,
    get_max_positions,
    get_min_net_profit,
)
from utils_logging import log


def process_symbol(symbol, balance, last_trade_times, lock):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –ø–æ–∑–∏—Ü–∏–π,
    –¥–æ—Å—Ç—É–ø–Ω—É—é –º–∞—Ä–∂—É, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ fetch_data_multiframe,
    –∏ –≤ —Å–ª—É—á–∞–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ—Ç should_enter_trade(...).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–ª–∞–Ω–æ–º —Å–¥–µ–ª–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –≤—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.
    """

    try:
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if any(v is None for v in (symbol, balance, last_trade_times, lock)):
            log(
                f"‚ö†Ô∏è Skipping {symbol} ‚Äî invalid input parameters (symbol={symbol}, balance={balance})",
                level="ERROR",
            )
            return None

        # –ù–∞ –º–∞–ª–µ–Ω—å–∫–æ–º –¥–µ–ø–æ–∑–∏—Ç–µ (<300 USDC) —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–∞—Ä—ã
        if balance < 300 and symbol not in PRIORITY_SMALL_BALANCE_PAIRS:
            log(f"‚è© Skipping {symbol} ‚Äî not a priority pair for small accounts", level="DEBUG")
            return None

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–æ–∑–∏—Ü–∏—è–º
        with open_positions_lock:
            positions = exchange.fetch_positions()
            active_positions = sum(1 for pos in positions if float(pos.get("contracts", 0)) != 0)
            max_positions = get_max_positions(balance)

            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–Ω ‚Äî –≤—ã—Ö–æ–¥–∏–º
            if active_positions >= max_positions:
                log(
                    f"‚è© Skipping {symbol} ‚Äî max open positions ({max_positions}) reached " f"(current: {active_positions})",
                    level="DEBUG",
                )
                return None

            # –ï—Å–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª—É —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if get_position_size(symbol) > 0:
                log(f"‚è© Skipping {symbol} ‚Äî already have a position", level="DEBUG")
                return None

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–∞—Ä–∂–∏ (—Å —É—á—ë—Ç–æ–º –±—É—Ñ–µ—Ä–∞)
            balance_info = exchange.fetch_balance()
            margin_info = balance_info["info"]
            total_margin_balance = float(margin_info.get("totalMarginBalance", 0))
            pos_margin = float(margin_info.get("totalPositionInitialMargin", 0))
            order_margin = float(margin_info.get("totalOpenOrderInitialMargin", 0))
            available_margin = total_margin_balance - pos_margin - order_margin
            margin_with_buffer = available_margin * MARGIN_SAFETY_BUFFER

            if margin_with_buffer <= 0:
                log(
                    f"‚ö†Ô∏è Skipping {symbol} ‚Äî no available margin " f"(total: {total_margin_balance:.2f}, positions: {pos_margin:.2f}, orders: {order_margin:.2f})",
                    level="ERROR",
                )
                send_telegram_message(f"‚ö†Ô∏è No available margin for {symbol}", force=True)
                return None

        # === –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º—É–ª—å—Ç–∏—Ñ—Ä–µ–π–º–æ–º ===
        df = fetch_data_multiframe(symbol)
        if df is None:
            log(f"‚ö†Ô∏è Skipping {symbol} ‚Äî fetch_data_multiframe returned None", level="WARNING")
            send_telegram_message(f"‚ö†Ô∏è Failed to fetch data for {symbol}", force=True)
            return None

        # === –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª
        result = should_enter_trade(symbol, df, exchange, last_trade_times, lock)
        if not result:
            log(f"‚ùå No valid signal for {symbol}", level="DEBUG")
            return None

        # result –æ–±—ã—á–Ω–æ (direction, score, is_reentry), –ª–∏–±–æ None
        direction, score, is_reentry = result

        if direction not in ("buy", "sell"):
            log(f"‚ö†Ô∏è Skipping {symbol} ‚Äî invalid direction: {direction}", level="ERROR")
            return None

        # –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
        try:
            entry = float(df["close"].iloc[-1])
            if entry <= 0:
                log(f"‚ö†Ô∏è Skipping {symbol} ‚Äî invalid entry price {entry:.4f}", level="ERROR")
                return None
        except (IndexError, ValueError, TypeError) as e:
            log(f"‚ö†Ô∏è Skipping {symbol} ‚Äî error reading entry price: {e}", level="ERROR")
            return None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º (trend, flat, breakout...)
        regime = get_market_regime(symbol)

        # –°—á–∏—Ç–∞–µ–º TP/SL
        try:
            tp1, tp2, sl_price, share_tp1, share_tp2 = calculate_tp_levels(entry, direction, regime, score, df)
            if any(x is None for x in (tp1, sl_price, share_tp1)):
                log(
                    f"‚ö†Ô∏è Skipping {symbol} ‚Äî invalid TP/SL (tp1={tp1}, sl={sl_price}, share_tp1={share_tp1})",
                    level="ERROR",
                )
                return None
            log(
                f"DEBUG: {symbol} => TP1={tp1:.4f}, TP2={tp2}, SL={sl_price:.4f}, " f"TP1share={share_tp1}, TP2share={share_tp2}",
                level="DEBUG",
            )
        except Exception as e:
            log(f"‚ö†Ô∏è Skipping {symbol} ‚Äî error in calculate_tp_levels: {e}", level="ERROR")
            return None

        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∏—Å–∫ –ø–æ score
        risk_percent = get_risk_percent_by_score(balance, score)
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º qty
        try:
            qty = calculate_order_quantity(entry, sl_price, balance, risk_percent)
            if not qty or qty <= 0:
                log(f"‚ö†Ô∏è Skipping {symbol} ‚Äî invalid quantity: {qty}", level="ERROR")
                return None
        except Exception as e:
            log(f"‚ö†Ô∏è Skipping {symbol} ‚Äî error calculating quantity: {e}", level="ERROR")
            return None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Risk/Reward
        try:
            needed_rr = get_required_risk_reward_ratio(score)
            actual_rr = calculate_risk_reward_ratio(entry, tp1, sl_price, direction)

            # –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –¥–µ–ø–æ + —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–Ω–∏–∂–∞–µ–º R/R
            if balance < 300 and score >= 4.0:
                needed_rr *= 0.9
                log(f"üìä Lowering R/R => {needed_rr:.2f}", level="DEBUG")

            if actual_rr < needed_rr:
                log(
                    f"‚ö†Ô∏è Skipping {symbol} => R/R={actual_rr:.2f} < needed {needed_rr:.2f}",
                    level="WARNING",
                )
                return None
        except Exception as e:
            log(f"‚ö†Ô∏è Error evaluating R/R for {symbol}: {e}", level="ERROR")
            return None

        # –°–º–æ—Ç—Ä–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –ª–æ—Ç –±–∏—Ä–∂–∏
        try:
            api_symbol = convert_symbol(symbol)
            markets = exchange.load_markets()
            if api_symbol in markets and "limits" in markets[api_symbol] and "amount" in markets[api_symbol]["limits"] and "min" in markets[api_symbol]["limits"]["amount"]:
                ex_min_amount = markets[api_symbol]["limits"]["amount"]["min"]
                ex_min_notional = ex_min_amount * entry
            else:
                ex_min_notional = MIN_NOTIONAL_OPEN
        except Exception as e:
            log(f"‚ö†Ô∏è Using fallback MIN_NOTIONAL_OPEN for {symbol}, error: {e}", level="WARNING")
            ex_min_notional = MIN_NOTIONAL_OPEN

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º/–¥–æ–∫—Ä—É—á–∏–≤–∞–µ–º notional
        notional = qty * entry
        if notional < ex_min_notional:
            new_qty = ex_min_notional / entry
            # –ü—Ä–æ–≤–µ—Ä–∏–º –±—É—Ñ–µ—Ä –º–∞—Ä–∂–∏
            new_notional = new_qty * entry
            if new_notional <= margin_with_buffer:
                log(
                    f"‚ÑπÔ∏è Adjusting qty for {symbol} from {qty:.4f} to {new_qty:.4f} to meet min_notional {ex_min_notional:.2f}",
                    level="INFO",
                )
                qty = new_qty
                notional = new_notional
            else:
                log(f"‚ö†Ô∏è Still insufficient margin after adjusting notional for {symbol}", level="WARNING")
                return None

        # –ö–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±—ã–ª–∏
        try:
            enough_profit, expected_profit_tp1 = check_min_profit(entry, tp1, qty, share_tp1, direction, TAKER_FEE_RATE, get_min_net_profit(balance))
            if not enough_profit:
                log(
                    f"‚ö†Ô∏è Skipping {symbol} => expected profit ~ {expected_profit_tp1:.2f} USDC below threshold",
                    level="WARNING",
                )
                return None

            if balance < 300 and expected_profit_tp1 < 0.25:
                log(f"‚ö†Ô∏è Skipping {symbol} => expected profit {expected_profit_tp1:.2f} too small", level="WARNING")
                return None
        except Exception as e:
            log(f"‚ö†Ô∏è Profit check error for {symbol}: {e}", level="ERROR")
            return None

        log(
            f"{symbol} => direction={direction}, qty={qty:.4f}, notional={notional:.2f}, " f"score={score:.2f}, expProfit={expected_profit_tp1:.2f} USDC",
            level="INFO" if balance < 300 else "DEBUG",
        )

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–∞—Ä–∞ + –º–∞–ª–µ–Ω—å–∫–∏–π –¥–µ–ø–æ–∑–∏—Ç => Telegram
        if balance < 300 and symbol in PRIORITY_SMALL_BALANCE_PAIRS:
            send_telegram_message(
                f"‚úÖ [Small Account] Valid trade for {symbol}\nScore={score:.2f}, Profit‚âà{expected_profit_tp1:.2f}",
                force=True,
            )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –ø–ª–∞–Ω —Å–¥–µ–ª–∫–∏
        return {
            "symbol": symbol,
            "direction": direction,
            "qty": qty,
            "entry": entry,
            "tp1": tp1,
            "tp2": tp2,
            "sl": sl_price,
            "score": score,
            "is_reentry": is_reentry,
        }

    except Exception as e:
        log(f"üî• Error in process_symbol({symbol}): {e}", level="ERROR")
        send_telegram_message(f"‚ùå process_symbol error for {symbol}: {e}", force=True)
        return None
