# score_evaluator.py
import threading
from datetime import datetime

from common.config_loader import (
    ADAPTIVE_SCORE_ENABLED,
    DRY_RUN,
    SCORE_WEIGHTS,
)
from utils_logging import log

last_score_data = {}
last_score_lock = threading.Lock()


def get_adaptive_min_score(balance, market_volatility=None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–∞ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞.

    Args:
        balance: –†–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞
        market_volatility: –û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞ (high/medium/low)

    Returns:
        –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É
    """
    # –ë–∞–∑–æ–≤—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–ª–∞–Ω—Å–∞
    if balance < 100:
        base_threshold = 2.5  # –°–Ω–∏–∂–µ–Ω–æ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    elif balance < 200:
        base_threshold = 3.0
    else:
        base_threshold = 3.5

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞
    if market_volatility == "high":
        # –í –≤—ã—Å–æ–∫–æ–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ–º —Ä—ã–Ω–∫–µ —Å–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è - –±–æ–ª—å—à–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        return max(2.0, base_threshold - 0.5)
    elif market_volatility == "low":
        # –í –Ω–∏–∑–∫–æ–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ–º —Ä—ã–Ω–∫–µ –ø–æ–≤—ã—à–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è - –º–µ–Ω—å—à–µ –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        return base_threshold + 0.5

    return base_threshold


def get_risk_percent_by_score(balance, score):
    """
    –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ score –∏ —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–∞.

    Args:
        balance: –†–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞
        score: –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞ (1-5)

    Returns:
        –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
    """
    from utils_core import get_adaptive_risk_percent

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–∞
    base_risk = get_adaptive_risk_percent(balance)

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∏—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç score
    if score < 3.0:
        risk = base_risk * 0.5  # 50% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ä–∏—Å–∫–∞ –¥–ª—è —Å–ª–∞–±—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    elif score < 3.5:
        risk = base_risk * 0.75  # 75% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ä–∏—Å–∫–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    elif score < 4.0:
        risk = base_risk  # 100% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ä–∏—Å–∫–∞ –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    else:
        risk = min(base_risk * 1.2, 0.02)  # 120% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ä–∏—Å–∫–∞ –¥–ª—è –æ—Ç–ª–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 2%

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    if balance < 100:
        risk = min(risk, 0.01)  # –ù–µ –±–æ–ª–µ–µ 1% –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –º–µ–Ω–µ–µ 100 USDC

    return risk


def get_required_risk_reward_ratio(score):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ç—Ä–µ–±—É–µ–º–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç score.

    Args:
        score: –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞ (1-5)

    Returns:
        –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
    """
    if score < 3.0:
        return 2.0  # –î–ª—è —Å–ª–∞–±—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Ç—Ä–µ–±—É–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:2
    elif score < 3.5:
        return 1.7  # –î–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Ç—Ä–µ–±—É–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:1.7
    elif score < 4.0:
        return 1.5  # –î–ª—è —Ö–æ—Ä–æ—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Ç—Ä–µ–±—É–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:1.5
    else:
        return 1.3  # –î–ª—è –æ—Ç–ª–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Ç—Ä–µ–±—É–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:1.3


def calculate_score(df, symbol=None, trade_count=0, winrate=0.0):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π score –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–æ 0‚Äì5.

    Args:
        df (pd.DataFrame): –î–∞–Ω–Ω—ã–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏.
        symbol (str, optional): –°–∏–º–≤–æ–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
        trade_count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ (–¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–æ—Ä–æ–≥–∞).
        winrate (float): –í–∏–Ω—Ä–µ–π—Ç (–¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–æ—Ä–æ–≥–∞).
    """
    from utils_core import get_cached_balance

    raw_score = 0.0
    price = df["close"].iloc[-1]
    ema = df["ema"].iloc[-1]
    rsi = df["rsi"].iloc[-1]
    macd = df["macd"].iloc[-1]
    signal = df["macd_signal"].iloc[-1]
    htf_trend = df.get("htf_trend", [False])[-1]

    score_weights = SCORE_WEIGHTS
    max_raw_score = sum(score_weights.values())

    breakdown = {
        "RSI": 0,
        "MACD_RSI": 0,
        "MACD_EMA": 0,
        "HTF": 0,
        "VOLUME": 0,
    }

    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ RSI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–µ–Ω–¥–∞
    rsi_lo, rsi_hi = (35, 65)
    if ADAPTIVE_SCORE_ENABLED:
        if price > ema:
            rsi_lo, rsi_hi = (40, 70)
        else:
            rsi_lo, rsi_hi = (30, 60)

    # RSI: +1 –µ—Å–ª–∏ RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏
    if rsi < rsi_lo or rsi > rsi_hi:
        raw_score += score_weights["RSI"]
        breakdown["RSI"] = score_weights["RSI"]

    # MACD/RSI: +1 –µ—Å–ª–∏ MACD –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç RSI
    if (macd > signal and rsi < 50) or (macd < signal and rsi > 50):
        raw_score += score_weights["MACD_RSI"]
        breakdown["MACD_RSI"] = score_weights["MACD_RSI"]

    # MACD/EMA: +1 –µ—Å–ª–∏ MACD –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ç—Ä–µ–Ω–¥ –ø–æ EMA
    if (macd > signal and price > ema) or (macd < signal and price < ema):
        raw_score += score_weights["MACD_EMA"]
        breakdown["MACD_EMA"] = score_weights["MACD_EMA"]

    # HTF: +1 –µ—Å–ª–∏ —Ç—Ä–µ–Ω–¥ –Ω–∞ —Å—Ç–∞—Ä—à–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç
    if htf_trend and price > ema:
        raw_score += score_weights["HTF"]
        breakdown["HTF"] = score_weights["HTF"]

    # –û–±—ä—ë–º: +0.5 –µ—Å–ª–∏ –æ–±—ä—ë–º –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
    avg_volume = df["volume"].mean()
    if df["volume"].iloc[-1] > avg_volume:
        raw_score += score_weights["VOLUME"]
        breakdown["VOLUME"] = score_weights["VOLUME"]

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è score –¥–æ 0‚Äì5
    normalized_score = (raw_score / max_raw_score) * 5
    final_score = round(normalized_score, 1)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    balance = get_cached_balance()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É)
    market_volatility = "medium"
    if "atr" in df.columns and not df["atr"].empty:
        atr_pct = df["atr"].iloc[-1] / price
        if atr_pct > 0.02:  # 2% ATR —Å—á–∏—Ç–∞–µ–º –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
            market_volatility = "high"
        elif atr_pct < 0.005:  # 0.5% ATR —Å—á–∏—Ç–∞–µ–º –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
            market_volatility = "low"

    # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    min_score = get_adaptive_min_score(balance, market_volatility)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π score
    with last_score_lock:
        last_score_data[symbol] = {
            "symbol": symbol,
            "total": final_score,
            "details": breakdown,
            "threshold": min_score,
            "final": final_score >= min_score,
            "timestamp": datetime.utcnow(),
        }

    if DRY_RUN:
        log(
            f"{symbol or ''} üìä Score: {final_score:.1f}/5 (raw: {raw_score:.2f}/{max_raw_score:.1f}), " f"Min required: {min_score:.1f}, Market volatility: {market_volatility}",
            level="DEBUG",
        )

    return final_score


def explain_score(df):
    """
    –û–±—ä—è—Å–Ω—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä—ã, –ø–æ–≤–ª–∏—è–≤—à–∏–µ –Ω–∞ —Ä–∞—Å—á–µ—Ç score, –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ.
    """
    price = df["close"].iloc[-1]
    ema = df["ema"].iloc[-1]
    rsi = df["rsi"].iloc[-1]
    macd = df["macd"].iloc[-1]
    signal = df["macd_signal"].iloc[-1]
    htf_trend = df.get("htf_trend", [False])[-1]

    parts = []
    if rsi < 35 or rsi > 65:
        parts.append("‚úÖ RSI extreme")
    if (macd > signal and rsi < 50) or (macd < signal and rsi > 50):
        parts.append("‚úÖ MACD/RSI aligned")
    if (macd > signal and price > ema) or (macd < signal and price < ema):
        parts.append("‚úÖ Price/MACD vs EMA aligned")
    if htf_trend and price > ema:
        parts.append("‚úÖ HTF trend confirmed")
    if df["volume"].iloc[-1] > df["volume"].mean():
        parts.append("‚úÖ Volume above average")

    return "\n".join(parts) if parts else "‚ùå No significant signals"


def get_last_score_breakdown(symbol=None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–º score.

    Args:
        symbol: –°–∏–º–≤–æ–ª –ø–∞—Ä—ã (–µ—Å–ª–∏ None, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–ª—è –ª—é–±–æ–π –ø–∞—Ä—ã)

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ score –∏–ª–∏ None
    """
    with last_score_lock:
        if not last_score_data:
            return None
        if symbol:
            return last_score_data.get(symbol)
        return max(last_score_data.values(), key=lambda x: x["timestamp"], default=None)
