# core/position_manager.py
"""
Position management module for BinanceBot
Controls position limits, size calculations, and validates new position requests
"""

# Import from project modules
from core.risk_utils import get_max_positions
from utils_core import extract_symbol, safe_call_retry
from utils_logging import log


def get_open_positions_count():
    """
    Get the current number of open positions
    Returns: int - Number of open positions
    """
    from core.exchange_init import exchange

    try:
        positions = safe_call_retry(exchange.fetch_positions)
        open_positions = [p for p in positions if float(p.get("positionAmt", 0)) != 0]
        return len(open_positions)
    except Exception as e:
        log(f"Error in get_open_positions_count: {e}", level="ERROR")
        # Default to a safe value if we can't get actual count
        return get_max_positions()


def can_open_new_position(balance):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é —Å —É—á—ë—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤:
    - –ª–∏–º–∏—Ç –Ω–∞ —á–∏—Å–ª–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    - –ª–∏–º–∏—Ç –Ω–∞ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª (‚â§85%)

    Args:
        balance (float): –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ USDC

    Returns:
        bool: True, –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é; False ‚Äî –µ—Å–ª–∏ –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω
    """
    from core.risk_utils import get_max_positions
    from utils_core import get_total_position_value
    from utils_logging import log

    current_positions = get_open_positions_count()
    max_positions = get_max_positions(balance)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–∑–∏—Ü–∏–π
    if current_positions >= max_positions:
        log(f"[PositionLimit] ‚ùå {current_positions}/{max_positions} –ø–æ–∑–∏—Ü–∏–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã", level="INFO")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø–∏—Ç–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    position_value = get_total_position_value()
    cap_usage = position_value / balance if balance > 0 else 1

    # üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ø–∏—Ç–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    log(f"[DEBUG] Capital check ‚Üí position_value={position_value:.2f}, balance={balance:.2f}, usage={cap_usage:.2%}", level="DEBUG")

    if cap_usage > 0.85:
        log(f"[CapitalLimit] ‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {cap_usage:.2%} –∫–∞–ø–∏—Ç–∞–ª–∞ (>85%)", level="INFO")
        return False

    log(f"[PositionCheck] ‚úÖ {current_positions}/{max_positions} –ø–æ–∑–∏—Ü–∏–π. Capital used: {cap_usage:.2%}", level="DEBUG")
    return True


def check_entry_allowed(balance):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (True, None) –µ—Å–ª–∏ –¥–∞,
             –∏–ª–∏ (False, –ø—Ä–∏—á–∏–Ω–∞) –µ—Å–ª–∏ –Ω–µ—Ç.
    """
    from core.risk_utils import get_max_positions
    from utils_core import get_total_position_value
    from utils_logging import log

    current_positions = get_open_positions_count()
    max_positions = get_max_positions(balance)

    if current_positions >= max_positions:
        log(f"[EntryCheck] ‚ùå Too many positions: {current_positions}/{max_positions}", level="INFO")
        return False, "position_limit_reached"

    position_value = get_total_position_value()
    cap_usage = position_value / balance if balance > 0 else 1

    # üîç –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞–ø–∏—Ç–∞–ª–∞
    log(f"[DEBUG] Capital check ‚Üí position_value={position_value:.2f}, balance={balance:.2f}, usage={cap_usage:.2%}", level="DEBUG")

    if cap_usage > 0.85:
        log(f"[EntryCheck] ‚ùå Capital usage too high: {cap_usage:.2%}", level="INFO")
        return False, "capital_utilization_limit"

    log(f"[EntryCheck] ‚úÖ Allowed to enter. Positions: {current_positions}/{max_positions}, Capital used: {cap_usage:.2%}", level="DEBUG")
    return True, None


def can_increase_position(symbol, additional_qty):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é.

    Args:
        symbol (str): –¢–∏–∫–µ—Ä
        additional_qty (float): –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä—ë–º

    Returns:
        bool: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ, False –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –∏–ª–∏ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏
    """
    symbol = extract_symbol(symbol)
    from core.exchange_init import exchange
    from core.risk_utils import calculate_position_value_limit
    from utils_core import get_cached_balance, safe_call_retry
    from utils_logging import log

    try:
        balance = get_cached_balance()
        position = safe_call_retry(exchange.fetch_position, symbol)

        if not position or float(position.get("positionAmt", 0)) == 0:
            log(f"[Check] ‚ùå –ù–µ–ª—å–∑—è —É–≤–µ–ª–∏—á–∏—Ç—å ‚Äî –ø–æ–∑–∏—Ü–∏—è –ø–æ {symbol} –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", level="DEBUG")
            return False

        current_value = abs(float(position.get("positionValue", 0)))
        current_price = float(position.get("entryPrice", 0))
        additional_value = additional_qty * current_price
        new_total = current_value + additional_value

        max_position_value = calculate_position_value_limit(balance)

        # üîç –õ–æ–≥–∏—Ä—É–µ–º –ª–∏–º–∏—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏
        log(
            f"[DEBUG] Increase check for {symbol} ‚Üí current_value={current_value:.2f}, " f"add={additional_value:.2f}, new_total={new_total:.2f}, max={max_position_value:.2f}", level="DEBUG"
        )

        if new_total > max_position_value:
            log(f"[Check] ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {new_total:.2f} > {max_position_value:.2f}", level="INFO")
            return False

        log(f"[Check] ‚úÖ –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é {symbol} –Ω–∞ {additional_qty}", level="DEBUG")
        return True

    except Exception as e:
        log(f"Error in can_increase_position for {symbol}: {e}", level="ERROR")
        return False


def execute_position_increase(symbol, side, additional_qty):
    """
    –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é.

    Args:
        symbol (str): –¢–∏–∫–µ—Ä
        side (str): 'BUY' –∏–ª–∏ 'SELL'
        additional_qty (float): –û–±—ä—ë–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–¥–µ—Ä–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    symbol = extract_symbol(symbol)
    from core.exchange_init import exchange
    from utils_core import safe_call_retry
    from utils_logging import log

    try:
        order_type = "MARKET"
        side = side.upper()

        log(f"[DEBUG] Executing position increase: {symbol}, side={side}, qty={additional_qty}", level="DEBUG")

        order = safe_call_retry(exchange.create_order, symbol=symbol, type=order_type, side=side, amount=additional_qty)

        log(f"[Position] {symbol} üìà –£–≤–µ–ª–∏—á–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ {additional_qty} —á–µ—Ä–µ–∑ {side} {order_type}", level="INFO")
        log(f"[DEBUG] Order result: {order}", level="DEBUG")

        return order

    except Exception as e:
        log(f"Error in execute_position_increase for {symbol}: {e}", level="ERROR")
        return None


def execute_partial_close(symbol, side, reduction_qty):
    """
    –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é.

    Args:
        symbol (str): –¢–∏–∫–µ—Ä
        side (str): –ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ('BUY' –∏–ª–∏ 'SELL')
        reduction_qty (float): –û–±—ä—ë–º –∑–∞–∫—Ä—ã—Ç–∏—è

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–¥–µ—Ä–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    symbol = extract_symbol(symbol)
    from core.exchange_init import exchange
    from utils_core import safe_call_retry
    from utils_logging import log

    try:
        close_side = "SELL" if side.upper() == "BUY" else "BUY"
        order_type = "MARKET"

        log(f"[DEBUG] Executing partial close: {symbol}, side={close_side}, qty={reduction_qty}", level="DEBUG")

        order = safe_call_retry(exchange.create_order, symbol=symbol, type=order_type, side=close_side, amount=reduction_qty)

        log(f"[Position] {symbol} üîí –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ: {reduction_qty} —á–µ—Ä–µ–∑ {close_side} {order_type}", level="INFO")
        log(f"[DEBUG] Order result: {order}", level="DEBUG")

        return order

    except Exception as e:
        log(f"Error in execute_partial_close for {symbol}: {e}", level="ERROR")
        return None
