import json
from pathlib import Path
from time import sleep

import ccxt

API_KEY = "w2LwaYZq0x1t50ARb3IP69y9XQLssukr78dSnFcQF9XfbngkELA8hprvtTPAhX5S"
API_SECRET = "hmG7FVUeyQ8wK09596iDJE8ipQqWvpdlRZ8obwAnCwOa8qlZyHyO9fTvr6oQvMFD"

exchange = ccxt.binance(
    {
        "apiKey": API_KEY,
        "secret": API_SECRET,
        "enableRateLimit": True,
        "options": {
            "defaultType": "future",
            "adjustForTimeDifference": True,
        },
    }
)


def test_fetch_ohlcv(symbol, tf="3m", limit=300):
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å OHLCV-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π (int) –∏–ª–∏ 0 –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    try:
        candles = exchange.fetch_ohlcv(symbol, timeframe=tf, limit=limit)
        return len(candles)
    except Exception as e:
        print(f"   ‚ùå {symbol} [{tf}] ‚Äî error: {str(e)}")
        return 0


def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä—ã–Ω–∫–æ–≤
    markets = exchange.load_markets()
    print(f"\n‚úÖ Loaded {len(markets)} markets total on Binance Futures (USDC)\n")

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDC-—Ñ—å—é—á–µ—Ä—Å—ã
    usdc_symbols = [
        s
        for s in markets
        if "USDC" in s and "/USDC" in s and markets[s].get("contract")  # –≠—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞
    ]
    print(f"üß© Found {len(usdc_symbols)} USDC futures symbols (raw)\n")

    valid_symbols = []

    total_usdc = len(usdc_symbols)
    for i, symbol in enumerate(usdc_symbols, start=1):
        print(f"[{i}/{total_usdc}] Checking {symbol} ...", end="")
        count_3m = test_fetch_ohlcv(symbol, tf="3m")
        count_5m = test_fetch_ohlcv(symbol, tf="5m")
        count_15m = test_fetch_ohlcv(symbol, tf="15m")

        # –ö—Ä–∏—Ç–µ—Ä–∏–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö ‚Äî –º–∏–Ω–∏–º—É–º 30 —Å–≤–µ—á–µ–π
        if min(count_3m, count_5m, count_15m) >= 30:
            print(f"   ‚úÖ OK (3m={count_3m}, 5m={count_5m}, 15m={count_15m})")
            valid_symbols.append(symbol)
        else:
            print(f"   ‚ö†Ô∏è INSUFFICIENT DATA (3m={count_3m}, 5m={count_5m}, 15m={count_15m})")

        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ rate limit
        sleep(0.5)

    # === –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª ===
    data_dir = Path("data")
    data_dir.mkdir(exist_ok=True)
    path = data_dir / "valid_usdc_symbols.json"
    with path.open("w", encoding="utf-8") as f:
        json.dump(valid_symbols, f, indent=2)

    # === –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ ===
    total = len(usdc_symbols)
    valid = len(valid_symbols)
    skipped = total - valid

    print(f"\nüéØ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {total} USDC-–ø–∞—Ä")
    print(f"   ‚úî –í–∞–ª–∏–¥–Ω—ã—Ö: {valid}")
    print(f"   ‚úñ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
    print(f"üìÅ –°–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {path.resolve()}\n")


if __name__ == "__main__":
    main()
