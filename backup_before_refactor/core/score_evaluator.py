# score_evaluator.py
import threading
import time
from datetime import datetime

import pandas as pd

from utils_logging import log

last_score_data = {}
last_score_lock = threading.Lock()


def get_adaptive_min_score(trade_count, winrate):
    # Move imports inside the function
    from config import EXPORT_PATH
    from utils_core import get_cached_balance

    balance = get_cached_balance()

    # –ê–¥–∞–ø—Ç–∞—Ü–∏—è base –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
    if balance < 100:
        base = 2.0  # –°–º—è–≥—á–∞–µ–º –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ < 100 –¥–æ–ª–ª–∞—Ä–æ–≤
    elif 100 <= balance < 500:
        base = 2.25
    elif 500 <= balance < 1000:
        base = 2.5
    else:
        base = 2.0  # –î–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ ‚â• 1000 –¥–æ–ª–ª–∞—Ä–æ–≤

    if trade_count < 20:
        threshold = base + 0.25  # –£–º–µ–Ω—å—à–∞–µ–º –≤–ª–∏—è–Ω–∏–µ trade_count
    else:
        threshold = base - (winrate - 0.5) * 1.0  # –í–ª–∏—è–Ω–∏–µ winrate ¬±0.5

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç—ã —Å–¥–µ–ª–æ–∫
    if trade_count > 0:
        try:
            df = pd.read_csv(EXPORT_PATH)
            if not df.empty:
                days = (time.time() - pd.to_datetime(df["Date"]).min().timestamp()) / (24 * 60 * 60)
                trades_per_day = trade_count / max(days, 1)
                if trades_per_day < 1:
                    threshold -= 0.25  # –°–º—è–≥—á–∞–µ–º, –µ—Å–ª–∏ —Å–¥–µ–ª–æ–∫ –º–∞–ª–æ
                elif trades_per_day > 5:
                    threshold += 0.25  # –£–∂–µ—Å—Ç–æ—á–∞–µ–º, –µ—Å–ª–∏ —Å–¥–µ–ª–æ–∫ –º–Ω–æ–≥–æ
        except Exception as e:
            log(f"[ERROR] Failed to calculate trades per day: {e}")

    return max(threshold, base - 0.5)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥


def calculate_score(df, symbol=None, trade_count=0, winrate=0.0):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π score –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–æ 0‚Äì5.

    Args:
        df (pd.DataFrame): –î–∞–Ω–Ω—ã–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏.
        symbol (str, optional): –°–∏–º–≤–æ–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
        trade_count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ (–¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–æ—Ä–æ–≥–∞).
        winrate (float): –í–∏–Ω—Ä–µ–π—Ç (–¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–æ—Ä–æ–≥–∞).
    """
    # Move imports inside the function
    from config import ADAPTIVE_SCORE_ENABLED, DRY_RUN, SCORE_WEIGHTS

    raw_score = 0.0
    price = df["close"].iloc[-1]
    ema = df["ema"].iloc[-1]
    rsi = df["rsi"].iloc[-1]
    macd = df["macd"].iloc[-1]
    signal = df["macd_signal"].iloc[-1]
    htf_trend = df.get("htf_trend", [False])[-1]

    score_weights = SCORE_WEIGHTS
    max_raw_score = sum(score_weights.values())

    breakdown = {
        "RSI": 0,
        "MACD_RSI": 0,
        "MACD_EMA": 0,
        "HTF": 0,
        "VOLUME": 0,
    }

    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ RSI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–µ–Ω–¥–∞
    rsi_lo, rsi_hi = (35, 65)
    if ADAPTIVE_SCORE_ENABLED:
        if price > ema:
            rsi_lo, rsi_hi = (40, 70)
        else:
            rsi_lo, rsi_hi = (30, 60)

    # RSI: +1 –µ—Å–ª–∏ RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏
    if rsi < rsi_lo or rsi > rsi_hi:
        raw_score += score_weights["RSI"]
        breakdown["RSI"] = score_weights["RSI"]

    # MACD/RSI: +1 –µ—Å–ª–∏ MACD –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç RSI
    if (macd > signal and rsi < 50) or (macd < signal and rsi > 50):
        raw_score += score_weights["MACD_RSI"]
        breakdown["MACD_RSI"] = score_weights["MACD_RSI"]

    # MACD/EMA: +1 –µ—Å–ª–∏ MACD –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ç—Ä–µ–Ω–¥ –ø–æ EMA
    if (macd > signal and price > ema) or (macd < signal and price < ema):
        raw_score += score_weights["MACD_EMA"]
        breakdown["MACD_EMA"] = score_weights["MACD_EMA"]

    # HTF: +1 –µ—Å–ª–∏ —Ç—Ä–µ–Ω–¥ –Ω–∞ —Å—Ç–∞—Ä—à–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç
    if htf_trend and price > ema:
        raw_score += score_weights["HTF"]
        breakdown["HTF"] = score_weights["HTF"]

    # –û–±—ä—ë–º: +0.5 –µ—Å–ª–∏ –æ–±—ä—ë–º –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
    avg_volume = df["volume"].mean()
    if df["volume"].iloc[-1] > avg_volume:
        raw_score += score_weights["VOLUME"]
        breakdown["VOLUME"] = score_weights["VOLUME"]

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è score –¥–æ 0‚Äì5
    normalized_score = (raw_score / max_raw_score) * 5
    final_score = round(normalized_score, 1)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π score
    with last_score_lock:
        last_score_data[symbol] = {
            "symbol": symbol,
            "total": final_score,
            "details": breakdown,
            "threshold": get_adaptive_min_score(trade_count, winrate),
            "final": final_score >= get_adaptive_min_score(trade_count, winrate),
            "timestamp": datetime.utcnow(),
        }

    if DRY_RUN:
        log(
            f"{symbol or ''} üìä Score: {final_score:.1f}/5 (raw: {raw_score:.2f}/{max_raw_score:.1f})",
            level="DEBUG",
        )

    return final_score


def explain_score(df):
    price = df["close"].iloc[-1]
    ema = df["ema"].iloc[-1]
    rsi = df["rsi"].iloc[-1]
    macd = df["macd"].iloc[-1]
    signal = df["macd_signal"].iloc[-1]
    htf_trend = df.get("htf_trend", [False])[-1]

    parts = []
    if rsi < 35 or rsi > 65:
        parts.append("‚úÖ RSI extreme")
    if (macd > signal and rsi < 50) or (macd < signal and rsi > 50):
        parts.append("‚úÖ MACD/RSI aligned")
    if (macd > signal and price > ema) or (macd < signal and price < ema):
        parts.append("‚úÖ Price/MACD vs EMA aligned")
    if htf_trend and price > ema:
        parts.append("‚úÖ HTF trend confirmed")
    if df["volume"].iloc[-1] > df["volume"].mean():
        parts.append("‚úÖ Volume above average")

    return "\n".join(parts) if parts else "‚ùå No significant signals"


def get_last_score_breakdown(symbol=None):
    with last_score_lock:
        if not last_score_data:
            return None
        if symbol:
            return last_score_data.get(symbol)
        return max(last_score_data.values(), key=lambda x: x["timestamp"], default=None)
