import json
import os
import re

import pandas as pd

from common.config_loader import CONFIG_FILE, EXPORT_PATH, TP1_PERCENT, TP2_PERCENT
from constants import BACKUP_PATH, STATUS_PATH
from telegram.telegram_utils import escape_markdown_v2, send_telegram_message
from utils_core import get_cached_balance
from utils_logging import backup_config

###############################################################################
# –ü–†–ï–î–£–°–õ–û–í–ò–ï:
# 1. CSV (EXPORT_PATH) –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏:
#   - "Date"       (parse_dates=["Date"])
#   - "TP1 Hit", "TP2 Hit", "SL Hit" (–∑–Ω–∞—á–µ–Ω–∏—è "YES" –∏–ª–∏ True)
#   - "PnL (%)"    (–ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞)
#   - (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤) "atr", "price", "adx", "bb_width"
#   - (–¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤) "Symbol", "Result" (TP1 / TP2 / SL), "PnL (%)"
#
# 2. –í config.py –æ–±—ä—è–≤–ª–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏:
#     TP1_PERCENT = 0.007
#     TP2_PERCENT = 0.014
#   ...–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ:
#     FILTER_THRESHOLDS = { "BTCUSDC": {...}, ... }
#
# 3. –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —Å—Ç–∞—Ç—É—Å—ã, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.
###############################################################################

CONFIG_PATH = CONFIG_FILE


def evaluate_best_config(days=7):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–¥–µ–ª–∫–∏ –∑–∞ 'days' –¥–Ω–µ–π –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    –º–µ–Ω—è–µ—Ç TP1_PERCENT / TP2_PERCENT –≤ config.py.
    """
    if not os.path.exists(EXPORT_PATH):
        send_telegram_message("‚ùå No trade history found for optimization.", force=True)
        return

    try:
        df = pd.read_csv(EXPORT_PATH, parse_dates=["Date"])
        # –û—Ç–±–∏—Ä–∞–µ–º —Å–¥–µ–ª–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ days –¥–Ω–µ–π
        cutoff = pd.Timestamp.now().normalize() - pd.Timedelta(days=days)
        df = df[df["Date"] >= cutoff]

        if df.empty:
            send_telegram_message("‚ÑπÔ∏è No recent trades for TP analysis.", force=True)
            return

        # –°–º–æ—Ç—Ä–∏–º –±–∞–ª–∞–Ω—Å ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å–¥–µ–ª–æ–∫ –Ω—É–∂–Ω–æ
        balance = get_cached_balance()
        tp_min_trades = 10 if balance < 300 else 20
        # –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–∞—Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–∞ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –Ω–æ–≤–∞—è TP1/TP2 –≤ %)
        update_threshold = 0.1 if balance < 300 else 0.2

        total = len(df)
        if total < tp_min_trades:
            send_telegram_message(f"‚ÑπÔ∏è Not enough trades for TP optimization (need {tp_min_trades}, have {total})", force=True)
            return

        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º: "TP1 Hit" / "TP2 Hit" / "SL Hit" –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ "YES"
        # –ï—Å–ª–∏ —É –≤–∞—Å True/False ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ "YES" –Ω–∞ True.
        tp1_hits = df[df["TP1 Hit"] == "YES"]
        tp2_hits = df[df["TP2 Hit"] == "YES"]
        sl_hits = df[df["SL Hit"] == "YES"]

        avg_pnl = df["PnL (%)"].mean()

        tp1_winrate = round(len(tp1_hits) / total * 100, 1)
        tp2_winrate = round(len(tp2_hits) / total * 100, 1)
        sl_rate = round(len(sl_hits) / total * 100, 1)

        # –û—Ç—á—ë—Ç –≤ Telegram
        msg = (
            f"üìä *TP/SL Performance ({days}d)*\n"
            f"Balance: ${balance:.2f}\n"
            f"Total Trades: {total}\n"
            f"‚Ä¢ TP1 hit: {len(tp1_hits)} ({tp1_winrate}%)\n"
            f"‚Ä¢ TP2 hit: {len(tp2_hits)} ({tp2_winrate}%)\n"
            f"‚Ä¢ SL hit: {len(sl_hits)} ({sl_rate}%)\n"
            f"‚Ä¢ Avg PnL: {avg_pnl:.2f}%"
        )
        send_telegram_message(escape_markdown_v2(msg), force=True)

        # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è –Ω–æ–≤—ã—Ö TP
        new_tp1 = 0.007 + (tp1_winrate - 60) * 0.0002
        new_tp2 = 0.014 + (tp2_winrate - 40) * 0.0003

        # –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ / –±–æ–ª—å—à–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        if balance < 300:
            new_tp1 = max(0.005, min(new_tp1, 0.015))
            new_tp2 = max(0.008, min(new_tp2, 0.025))
        else:
            new_tp1 = max(0.004, min(new_tp1, 0.02))
            new_tp2 = max(0.007, min(new_tp2, 0.035))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç —Å—Ç–∞—Ä—ã—Ö
        diff_tp1 = abs(new_tp1 - TP1_PERCENT) / max(TP1_PERCENT, 0.00001)
        diff_tp2 = abs(new_tp2 - TP2_PERCENT) / max(TP2_PERCENT, 0.00001)

        if diff_tp1 > update_threshold or diff_tp2 > update_threshold:
            backup_config()  # —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è config.py
            _update_config_tp(new_tp1, new_tp2)

            note = f"‚úÖ TP1/TP2 auto-updated:\n" f"TP1: {round(new_tp1*100, 2)}%\n" f"TP2: {round(new_tp2*100, 2)}%\n" f"(Threshold: {update_threshold*100}% for balance ~${int(balance)})"
            send_telegram_message(escape_markdown_v2(note), force=True)

    except Exception as e:
        send_telegram_message(f"‚ùå TP Optimizer Error: {e}", force=True)


def _update_config_tp(tp1, tp2):
    """
    –ò—â–µ—Ç —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å TP1_PERCENT –∏ TP2_PERCENT –≤ config.py,
    –∑–∞–º–µ–Ω—è–µ—Ç –Ω–∞ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
    """
    with open(CONFIG_PATH, "r", encoding="utf-8") as f:
        lines = f.readlines()

    with open(CONFIG_PATH, "w", encoding="utf-8") as f:
        for line in lines:
            if line.strip().startswith("TP1_PERCENT"):
                f.write(f"TP1_PERCENT = {round(tp1, 4)}\n")
            elif line.strip().startswith("TP2_PERCENT"):
                f.write(f"TP2_PERCENT = {round(tp2, 4)}\n")
            else:
                f.write(line)


def _update_filter_thresholds(new_thresholds: dict):
    """
    –ü—Ä–æ–±—É–µ—Ç –Ω–∞–π—Ç–∏ FILTER_THRESHOLDS = { ... } –≤ config.py
    –∏ –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ–≤–∞—Ä—è.
    –ù—É–∂–Ω–æ, –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ dynamic filters (atr / adx / bb).
    """
    try:
        backup_config()

        with open(CONFIG_PATH, "r", encoding="utf-8") as f:
            content = f.read()

        match = re.search(r"FILTER_THRESHOLDS\s*=\s*({.*?})", content, re.DOTALL)
        old_data = {}
        if match:
            # eval, —á—Ç–æ–±—ã —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ–±—ä–µ–∫—Ç
            old_data = eval(match.group(1))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ—Ä–æ–≥–∏ –≤ BACKUP_PATH (JSON)
            with open(BACKUP_PATH, "w", encoding="utf-8") as bkp:
                json.dump(old_data, bkp, indent=2)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å–æ —Å–ª–æ–≤–∞—Ä—ë–º
        new_text = "FILTER_THRESHOLDS = " + json.dumps(new_thresholds, indent=4)
        new_content = re.sub(r"FILTER_THRESHOLDS\s*=\s*({.*?})", new_text, content, flags=re.DOTALL)

        with open(CONFIG_PATH, "w", encoding="utf-8") as f:
            f.write(new_content)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        changes = []
        for symbol, new_vals in new_thresholds.items():
            if symbol in old_data:
                old_vals = old_data[symbol]
                delta = []
                for k in ["atr", "adx", "bb"]:
                    old_v = round(old_vals.get(k, 0), 5)
                    new_v = round(new_vals.get(k, 0), 5)
                    if abs(old_v - new_v) >= 0.0001:
                        delta.append(f"{k.upper()}: {old_v} ‚Üí {new_v}")
                if delta:
                    changes.append(f"{symbol} ‚Üí " + " | ".join(delta))

        if changes:
            report = "üìä Filter thresholds updated:\n" + "\n".join(changes)
            send_telegram_message(escape_markdown_v2(report), force=True)
        else:
            send_telegram_message("‚ÑπÔ∏è No significant filter changes.", force=True)

    except Exception as e:
        send_telegram_message(f"‚ö†Ô∏è Failed to update config.py: {e}", force=True)


def _analyze_filter_thresholds():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–¥–µ–ª–∫–∏ (TP1/TP2/SL), –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π ATR/ADX/BB
    –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫. –ó–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç _update_filter_thresholds
    –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥—Å—Ç—Ä–æ–π–∫–∏ FILTER_THRESHOLDS.

    –¢—Ä–µ–±—É–µ—Ç –≤ CSV –∫–æ–ª–æ–Ω–∫–∏:
      "atr", "price", "adx", "bb_width"
    –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî —É–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.
    """
    try:
        df = pd.read_csv(EXPORT_PATH)
        df = df[df["Result"].isin(["TP1", "TP2", "SL"])]

        balance = get_cached_balance()
        filter_min_trades = 5 if balance < 300 else 10

        if len(df) < filter_min_trades:
            return  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–¥–µ–ª–æ–∫

        new_thresholds = {}
        for symbol in df["Symbol"].unique():
            sub = df[df["Symbol"] == symbol]
            if len(sub) < filter_min_trades:
                continue

            # –¢–æ–ª—å–∫–æ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ (TP1/TP2)
            winners = sub[sub["Result"].isin(["TP1", "TP2"])]

            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ "atr", "price", "adx", "bb_width"
            avg_atr = round((winners["atr"].mean() / winners["price"].mean()), 5)
            avg_adx = round(winners["adx"].mean(), 1)
            avg_bb = round((winners["bb_width"] / winners["price"]).mean(), 5)

            new_thresholds[symbol] = {"atr": avg_atr, "adx": avg_adx, "bb": avg_bb}

        if new_thresholds:
            _update_filter_thresholds(new_thresholds)

    except Exception as e:
        send_telegram_message(f"‚ùå Filter optimizer error: {e}", force=True)


def _analyze_symbol_stats():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∏–Ω—Ä–µ–π—Ç —Å–∏–º–≤–æ–ª–∞. –ï—Å–ª–∏ <30% ‚Üí disabled, –µ—Å–ª–∏ >70%+avg_pnl>0.8 ‚Üí priority.
    –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ STATUS_PATH (JSON), –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî —É–¥–∞–ª–∏—Ç–µ –≤—Å—é —Ñ—É–Ω–∫—Ü–∏—é.
    """
    try:
        df = pd.read_csv(EXPORT_PATH)
        df = df[df["Result"].isin(["TP1", "TP2", "SL"])]

        balance = get_cached_balance()
        min_trades_required = 10 if balance < 300 else 20

        if len(df) < min_trades_required:
            return

        status_map = {}
        messages = []

        for symbol in df["Symbol"].unique():
            sub = df[df["Symbol"] == symbol]
            if len(sub) < min_trades_required:
                continue

            wins = len(sub[sub["Result"].isin(["TP1", "TP2"])])
            total = len(sub)
            winrate = wins / total * 100
            avg_pnl = sub["PnL (%)"].mean()

            # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö / –±–æ–ª—å—à–∏—Ö —Å—á–µ—Ç–æ–≤
            disable_threshold = 25 if balance < 300 else 30
            priority_threshold = 65 if balance < 300 else 70

            if winrate < disable_threshold:
                status_map[symbol] = "disabled"
                messages.append(f"‚è∏ {symbol} disabled ‚Äì poor stats (winrate {winrate:.1f}%)")
            elif winrate > priority_threshold and avg_pnl > 0.8:
                status_map[symbol] = "priority"
                messages.append(f"‚≠êÔ∏è {symbol} boosted ‚Äì winrate {winrate:.1f}%, avg PnL {avg_pnl:.2f}%")

        if status_map:
            os.makedirs("data", exist_ok=True)
            with open(STATUS_PATH, "w") as f:
                json.dump(status_map, f, indent=2)

        if messages:
            msg = "üìå Symbol Stats:\n" + "\n".join(messages)
            send_telegram_message(escape_markdown_v2(msg), force=True)

    except Exception as e:
        send_telegram_message(f"‚ö†Ô∏è Symbol status analysis failed: {e}", force=True)


def run_tp_optimizer():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –≤—ã–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ TP1/TP2,
    –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∞–¥–∞–ø—Ç–∞—Ü–∏—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤.
    –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —Å—Ç–∞—Ç—É—Å ‚Äî –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤—ã–∑–æ–≤—ã.
    """
    evaluate_best_config()  # –ê–≤—Ç–æ-–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ TP1/TP2
    _analyze_filter_thresholds()  # <- –£–¥–∞–ª–∏—Ç–µ/–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã dynamic filters
    _analyze_symbol_stats()  # <- –£–¥–∞–ª–∏—Ç–µ/–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω priority/disabled
