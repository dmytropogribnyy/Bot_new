# tp_optimizer_ml.py ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å JSON-–∫–æ–Ω—Ñ–∏–≥–æ–º

import datetime
import json
import os
import shutil

import pandas as pd

from common.config_loader import (
    # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—å ML-–ø–æ—Ä–æ–≥–∏ –≤ config_loader:
    # TP_ML_THRESHOLD,
    CONFIG_FILE,  # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–¥–æ –¥–µ–ª–∞—Ç—å backup
    TP_ML_MIN_TRADES_FULL,
    TP_ML_MIN_TRADES_INITIAL,
    TP_ML_SWITCH_THRESHOLD,
)
from constants import TP_CSV
from telegram.telegram_utils import escape_markdown_v2, send_telegram_message
from utils_core import get_cached_balance
from utils_logging import log

# –§–∞–π–ª, –≥–¥–µ —Ö—Ä–∞–Ω–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ TP-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º:
SETTINGS_JSON = "data/tp_settings.json"

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π backup config_loader.py (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ):
BACKUP_FILE = "config_backup.py"


def _load_json_settings():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å tp_settings.json —Å –¥–∏—Å–∫–∞. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π dict."""
    if not os.path.exists(SETTINGS_JSON):
        return {}
    try:
        with open(SETTINGS_JSON, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        log(f"[TP-ML] Error loading {SETTINGS_JSON}: {e}", level="WARNING")
        return {}


def _save_json_settings(data):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å tp_settings.json (–±–µ–∑–æ–ø–∞—Å–Ω–æ)."""
    try:
        os.makedirs("data", exist_ok=True)
        with open(SETTINGS_JSON, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2)
        log(f"[TP-ML] Settings saved to {SETTINGS_JSON}", level="INFO")
    except Exception as e:
        log(f"[TP-ML] Error saving {SETTINGS_JSON}: {e}", level="ERROR")


def _backup_config():
    """–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Å–æ–∑–¥–∞—ë–º backup –≤–∞—à–µ–≥–æ config_loader.py (–∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Ñ–∞–π–ª–∞)."""
    try:
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M")
        backup_name = f"{BACKUP_FILE}.{timestamp}"
        shutil.copy(CONFIG_FILE, backup_name)
        log(f"Config_loader.py backed up: {backup_name}", level="INFO")
    except Exception as e:
        log(f"Error backing up config_loader.py: {e}", level="ERROR")


def _get_min_trades_required(balance, total_trades):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∏–Ω–∏–º—É–º —Å–¥–µ–ª–æ–∫, –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –∏ TP_ML_SWITCH_THRESHOLD."""
    if balance < 300:
        initial = 6
        full = 12
    else:
        initial = TP_ML_MIN_TRADES_INITIAL
        full = TP_ML_MIN_TRADES_FULL

    # –ï—Å–ª–∏ total_trades < TP_ML_SWITCH_THRESHOLD, –∏—Å–ø–æ–ª—å–∑—É–µ–º initial, –∏–Ω–∞—á–µ full
    # (–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –ø–æ–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É —Å–∞–º–∏)
    if total_trades < (TP_ML_SWITCH_THRESHOLD * 100):  # –£—Å–ª–æ–≤–Ω–æ, scale factor
        return initial
    else:
        return full


def analyze_and_optimize_tp():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ML-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –ù–ï –º–µ–Ω—è–µ—Ç config_loader.py:
    - —Å—á–∏—Ç—ã–≤–∞–µ—Ç tp_performance.csv
    - –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç TP1/TP2
    - c–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ data/tp_settings.json
    """
    try:
        if not os.path.exists(TP_CSV):
            log(f"[TP-ML] {TP_CSV} not found", level="WARNING")
            return

        df = pd.read_csv(TP_CSV, parse_dates=["Date"])
        total_trades = len(df)
        if df.empty or total_trades < 5:
            log("[TP-ML] Not enough trade data for ML optimization", level="WARNING")
            return

        # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        balance = get_cached_balance()

        # –ó–∞–≥—Ä—É–∑–∏–º —Ç–µ–∫—É—â–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (tp_settings.json)
        local_settings = _load_json_settings()

        # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏: backup –≤–∞—à–µ–≥–æ config_loader.py
        # _backup_config()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º min trades
        min_trades_required = _get_min_trades_required(balance, total_trades)
        report_lines = [
            "ü§ñ *TP Optimizer ML Report*",
            f"üí∞ Account Balance: ${balance:.2f}",
            f"üìà Using min trades per symbol: {min_trades_required} (total trades: {total_trades})",
        ]

        pairs = df["Symbol"].unique()
        updated = False
        skipped_symbols = []

        for symbol in pairs:
            symbol_df = df[df["Symbol"] == symbol]
            if len(symbol_df) < min_trades_required:
                skipped_symbols.append(symbol)
                continue

            tp1_hits = symbol_df[symbol_df["Result"] == "TP1"]
            tp2_hits = symbol_df[symbol_df["Result"] == "TP2"]
            sl_hits = symbol_df[symbol_df["Result"] == "SL"]

            tp1_wr = len(tp1_hits) / len(symbol_df)
            tp2_wr = len(tp2_hits) / len(symbol_df)
            sl_wr = len(sl_hits) / len(symbol_df)

            avg_tp1 = tp1_hits["PnL (%)"].mean() if not tp1_hits.empty else 0
            avg_tp2 = tp2_hits["PnL (%)"].mean() if not tp2_hits.empty else 0
            avg_sl = sl_hits["PnL (%)"].mean() if not sl_hits.empty else 0

            # –î–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ ‚Äî –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
            if balance < 300:
                best_tp1 = round(min(max(avg_tp1 / 100, 0.005), 0.012), 4)
                best_tp2 = round(min(max(avg_tp2 / 100, 0.008), 0.025), 4)
            else:
                best_tp1 = round(min(max(avg_tp1 / 100, 0.004), 0.01), 4)
                best_tp2 = round(min(max(avg_tp2 / 100, 0.01), 0.03), 4)

            report_lines.append(
                f"üîπ *{symbol}*\n"
                f"- TP1 wr: {tp1_wr:.0%}, avg PnL: {avg_tp1:.2f}% ‚Üí Suggest: {best_tp1:.4f}\n"
                f"- TP2 wr: {tp2_wr:.0%}, avg PnL: {avg_tp2:.2f}% ‚Üí Suggest: {best_tp2:.4f}\n"
                f"- SL rate: {sl_wr:.0%}, avg SL: {avg_sl:.2f}%"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ local_settings.
            local_settings.setdefault(symbol, {})
            local_settings[symbol]["tp1"] = best_tp1
            local_settings[symbol]["tp2"] = best_tp2

            updated = True

        if skipped_symbols:
            report_lines.append("\n‚è≠Ô∏è Skipped (not enough data): " + ", ".join(skipped_symbols))

        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç—á—ë—Ç
        if updated:
            _save_json_settings(local_settings)
            send_telegram_message(escape_markdown_v2("\n\n".join(report_lines)), force=True)
        else:
            msg = f"No symbols met the criteria for TP ML optimization\n" f"(min {min_trades_required} trades, total={total_trades})."
            send_telegram_message(escape_markdown_v2(msg), force=True)

    except Exception as e:
        log(f"[TP-ML] Optimization failed: {str(e)}", level="ERROR")
        send_telegram_message(escape_markdown_v2(f"‚ùå TP ML optimization failed:\n{e}"), force=True)
